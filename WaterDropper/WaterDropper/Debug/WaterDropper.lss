
WaterDropper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  00004894  00004928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c8  00800220  00800220  00004a48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004a48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  00004ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a200  00000000  00000000  00005430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004306  00000000  00000000  0001f630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000062d3  00000000  00000000  00023936  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022bc  00000000  00000000  00029c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003725  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ce16  00000000  00000000  0002f5ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000920  00000000  00000000  0003c403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__ctors_end>
       4:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
       8:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
       c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      10:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      14:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      18:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      1c:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__vector_7>
      20:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      24:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      28:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      2c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      30:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      34:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      38:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      3c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      40:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__vector_16>
      44:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      48:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__vector_18>
      4c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__vector_19>
      50:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      54:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      58:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      5c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      60:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      64:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      68:	93 05       	cpc	r25, r3
      6a:	c8 05       	cpc	r28, r8
      6c:	fd 05       	cpc	r31, r13
      6e:	32 06       	cpc	r3, r18
      70:	67 06       	cpc	r6, r23
      72:	9c 06       	cpc	r9, r28
      74:	d1 06       	cpc	r13, r17
      76:	06 07       	cpc	r16, r22
      78:	3b 07       	cpc	r19, r27
      7a:	70 07       	cpc	r23, r16
      7c:	62 08       	sbc	r6, r2
      7e:	ae 07       	cpc	r26, r30
      80:	b4 07       	cpc	r27, r20
      82:	be 07       	cpc	r27, r30
      84:	62 08       	sbc	r6, r2
      86:	62 08       	sbc	r6, r2
      88:	02 08       	sbc	r0, r2
      8a:	1c 08       	sbc	r1, r12
      8c:	2a 08       	sbc	r2, r10
      8e:	3b 08       	sbc	r3, r11
      90:	47 08       	sbc	r4, r7
      92:	07 63       	ori	r16, 0x37	; 55
      94:	42 36       	cpi	r20, 0x62	; 98
      96:	b7 9b       	sbis	0x16, 7	; 22
      98:	d8 a7       	std	Y+40, r29	; 0x28
      9a:	1a 39       	cpi	r17, 0x9A	; 154
      9c:	68 56       	subi	r22, 0x68	; 104
      9e:	18 ae       	std	Y+56, r1	; 0x38
      a0:	ba ab       	std	Y+50, r27	; 0x32
      a2:	55 8c       	ldd	r5, Z+29	; 0x1d
      a4:	1d 3c       	cpi	r17, 0xCD	; 205
      a6:	b7 cc       	rjmp	.-1682   	; 0xfffffa16 <__eeprom_end+0xff7efa16>
      a8:	57 63       	ori	r21, 0x37	; 55
      aa:	bd 6d       	ori	r27, 0xDD	; 221
      ac:	ed fd       	.word	0xfded	; ????
      ae:	75 3e       	cpi	r23, 0xE5	; 229
      b0:	f6 17       	cp	r31, r22
      b2:	72 31       	cpi	r23, 0x12	; 18
      b4:	bf 00       	.word	0x00bf	; ????
      b6:	00 00       	nop
      b8:	80 3f       	cpi	r24, 0xF0	; 240
      ba:	08 00       	.word	0x0008	; ????
      bc:	00 00       	nop
      be:	be 92       	st	-X, r11
      c0:	24 49       	sbci	r18, 0x94	; 148
      c2:	12 3e       	cpi	r17, 0xE2	; 226
      c4:	ab aa       	std	Y+51, r10	; 0x33
      c6:	aa 2a       	or	r10, r26
      c8:	be cd       	rjmp	.-1156   	; 0xfffffc46 <__eeprom_end+0xff7efc46>
      ca:	cc cc       	rjmp	.-1640   	; 0xfffffa64 <__eeprom_end+0xff7efa64>
      cc:	4c 3e       	cpi	r20, 0xEC	; 236
      ce:	00 00       	nop
      d0:	00 80       	ld	r0, Z
      d2:	be ab       	std	Y+54, r27	; 0x36
      d4:	aa aa       	std	Y+50, r10	; 0x32
      d6:	aa 3e       	cpi	r26, 0xEA	; 234
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	bf 00       	.word	0x00bf	; ????
      de:	00 00       	nop
      e0:	80 3f       	cpi	r24, 0xF0	; 240
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	00 08       	sbc	r0, r0
      e8:	41 78       	andi	r20, 0x81	; 129
      ea:	d3 bb       	out	0x13, r29	; 19
      ec:	43 87       	std	Z+11, r20	; 0x0b
      ee:	d1 13       	cpse	r29, r17
      f0:	3d 19       	sub	r19, r13
      f2:	0e 3c       	cpi	r16, 0xCE	; 206
      f4:	c3 bd       	out	0x23, r28	; 35
      f6:	42 82       	std	Z+2, r4	; 0x02
      f8:	ad 2b       	or	r26, r29
      fa:	3e 68       	ori	r19, 0x8E	; 142
      fc:	ec 82       	std	Y+4, r14	; 0x04
      fe:	76 be       	out	0x36, r7	; 54
     100:	d9 8f       	std	Y+25, r29	; 0x19
     102:	e1 a9       	ldd	r30, Z+49	; 0x31
     104:	3e 4c       	sbci	r19, 0xCE	; 206
     106:	80 ef       	ldi	r24, 0xF0	; 240
     108:	ff be       	out	0x3f, r15	; 63
     10a:	01 c4       	rjmp	.+2050   	; 0x90e <__stack+0xf>
     10c:	ff 7f       	andi	r31, 0xFF	; 255
     10e:	3f 00       	.word	0x003f	; ????
     110:	00 00       	nop
	...

00000114 <__trampolines_end>:
     114:	00 00       	nop
     116:	00 08       	sbc	r0, r0
     118:	00 02       	muls	r16, r16
     11a:	01 00       	.word	0x0001	; ????
     11c:	00 03       	mulsu	r16, r16
     11e:	04 07       	cpc	r16, r20
	...

00000128 <digital_pin_to_bit_mask_PGM>:
     128:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     138:	04 08 10 20                                         ... 

0000013c <digital_pin_to_port_PGM>:
     13c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     14c:	03 03 03 03                                         ....

00000150 <port_to_input_PGM>:
     150:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000015a <port_to_output_PGM>:
     15a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000164 <port_to_mode_PGM>:
     164:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000016e <__ctors_start>:
     16e:	2c 0a       	sbc	r2, r28
     170:	f7 0f       	add	r31, r23

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d8 e0       	ldi	r29, 0x08	; 8
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
     17e:	12 e0       	ldi	r17, 0x02	; 2
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	e4 e9       	ldi	r30, 0x94	; 148
     186:	f8 e4       	ldi	r31, 0x48	; 72
     188:	02 c0       	rjmp	.+4      	; 0x18e <__do_copy_data+0x10>
     18a:	05 90       	lpm	r0, Z+
     18c:	0d 92       	st	X+, r0
     18e:	a0 32       	cpi	r26, 0x20	; 32
     190:	b1 07       	cpc	r27, r17
     192:	d9 f7       	brne	.-10     	; 0x18a <__do_copy_data+0xc>

00000194 <__do_clear_bss>:
     194:	23 e0       	ldi	r18, 0x03	; 3
     196:	a0 e2       	ldi	r26, 0x20	; 32
     198:	b2 e0       	ldi	r27, 0x02	; 2
     19a:	01 c0       	rjmp	.+2      	; 0x19e <.do_clear_bss_start>

0000019c <.do_clear_bss_loop>:
     19c:	1d 92       	st	X+, r1

0000019e <.do_clear_bss_start>:
     19e:	a8 3e       	cpi	r26, 0xE8	; 232
     1a0:	b2 07       	cpc	r27, r18
     1a2:	e1 f7       	brne	.-8      	; 0x19c <.do_clear_bss_loop>

000001a4 <__do_global_ctors>:
     1a4:	10 e0       	ldi	r17, 0x00	; 0
     1a6:	c9 eb       	ldi	r28, 0xB9	; 185
     1a8:	d0 e0       	ldi	r29, 0x00	; 0
     1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <__do_global_ctors+0x10>
     1ac:	21 97       	sbiw	r28, 0x01	; 1
     1ae:	fe 01       	movw	r30, r28
     1b0:	0e 94 c3 21 	call	0x4386	; 0x4386 <__tablejump2__>
     1b4:	c7 3b       	cpi	r28, 0xB7	; 183
     1b6:	d1 07       	cpc	r29, r17
     1b8:	c9 f7       	brne	.-14     	; 0x1ac <__do_global_ctors+0x8>
     1ba:	0e 94 25 10 	call	0x204a	; 0x204a <main>
     1be:	0c 94 48 24 	jmp	0x4890	; 0x4890 <_exit>

000001c2 <__bad_interrupt>:
     1c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c6 <_Z7calcTTTf>:
  }
unsigned long microToMilli(unsigned long num)
  {
    unsigned long result = num * pow(10,-3);
    return result;
  }
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e4       	ldi	r20, 0x40	; 64
     1cc:	51 e4       	ldi	r21, 0x41	; 65
     1ce:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
     1da:	2d ec       	ldi	r18, 0xCD	; 205
     1dc:	3c ec       	ldi	r19, 0xCC	; 204
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	52 e4       	ldi	r21, 0x42	; 66
     1e2:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
     1e6:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <sqrt>
     1ea:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fixunssfsi>
     1ee:	9b 01       	movw	r18, r22
     1f0:	ac 01       	movw	r20, r24
     1f2:	60 e4       	ldi	r22, 0x40	; 64
     1f4:	72 e4       	ldi	r23, 0x42	; 66
     1f6:	8f e0       	ldi	r24, 0x0F	; 15
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 91 21 	call	0x4322	; 0x4322 <__mulsi3>
     1fe:	08 95       	ret

00000200 <_Z5shootv>:
     200:	2d 9a       	sbi	0x05, 5	; 5
     202:	64 ef       	ldi	r22, 0xF4	; 244
     204:	71 e0       	ldi	r23, 0x01	; 1
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <delay>
     20e:	2d 98       	cbi	0x05, 5	; 5
     210:	08 95       	ret

00000212 <_Z10readRemotev>:
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	6c e4       	ldi	r22, 0x4C	; 76
     218:	72 e0       	ldi	r23, 0x02	; 2
     21a:	8b e5       	ldi	r24, 0x5B	; 91
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN6IRrecv6decodeEP14decode_results>
     222:	89 2b       	or	r24, r25
     224:	09 f4       	brne	.+2      	; 0x228 <_Z10readRemotev+0x16>
     226:	f8 c0       	rjmp	.+496    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     228:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <results+0x3>
     22c:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <results+0x4>
     230:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <results+0x5>
     234:	70 91 52 02 	lds	r23, 0x0252	; 0x800252 <results+0x6>
     238:	20 e1       	ldi	r18, 0x10	; 16
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	8c e6       	ldi	r24, 0x6C	; 108
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN5Print7printlnEmi>
     244:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <results+0x3>
     248:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <results+0x4>
     24c:	a0 91 51 02 	lds	r26, 0x0251	; 0x800251 <results+0x5>
     250:	b0 91 52 02 	lds	r27, 0x0252	; 0x800252 <results+0x6>
     254:	8d 39       	cpi	r24, 0x9D	; 157
     256:	22 e6       	ldi	r18, 0x62	; 98
     258:	92 07       	cpc	r25, r18
     25a:	2f ef       	ldi	r18, 0xFF	; 255
     25c:	a2 07       	cpc	r26, r18
     25e:	b1 05       	cpc	r27, r1
     260:	09 f4       	brne	.+2      	; 0x264 <_Z10readRemotev+0x52>
     262:	c4 c0       	rjmp	.+392    	; 0x3ec <_Z10readRemotev+0x1da>
     264:	08 f0       	brcs	.+2      	; 0x268 <_Z10readRemotev+0x56>
     266:	57 c0       	rjmp	.+174    	; 0x316 <_Z10readRemotev+0x104>
     268:	8f 3c       	cpi	r24, 0xCF	; 207
     26a:	20 e3       	ldi	r18, 0x30	; 48
     26c:	92 07       	cpc	r25, r18
     26e:	2f ef       	ldi	r18, 0xFF	; 255
     270:	a2 07       	cpc	r26, r18
     272:	b1 05       	cpc	r27, r1
     274:	09 f4       	brne	.+2      	; 0x278 <_Z10readRemotev+0x66>
     276:	a2 c0       	rjmp	.+324    	; 0x3bc <_Z10readRemotev+0x1aa>
     278:	18 f5       	brcc	.+70     	; 0x2c0 <_Z10readRemotev+0xae>
     27a:	8f 3e       	cpi	r24, 0xEF	; 239
     27c:	20 e1       	ldi	r18, 0x10	; 16
     27e:	92 07       	cpc	r25, r18
     280:	2f ef       	ldi	r18, 0xFF	; 255
     282:	a2 07       	cpc	r26, r18
     284:	b1 05       	cpc	r27, r1
     286:	09 f4       	brne	.+2      	; 0x28a <_Z10readRemotev+0x78>
     288:	a2 c0       	rjmp	.+324    	; 0x3ce <_Z10readRemotev+0x1bc>
     28a:	48 f4       	brcc	.+18     	; 0x29e <_Z10readRemotev+0x8c>
     28c:	8d 3f       	cpi	r24, 0xFD	; 253
     28e:	92 40       	sbci	r25, 0x02	; 2
     290:	af 4f       	sbci	r26, 0xFF	; 255
     292:	b1 05       	cpc	r27, r1
     294:	09 f0       	breq	.+2      	; 0x298 <_Z10readRemotev+0x86>
     296:	b9 c0       	rjmp	.+370    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     298:	cc e0       	ldi	r28, 0x0C	; 12
     29a:	d0 e0       	ldi	r29, 0x00	; 0
     29c:	b8 c0       	rjmp	.+368    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     29e:	87 3e       	cpi	r24, 0xE7	; 231
     2a0:	28 e1       	ldi	r18, 0x18	; 24
     2a2:	92 07       	cpc	r25, r18
     2a4:	2f ef       	ldi	r18, 0xFF	; 255
     2a6:	a2 07       	cpc	r26, r18
     2a8:	b1 05       	cpc	r27, r1
     2aa:	09 f4       	brne	.+2      	; 0x2ae <_Z10readRemotev+0x9c>
     2ac:	8a c0       	rjmp	.+276    	; 0x3c2 <_Z10readRemotev+0x1b0>
     2ae:	8d 3d       	cpi	r24, 0xDD	; 221
     2b0:	92 42       	sbci	r25, 0x22	; 34
     2b2:	af 4f       	sbci	r26, 0xFF	; 255
     2b4:	b1 05       	cpc	r27, r1
     2b6:	09 f0       	breq	.+2      	; 0x2ba <_Z10readRemotev+0xa8>
     2b8:	a8 c0       	rjmp	.+336    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     2ba:	cb e0       	ldi	r28, 0x0B	; 11
     2bc:	d0 e0       	ldi	r29, 0x00	; 0
     2be:	a7 c0       	rjmp	.+334    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     2c0:	85 3b       	cpi	r24, 0xB5	; 181
     2c2:	2a e4       	ldi	r18, 0x4A	; 74
     2c4:	92 07       	cpc	r25, r18
     2c6:	2f ef       	ldi	r18, 0xFF	; 255
     2c8:	a2 07       	cpc	r26, r18
     2ca:	b1 05       	cpc	r27, r1
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <_Z10readRemotev+0xbe>
     2ce:	85 c0       	rjmp	.+266    	; 0x3da <_Z10readRemotev+0x1c8>
     2d0:	88 f4       	brcc	.+34     	; 0x2f4 <_Z10readRemotev+0xe2>
     2d2:	87 3c       	cpi	r24, 0xC7	; 199
     2d4:	28 e3       	ldi	r18, 0x38	; 56
     2d6:	92 07       	cpc	r25, r18
     2d8:	2f ef       	ldi	r18, 0xFF	; 255
     2da:	a2 07       	cpc	r26, r18
     2dc:	b1 05       	cpc	r27, r1
     2de:	09 f4       	brne	.+2      	; 0x2e2 <_Z10readRemotev+0xd0>
     2e0:	79 c0       	rjmp	.+242    	; 0x3d4 <_Z10readRemotev+0x1c2>
     2e2:	8d 3b       	cpi	r24, 0xBD	; 189
     2e4:	92 44       	sbci	r25, 0x42	; 66
     2e6:	af 4f       	sbci	r26, 0xFF	; 255
     2e8:	b1 05       	cpc	r27, r1
     2ea:	09 f0       	breq	.+2      	; 0x2ee <_Z10readRemotev+0xdc>
     2ec:	8e c0       	rjmp	.+284    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     2ee:	c7 e0       	ldi	r28, 0x07	; 7
     2f0:	d0 e0       	ldi	r29, 0x00	; 0
     2f2:	8d c0       	rjmp	.+282    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     2f4:	8d 3a       	cpi	r24, 0xAD	; 173
     2f6:	22 e5       	ldi	r18, 0x52	; 82
     2f8:	92 07       	cpc	r25, r18
     2fa:	2f ef       	ldi	r18, 0xFF	; 255
     2fc:	a2 07       	cpc	r26, r18
     2fe:	b1 05       	cpc	r27, r1
     300:	09 f4       	brne	.+2      	; 0x304 <_Z10readRemotev+0xf2>
     302:	6e c0       	rjmp	.+220    	; 0x3e0 <_Z10readRemotev+0x1ce>
     304:	85 3a       	cpi	r24, 0xA5	; 165
     306:	9a 45       	sbci	r25, 0x5A	; 90
     308:	af 4f       	sbci	r26, 0xFF	; 255
     30a:	b1 05       	cpc	r27, r1
     30c:	09 f0       	breq	.+2      	; 0x310 <_Z10readRemotev+0xfe>
     30e:	7d c0       	rjmp	.+250    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     310:	c6 e0       	ldi	r28, 0x06	; 6
     312:	d0 e0       	ldi	r29, 0x00	; 0
     314:	7c c0       	rjmp	.+248    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     316:	8d 35       	cpi	r24, 0x5D	; 93
     318:	22 ea       	ldi	r18, 0xA2	; 162
     31a:	92 07       	cpc	r25, r18
     31c:	2f ef       	ldi	r18, 0xFF	; 255
     31e:	a2 07       	cpc	r26, r18
     320:	b1 05       	cpc	r27, r1
     322:	09 f4       	brne	.+2      	; 0x326 <_Z10readRemotev+0x114>
     324:	6c c0       	rjmp	.+216    	; 0x3fe <_Z10readRemotev+0x1ec>
     326:	18 f5       	brcc	.+70     	; 0x36e <_Z10readRemotev+0x15c>
     328:	85 38       	cpi	r24, 0x85	; 133
     32a:	2a e7       	ldi	r18, 0x7A	; 122
     32c:	92 07       	cpc	r25, r18
     32e:	2f ef       	ldi	r18, 0xFF	; 255
     330:	a2 07       	cpc	r26, r18
     332:	b1 05       	cpc	r27, r1
     334:	09 f4       	brne	.+2      	; 0x338 <_Z10readRemotev+0x126>
     336:	48 c0       	rjmp	.+144    	; 0x3c8 <_Z10readRemotev+0x1b6>
     338:	48 f4       	brcc	.+18     	; 0x34c <_Z10readRemotev+0x13a>
     33a:	87 39       	cpi	r24, 0x97	; 151
     33c:	98 46       	sbci	r25, 0x68	; 104
     33e:	af 4f       	sbci	r26, 0xFF	; 255
     340:	b1 05       	cpc	r27, r1
     342:	09 f0       	breq	.+2      	; 0x346 <_Z10readRemotev+0x134>
     344:	62 c0       	rjmp	.+196    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     346:	c0 e0       	ldi	r28, 0x00	; 0
     348:	d0 e0       	ldi	r29, 0x00	; 0
     34a:	61 c0       	rjmp	.+194    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     34c:	8f 36       	cpi	r24, 0x6F	; 111
     34e:	20 e9       	ldi	r18, 0x90	; 144
     350:	92 07       	cpc	r25, r18
     352:	2f ef       	ldi	r18, 0xFF	; 255
     354:	a2 07       	cpc	r26, r18
     356:	b1 05       	cpc	r27, r1
     358:	09 f4       	brne	.+2      	; 0x35c <_Z10readRemotev+0x14a>
     35a:	45 c0       	rjmp	.+138    	; 0x3e6 <_Z10readRemotev+0x1d4>
     35c:	87 36       	cpi	r24, 0x67	; 103
     35e:	98 49       	sbci	r25, 0x98	; 152
     360:	af 4f       	sbci	r26, 0xFF	; 255
     362:	b1 05       	cpc	r27, r1
     364:	09 f0       	breq	.+2      	; 0x368 <_Z10readRemotev+0x156>
     366:	51 c0       	rjmp	.+162    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     368:	c0 e1       	ldi	r28, 0x10	; 16
     36a:	d0 e0       	ldi	r29, 0x00	; 0
     36c:	50 c0       	rjmp	.+160    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     36e:	8d 33       	cpi	r24, 0x3D	; 61
     370:	22 ec       	ldi	r18, 0xC2	; 194
     372:	92 07       	cpc	r25, r18
     374:	2f ef       	ldi	r18, 0xFF	; 255
     376:	a2 07       	cpc	r26, r18
     378:	b1 05       	cpc	r27, r1
     37a:	09 f4       	brne	.+2      	; 0x37e <_Z10readRemotev+0x16c>
     37c:	43 c0       	rjmp	.+134    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     37e:	78 f4       	brcc	.+30     	; 0x39e <_Z10readRemotev+0x18c>
     380:	87 35       	cpi	r24, 0x57	; 87
     382:	28 ea       	ldi	r18, 0xA8	; 168
     384:	92 07       	cpc	r25, r18
     386:	2f ef       	ldi	r18, 0xFF	; 255
     388:	a2 07       	cpc	r26, r18
     38a:	b1 05       	cpc	r27, r1
     38c:	a9 f1       	breq	.+106    	; 0x3f8 <_Z10readRemotev+0x1e6>
     38e:	8f 34       	cpi	r24, 0x4F	; 79
     390:	90 4b       	sbci	r25, 0xB0	; 176
     392:	af 4f       	sbci	r26, 0xFF	; 255
     394:	b1 05       	cpc	r27, r1
     396:	c9 f5       	brne	.+114    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     398:	c4 e1       	ldi	r28, 0x14	; 20
     39a:	d0 e0       	ldi	r29, 0x00	; 0
     39c:	38 c0       	rjmp	.+112    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     39e:	8f 31       	cpi	r24, 0x1F	; 31
     3a0:	20 ee       	ldi	r18, 0xE0	; 224
     3a2:	92 07       	cpc	r25, r18
     3a4:	2f ef       	ldi	r18, 0xFF	; 255
     3a6:	a2 07       	cpc	r26, r18
     3a8:	b1 05       	cpc	r27, r1
     3aa:	19 f1       	breq	.+70     	; 0x3f2 <_Z10readRemotev+0x1e0>
     3ac:	8d 31       	cpi	r24, 0x1D	; 29
     3ae:	92 4e       	sbci	r25, 0xE2	; 226
     3b0:	af 4f       	sbci	r26, 0xFF	; 255
     3b2:	b1 05       	cpc	r27, r1
     3b4:	51 f5       	brne	.+84     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3b6:	c2 e1       	ldi	r28, 0x12	; 18
     3b8:	d0 e0       	ldi	r29, 0x00	; 0
     3ba:	29 c0       	rjmp	.+82     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3bc:	c1 e0       	ldi	r28, 0x01	; 1
     3be:	d0 e0       	ldi	r29, 0x00	; 0
     3c0:	26 c0       	rjmp	.+76     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3c2:	c2 e0       	ldi	r28, 0x02	; 2
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
     3c6:	23 c0       	rjmp	.+70     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3c8:	c3 e0       	ldi	r28, 0x03	; 3
     3ca:	d0 e0       	ldi	r29, 0x00	; 0
     3cc:	20 c0       	rjmp	.+64     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3ce:	c4 e0       	ldi	r28, 0x04	; 4
     3d0:	d0 e0       	ldi	r29, 0x00	; 0
     3d2:	1d c0       	rjmp	.+58     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3d4:	c5 e0       	ldi	r28, 0x05	; 5
     3d6:	d0 e0       	ldi	r29, 0x00	; 0
     3d8:	1a c0       	rjmp	.+52     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3da:	c8 e0       	ldi	r28, 0x08	; 8
     3dc:	d0 e0       	ldi	r29, 0x00	; 0
     3de:	17 c0       	rjmp	.+46     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3e0:	c9 e0       	ldi	r28, 0x09	; 9
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
     3e4:	14 c0       	rjmp	.+40     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3e6:	ca e0       	ldi	r28, 0x0A	; 10
     3e8:	d0 e0       	ldi	r29, 0x00	; 0
     3ea:	11 c0       	rjmp	.+34     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3ec:	cd e0       	ldi	r28, 0x0D	; 13
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
     3f0:	0e c0       	rjmp	.+28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3f2:	ce e0       	ldi	r28, 0x0E	; 14
     3f4:	d0 e0       	ldi	r29, 0x00	; 0
     3f6:	0b c0       	rjmp	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3f8:	cf e0       	ldi	r28, 0x0F	; 15
     3fa:	d0 e0       	ldi	r29, 0x00	; 0
     3fc:	08 c0       	rjmp	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3fe:	c1 e1       	ldi	r28, 0x11	; 17
     400:	d0 e0       	ldi	r29, 0x00	; 0
     402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     404:	c3 e1       	ldi	r28, 0x13	; 19
     406:	d0 e0       	ldi	r29, 0x00	; 0
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	cf ef       	ldi	r28, 0xFF	; 255
     40c:	df ef       	ldi	r29, 0xFF	; 255
     40e:	8b e5       	ldi	r24, 0x5B	; 91
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <_ZN6IRrecv6resumeEv>
     416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	df ef       	ldi	r29, 0xFF	; 255
     41c:	ce 01       	movw	r24, r28
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <_Z9clearCharPcss>:
     424:	20 e2       	ldi	r18, 0x20	; 32
     426:	77 fd       	sbrc	r23, 7
     428:	0f c0       	rjmp	.+30     	; 0x448 <_Z9clearCharPcss+0x24>
     42a:	fc 01       	movw	r30, r24
     42c:	61 15       	cp	r22, r1
     42e:	71 05       	cpc	r23, r1
     430:	39 f0       	breq	.+14     	; 0x440 <_Z9clearCharPcss+0x1c>
     432:	e6 0f       	add	r30, r22
     434:	f7 1f       	adc	r31, r23
     436:	df 01       	movw	r26, r30
     438:	11 97       	sbiw	r26, 0x01	; 1
     43a:	3c 91       	ld	r19, X
     43c:	30 83       	st	Z, r19
     43e:	01 c0       	rjmp	.+2      	; 0x442 <_Z9clearCharPcss+0x1e>
     440:	20 83       	st	Z, r18
     442:	61 50       	subi	r22, 0x01	; 1
     444:	71 09       	sbc	r23, r1
     446:	ef cf       	rjmp	.-34     	; 0x426 <_Z9clearCharPcss+0x2>
     448:	08 95       	ret

0000044a <_Z12charToStringPcs>:
     44a:	9f 92       	push	r9
     44c:	af 92       	push	r10
     44e:	bf 92       	push	r11
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <_Z12charToStringPcs+0x18>
     462:	00 d0       	rcall	.+0      	; 0x464 <_Z12charToStringPcs+0x1a>
     464:	00 d0       	rcall	.+0      	; 0x466 <_Z12charToStringPcs+0x1c>
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	8c 01       	movw	r16, r24
     46c:	6b 01       	movw	r12, r22
     46e:	5a 01       	movw	r10, r20
     470:	67 e0       	ldi	r22, 0x07	; 7
     472:	72 e0       	ldi	r23, 0x02	; 2
     474:	0e 94 92 13 	call	0x2724	; 0x2724 <_ZN6StringC1EPKc>
     478:	76 01       	movw	r14, r12
     47a:	c7 01       	movw	r24, r14
     47c:	8c 19       	sub	r24, r12
     47e:	9d 09       	sbc	r25, r13
     480:	8a 15       	cp	r24, r10
     482:	9b 05       	cpc	r25, r11
     484:	b4 f4       	brge	.+44     	; 0x4b2 <_Z12charToStringPcs+0x68>
     486:	f7 01       	movw	r30, r14
     488:	91 90       	ld	r9, Z+
     48a:	7f 01       	movw	r14, r30
     48c:	b8 01       	movw	r22, r16
     48e:	ce 01       	movw	r24, r28
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN6StringC1ERKS_>
     496:	69 2d       	mov	r22, r9
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZplRK15StringSumHelperc>
     4a0:	bc 01       	movw	r22, r24
     4a2:	c8 01       	movw	r24, r16
     4a4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6StringaSERKS_>
     4a8:	ce 01       	movw	r24, r28
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
     4b0:	e4 cf       	rjmp	.-56     	; 0x47a <_Z12charToStringPcs+0x30>
     4b2:	c8 01       	movw	r24, r16
     4b4:	26 96       	adiw	r28, 0x06	; 6
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	9f 90       	pop	r9
     4d6:	08 95       	ret

000004d8 <_Z5emptyPcs>:
     4d8:	fc 01       	movw	r30, r24
     4da:	20 e2       	ldi	r18, 0x20	; 32
     4dc:	af 01       	movw	r20, r30
     4de:	48 1b       	sub	r20, r24
     4e0:	59 0b       	sbc	r21, r25
     4e2:	46 17       	cp	r20, r22
     4e4:	57 07       	cpc	r21, r23
     4e6:	14 f4       	brge	.+4      	; 0x4ec <_Z5emptyPcs+0x14>
     4e8:	21 93       	st	Z+, r18
     4ea:	f8 cf       	rjmp	.-16     	; 0x4dc <_Z5emptyPcs+0x4>
     4ec:	08 95       	ret

000004ee <setup>:
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	88 e0       	ldi	r24, 0x08	; 8
     4f2:	0e 94 8f 12 	call	0x251e	; 0x251e <pinMode>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	8d e0       	ldi	r24, 0x0D	; 13
     4fa:	0e 94 8f 12 	call	0x251e	; 0x251e <pinMode>
     4fe:	38 9a       	sbi	0x07, 0	; 7
     500:	8b e5       	ldi	r24, 0x5B	; 91
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 64 14 	call	0x28c8	; 0x28c8 <_ZN6IRrecv10enableIRInEv>
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	42 e0       	ldi	r20, 0x02	; 2
     50c:	60 e1       	ldi	r22, 0x10	; 16
     50e:	80 e2       	ldi	r24, 0x20	; 32
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN13LiquidCrystal5beginEhhh>
     516:	80 e2       	ldi	r24, 0x20	; 32
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal4homeEv>
     51e:	68 e0       	ldi	r22, 0x08	; 8
     520:	71 e0       	ldi	r23, 0x01	; 1
     522:	80 e2       	ldi	r24, 0x20	; 32
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	80 e2       	ldi	r24, 0x20	; 32
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 9b 20 	call	0x4136	; 0x4136 <_ZN13LiquidCrystal9setCursorEhh>
     536:	66 e1       	ldi	r22, 0x16	; 22
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	80 e2       	ldi	r24, 0x20	; 32
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     542:	68 e8       	ldi	r22, 0x88	; 136
     544:	73 e1       	ldi	r23, 0x13	; 19
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <delay>
     54e:	64 e0       	ldi	r22, 0x04	; 4
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	88 e4       	ldi	r24, 0x48	; 72
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z5emptyPcs>
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	84 e4       	ldi	r24, 0x44	; 68
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z5emptyPcs>
     566:	64 e0       	ldi	r22, 0x04	; 4
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	80 e4       	ldi	r24, 0x40	; 64
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z5emptyPcs>
     572:	64 e0       	ldi	r22, 0x04	; 4
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8c e3       	ldi	r24, 0x3C	; 60
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z5emptyPcs>
     57e:	e4 e4       	ldi	r30, 0x44	; 68
     580:	f2 e0       	ldi	r31, 0x02	; 2
     582:	91 e3       	ldi	r25, 0x31	; 49
     584:	91 83       	std	Z+1, r25	; 0x01
     586:	80 e3       	ldi	r24, 0x30	; 48
     588:	82 83       	std	Z+2, r24	; 0x02
     58a:	83 83       	std	Z+3, r24	; 0x03
     58c:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <lcdIn2+0x3>
     590:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <lcdIn3+0x3>
     594:	26 e0       	ldi	r18, 0x06	; 6
     596:	40 e8       	ldi	r20, 0x80	; 128
     598:	55 e2       	ldi	r21, 0x25	; 37
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	8c e6       	ldi	r24, 0x6C	; 108
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <_ZN14HardwareSerial5beginEmh>

000005a6 <_Z9charToNumc>:
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	90 ed       	ldi	r25, 0xD0	; 208
     5ac:	98 0f       	add	r25, r24
     5ae:	9a 30       	cpi	r25, 0x0A	; 10
     5b0:	a0 f0       	brcs	.+40     	; 0x5da <_Z9charToNumc+0x34>
     5b2:	8e 32       	cpi	r24, 0x2E	; 46
     5b4:	b1 f0       	breq	.+44     	; 0x5e2 <_Z9charToNumc+0x3c>
     5b6:	80 32       	cpi	r24, 0x20	; 32
     5b8:	b9 f0       	breq	.+46     	; 0x5e8 <_Z9charToNumc+0x42>
     5ba:	8d 32       	cpi	r24, 0x2D	; 45
     5bc:	c1 f0       	breq	.+48     	; 0x5ee <_Z9charToNumc+0x48>
     5be:	68 2f       	mov	r22, r24
     5c0:	8c e6       	ldi	r24, 0x6C	; 108
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN5Print5printEc>
     5c8:	64 e2       	ldi	r22, 0x24	; 36
     5ca:	71 e0       	ldi	r23, 0x01	; 1
     5cc:	8c e6       	ldi	r24, 0x6C	; 108
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN5Print7printlnEPKc>
     5d4:	cf ef       	ldi	r28, 0xFF	; 255
     5d6:	df ef       	ldi	r29, 0xFF	; 255
     5d8:	0c c0       	rjmp	.+24     	; 0x5f2 <_Z9charToNumc+0x4c>
     5da:	c8 2f       	mov	r28, r24
     5dc:	d0 e0       	ldi	r29, 0x00	; 0
     5de:	e0 97       	sbiw	r28, 0x30	; 48
     5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <_Z9charToNumc+0x4c>
     5e2:	ca e0       	ldi	r28, 0x0A	; 10
     5e4:	d0 e0       	ldi	r29, 0x00	; 0
     5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <_Z9charToNumc+0x4c>
     5e8:	cb e0       	ldi	r28, 0x0B	; 11
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <_Z9charToNumc+0x4c>
     5ee:	c4 e1       	ldi	r28, 0x14	; 20
     5f0:	d0 e0       	ldi	r29, 0x00	; 0
     5f2:	61 e4       	ldi	r22, 0x41	; 65
     5f4:	71 e0       	ldi	r23, 0x01	; 1
     5f6:	8c e6       	ldi	r24, 0x6C	; 108
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     5fe:	4a e0       	ldi	r20, 0x0A	; 10
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	be 01       	movw	r22, r28
     604:	8c e6       	ldi	r24, 0x6C	; 108
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 57 11 	call	0x22ae	; 0x22ae <_ZN5Print7printlnEii>
     60c:	ce 01       	movw	r24, r28
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <_Z11charToShortPcs>:
     614:	2f 92       	push	r2
     616:	3f 92       	push	r3
     618:	4f 92       	push	r4
     61a:	5f 92       	push	r5
     61c:	6f 92       	push	r6
     61e:	7f 92       	push	r7
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	6b 01       	movw	r12, r22
     63a:	3c 01       	movw	r6, r24
     63c:	e1 2c       	mov	r14, r1
     63e:	f1 2c       	mov	r15, r1
     640:	c0 e0       	ldi	r28, 0x00	; 0
     642:	d0 e0       	ldi	r29, 0x00	; 0
     644:	31 2c       	mov	r3, r1
     646:	b1 2c       	mov	r11, r1
     648:	21 2c       	mov	r2, r1
     64a:	2b 01       	movw	r4, r22
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	48 1a       	sub	r4, r24
     650:	51 08       	sbc	r5, r1
     652:	ec 14       	cp	r14, r12
     654:	fd 04       	cpc	r15, r13
     656:	0c f0       	brlt	.+2      	; 0x65a <_Z11charToShortPcs+0x46>
     658:	6d c0       	rjmp	.+218    	; 0x734 <_Z11charToShortPcs+0x120>
     65a:	f3 01       	movw	r30, r6
     65c:	81 91       	ld	r24, Z+
     65e:	3f 01       	movw	r6, r30
     660:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_Z9charToNumc>
     664:	8c 01       	movw	r16, r24
     666:	8f 3f       	cpi	r24, 0xFF	; 255
     668:	ff ef       	ldi	r31, 0xFF	; 255
     66a:	9f 07       	cpc	r25, r31
     66c:	19 f0       	breq	.+6      	; 0x674 <_Z11charToShortPcs+0x60>
     66e:	8a 30       	cpi	r24, 0x0A	; 10
     670:	91 05       	cpc	r25, r1
     672:	f1 f4       	brne	.+60     	; 0x6b0 <_Z11charToShortPcs+0x9c>
     674:	67 e4       	ldi	r22, 0x47	; 71
     676:	71 e0       	ldi	r23, 0x01	; 1
     678:	8c e6       	ldi	r24, 0x6C	; 108
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     680:	4a e0       	ldi	r20, 0x0A	; 10
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	b8 01       	movw	r22, r16
     686:	8c e6       	ldi	r24, 0x6C	; 108
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	0e 94 57 11 	call	0x22ae	; 0x22ae <_ZN5Print7printlnEii>
     68e:	61 e5       	ldi	r22, 0x51	; 81
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	8c e6       	ldi	r24, 0x6C	; 108
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     69a:	6b 2d       	mov	r22, r11
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	4a e0       	ldi	r20, 0x0A	; 10
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	8c e6       	ldi	r24, 0x6C	; 108
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	0e 94 57 11 	call	0x22ae	; 0x22ae <_ZN5Print7printlnEii>
     6aa:	33 24       	eor	r3, r3
     6ac:	33 94       	inc	r3
     6ae:	3e c0       	rjmp	.+124    	; 0x72c <_Z11charToShortPcs+0x118>
     6b0:	8b 30       	cpi	r24, 0x0B	; 11
     6b2:	91 05       	cpc	r25, r1
     6b4:	d9 f1       	breq	.+118    	; 0x72c <_Z11charToShortPcs+0x118>
     6b6:	44 97       	sbiw	r24, 0x14	; 20
     6b8:	b9 f1       	breq	.+110    	; 0x728 <_Z11charToShortPcs+0x114>
     6ba:	b2 01       	movw	r22, r4
     6bc:	6e 19       	sub	r22, r14
     6be:	7f 09       	sbc	r23, r15
     6c0:	07 2e       	mov	r0, r23
     6c2:	00 0c       	add	r0, r0
     6c4:	88 0b       	sbc	r24, r24
     6c6:	99 0b       	sbc	r25, r25
     6c8:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	80 e2       	ldi	r24, 0x20	; 32
     6d6:	91 e4       	ldi	r25, 0x41	; 65
     6d8:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <pow>
     6dc:	4b 01       	movw	r8, r22
     6de:	5c 01       	movw	r10, r24
     6e0:	b8 01       	movw	r22, r16
     6e2:	11 0f       	add	r17, r17
     6e4:	88 0b       	sbc	r24, r24
     6e6:	99 0b       	sbc	r25, r25
     6e8:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
     6ec:	a5 01       	movw	r20, r10
     6ee:	94 01       	movw	r18, r8
     6f0:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
     6f4:	4b 01       	movw	r8, r22
     6f6:	5c 01       	movw	r10, r24
     6f8:	be 01       	movw	r22, r28
     6fa:	dd 0f       	add	r29, r29
     6fc:	88 0b       	sbc	r24, r24
     6fe:	99 0b       	sbc	r25, r25
     700:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
     704:	9b 01       	movw	r18, r22
     706:	ac 01       	movw	r20, r24
     708:	c5 01       	movw	r24, r10
     70a:	b4 01       	movw	r22, r8
     70c:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
     710:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixsfsi>
     714:	eb 01       	movw	r28, r22
     716:	6a e5       	ldi	r22, 0x5A	; 90
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	8c e6       	ldi	r24, 0x6C	; 108
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN5Print7printlnEPKc>
     722:	bb 24       	eor	r11, r11
     724:	b3 94       	inc	r11
     726:	02 c0       	rjmp	.+4      	; 0x72c <_Z11charToShortPcs+0x118>
     728:	22 24       	eor	r2, r2
     72a:	23 94       	inc	r2
     72c:	8f ef       	ldi	r24, 0xFF	; 255
     72e:	e8 1a       	sub	r14, r24
     730:	f8 0a       	sbc	r15, r24
     732:	8f cf       	rjmp	.-226    	; 0x652 <_Z11charToShortPcs+0x3e>
     734:	31 10       	cpse	r3, r1
     736:	09 c0       	rjmp	.+18     	; 0x74a <_Z11charToShortPcs+0x136>
     738:	bb 20       	and	r11, r11
     73a:	39 f0       	breq	.+14     	; 0x74a <_Z11charToShortPcs+0x136>
     73c:	22 20       	and	r2, r2
     73e:	41 f0       	breq	.+16     	; 0x750 <_Z11charToShortPcs+0x13c>
     740:	88 27       	eor	r24, r24
     742:	99 27       	eor	r25, r25
     744:	8c 1b       	sub	r24, r28
     746:	9d 0b       	sbc	r25, r29
     748:	04 c0       	rjmp	.+8      	; 0x752 <_Z11charToShortPcs+0x13e>
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	9f ef       	ldi	r25, 0xFF	; 255
     74e:	01 c0       	rjmp	.+2      	; 0x752 <_Z11charToShortPcs+0x13e>
     750:	ce 01       	movw	r24, r28
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	bf 90       	pop	r11
     764:	af 90       	pop	r10
     766:	9f 90       	pop	r9
     768:	8f 90       	pop	r8
     76a:	7f 90       	pop	r7
     76c:	6f 90       	pop	r6
     76e:	5f 90       	pop	r5
     770:	4f 90       	pop	r4
     772:	3f 90       	pop	r3
     774:	2f 90       	pop	r2
     776:	08 95       	ret

00000778 <_Z11charToFloatPcs>:
     778:	2f 92       	push	r2
     77a:	3f 92       	push	r3
     77c:	4f 92       	push	r4
     77e:	5f 92       	push	r5
     780:	6f 92       	push	r6
     782:	7f 92       	push	r7
     784:	8f 92       	push	r8
     786:	9f 92       	push	r9
     788:	af 92       	push	r10
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	27 97       	sbiw	r28, 0x07	; 7
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	5b 01       	movw	r10, r22
     7ae:	4c 01       	movw	r8, r24
     7b0:	c1 2c       	mov	r12, r1
     7b2:	d1 2c       	mov	r13, r1
     7b4:	00 e0       	ldi	r16, 0x00	; 0
     7b6:	10 e0       	ldi	r17, 0x00	; 0
     7b8:	1f 82       	std	Y+7, r1	; 0x07
     7ba:	1b 82       	std	Y+3, r1	; 0x03
     7bc:	21 2c       	mov	r2, r1
     7be:	31 2c       	mov	r3, r1
     7c0:	19 82       	std	Y+1, r1	; 0x01
     7c2:	1a 82       	std	Y+2, r1	; 0x02
     7c4:	71 2c       	mov	r7, r1
     7c6:	ca 14       	cp	r12, r10
     7c8:	db 04       	cpc	r13, r11
     7ca:	0c f0       	brlt	.+2      	; 0x7ce <_Z11charToFloatPcs+0x56>
     7cc:	8e c0       	rjmp	.+284    	; 0x8ea <_Z11charToFloatPcs+0x172>
     7ce:	f4 01       	movw	r30, r8
     7d0:	81 91       	ld	r24, Z+
     7d2:	4f 01       	movw	r8, r30
     7d4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_Z9charToNumc>
     7d8:	7c 01       	movw	r14, r24
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	41 f0       	breq	.+16     	; 0x7ee <_Z11charToFloatPcs+0x76>
     7de:	8a e0       	ldi	r24, 0x0A	; 10
     7e0:	e8 16       	cp	r14, r24
     7e2:	f1 04       	cpc	r15, r1
     7e4:	11 f5       	brne	.+68     	; 0x82a <_Z11charToFloatPcs+0xb2>
     7e6:	e9 81       	ldd	r30, Y+1	; 0x01
     7e8:	ee 23       	and	r30, r30
     7ea:	09 f4       	brne	.+2      	; 0x7ee <_Z11charToFloatPcs+0x76>
     7ec:	77 c0       	rjmp	.+238    	; 0x8dc <_Z11charToFloatPcs+0x164>
     7ee:	67 e4       	ldi	r22, 0x47	; 71
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	8c e6       	ldi	r24, 0x6C	; 108
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     7fa:	4a e0       	ldi	r20, 0x0A	; 10
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	b7 01       	movw	r22, r14
     800:	8c e6       	ldi	r24, 0x6C	; 108
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 57 11 	call	0x22ae	; 0x22ae <_ZN5Print7printlnEii>
     808:	61 e5       	ldi	r22, 0x51	; 81
     80a:	71 e0       	ldi	r23, 0x01	; 1
     80c:	8c e6       	ldi	r24, 0x6C	; 108
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     814:	67 2d       	mov	r22, r7
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	4a e0       	ldi	r20, 0x0A	; 10
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	8c e6       	ldi	r24, 0x6C	; 108
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	0e 94 57 11 	call	0x22ae	; 0x22ae <_ZN5Print7printlnEii>
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	fa 83       	std	Y+2, r31	; 0x02
     828:	5c c0       	rjmp	.+184    	; 0x8e2 <_Z11charToFloatPcs+0x16a>
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	88 23       	and	r24, r24
     82e:	f1 f0       	breq	.+60     	; 0x86c <_Z11charToFloatPcs+0xf4>
     830:	b1 01       	movw	r22, r2
     832:	6c 19       	sub	r22, r12
     834:	7d 09       	sbc	r23, r13
     836:	07 2e       	mov	r0, r23
     838:	00 0c       	add	r0, r0
     83a:	88 0b       	sbc	r24, r24
     83c:	99 0b       	sbc	r25, r25
     83e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e2       	ldi	r24, 0x20	; 32
     84c:	91 e4       	ldi	r25, 0x41	; 65
     84e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <pow>
     852:	2b 01       	movw	r4, r22
     854:	3c 01       	movw	r6, r24
     856:	b7 01       	movw	r22, r14
     858:	ff 0c       	add	r15, r15
     85a:	88 0b       	sbc	r24, r24
     85c:	99 0b       	sbc	r25, r25
     85e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
     862:	a3 01       	movw	r20, r6
     864:	92 01       	movw	r18, r4
     866:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
     86a:	25 c0       	rjmp	.+74     	; 0x8b6 <_Z11charToFloatPcs+0x13e>
     86c:	eb e0       	ldi	r30, 0x0B	; 11
     86e:	ee 16       	cp	r14, r30
     870:	f1 04       	cpc	r15, r1
     872:	b9 f1       	breq	.+110    	; 0x8e2 <_Z11charToFloatPcs+0x16a>
     874:	27 01       	movw	r4, r14
     876:	ff 0c       	add	r15, r15
     878:	66 08       	sbc	r6, r6
     87a:	77 08       	sbc	r7, r7
     87c:	c1 14       	cp	r12, r1
     87e:	d1 04       	cpc	r13, r1
     880:	b1 f0       	breq	.+44     	; 0x8ae <_Z11charToFloatPcs+0x136>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e2       	ldi	r20, 0x20	; 32
     888:	51 e4       	ldi	r21, 0x41	; 65
     88a:	b8 01       	movw	r22, r16
     88c:	8f 81       	ldd	r24, Y+7	; 0x07
     88e:	9b 81       	ldd	r25, Y+3	; 0x03
     890:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
     894:	6b 83       	std	Y+3, r22	; 0x03
     896:	7c 83       	std	Y+4, r23	; 0x04
     898:	8d 83       	std	Y+5, r24	; 0x05
     89a:	9e 83       	std	Y+6, r25	; 0x06
     89c:	c3 01       	movw	r24, r6
     89e:	b2 01       	movw	r22, r4
     8a0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
     8a4:	2b 81       	ldd	r18, Y+3	; 0x03
     8a6:	3c 81       	ldd	r19, Y+4	; 0x04
     8a8:	4d 81       	ldd	r20, Y+5	; 0x05
     8aa:	5e 81       	ldd	r21, Y+6	; 0x06
     8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <_Z11charToFloatPcs+0x148>
     8ae:	c3 01       	movw	r24, r6
     8b0:	b2 01       	movw	r22, r4
     8b2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	b8 01       	movw	r22, r16
     8bc:	8f 81       	ldd	r24, Y+7	; 0x07
     8be:	9b 81       	ldd	r25, Y+3	; 0x03
     8c0:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
     8c4:	8b 01       	movw	r16, r22
     8c6:	8f 83       	std	Y+7, r24	; 0x07
     8c8:	9b 83       	std	Y+3, r25	; 0x03
     8ca:	6a e5       	ldi	r22, 0x5A	; 90
     8cc:	71 e0       	ldi	r23, 0x01	; 1
     8ce:	8c e6       	ldi	r24, 0x6C	; 108
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN5Print7printlnEPKc>
     8d6:	77 24       	eor	r7, r7
     8d8:	73 94       	inc	r7
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <_Z11charToFloatPcs+0x16a>
     8dc:	16 01       	movw	r2, r12
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	f9 83       	std	Y+1, r31	; 0x01
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	c8 1a       	sub	r12, r24
     8e6:	d8 0a       	sbc	r13, r24
     8e8:	6e cf       	rjmp	.-292    	; 0x7c6 <_Z11charToFloatPcs+0x4e>
     8ea:	ea 81       	ldd	r30, Y+2	; 0x02
     8ec:	e1 11       	cpse	r30, r1
     8ee:	09 c0       	rjmp	.+18     	; 0x902 <__stack+0x3>
     8f0:	71 10       	cpse	r7, r1
     8f2:	0d c0       	rjmp	.+26     	; 0x90e <__stack+0xf>
     8f4:	00 e0       	ldi	r16, 0x00	; 0
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	e0 e8       	ldi	r30, 0x80	; 128
     8fa:	ef 83       	std	Y+7, r30	; 0x07
     8fc:	ff eb       	ldi	r31, 0xBF	; 191
     8fe:	fb 83       	std	Y+3, r31	; 0x03
     900:	06 c0       	rjmp	.+12     	; 0x90e <__stack+0xf>
     902:	00 e0       	ldi	r16, 0x00	; 0
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	f0 e8       	ldi	r31, 0x80	; 128
     908:	ff 83       	std	Y+7, r31	; 0x07
     90a:	8f eb       	ldi	r24, 0xBF	; 191
     90c:	8b 83       	std	Y+3, r24	; 0x03
     90e:	b8 01       	movw	r22, r16
     910:	8f 81       	ldd	r24, Y+7	; 0x07
     912:	9b 81       	ldd	r25, Y+3	; 0x03
     914:	27 96       	adiw	r28, 0x07	; 7
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	9f 90       	pop	r9
     936:	8f 90       	pop	r8
     938:	7f 90       	pop	r7
     93a:	6f 90       	pop	r6
     93c:	5f 90       	pop	r5
     93e:	4f 90       	pop	r4
     940:	3f 90       	pop	r3
     942:	2f 90       	pop	r2
     944:	08 95       	ret

00000946 <_Z15checkParametersv>:
     946:	4f 92       	push	r4
     948:	5f 92       	push	r5
     94a:	6f 92       	push	r6
     94c:	7f 92       	push	r7
     94e:	8f 92       	push	r8
     950:	9f 92       	push	r9
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	68 e6       	ldi	r22, 0x68	; 104
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	8c e6       	ldi	r24, 0x6C	; 108
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN5Print7printlnEPKc>
     970:	64 e0       	ldi	r22, 0x04	; 4
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	88 e4       	ldi	r24, 0x48	; 72
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	0e 94 bc 03 	call	0x778	; 0x778 <_Z11charToFloatPcs>
     97c:	4b 01       	movw	r8, r22
     97e:	5c 01       	movw	r10, r24
     980:	64 e0       	ldi	r22, 0x04	; 4
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	84 e4       	ldi	r24, 0x44	; 68
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 0a 03 	call	0x614	; 0x614 <_Z11charToShortPcs>
     98c:	6c 01       	movw	r12, r24
     98e:	bc 01       	movw	r22, r24
     990:	99 0f       	add	r25, r25
     992:	88 0b       	sbc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
     99a:	2b 01       	movw	r4, r22
     99c:	3c 01       	movw	r6, r24
     99e:	64 e0       	ldi	r22, 0x04	; 4
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 0a 03 	call	0x614	; 0x614 <_Z11charToShortPcs>
     9aa:	7c 01       	movw	r14, r24
     9ac:	64 e0       	ldi	r22, 0x04	; 4
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	8c e3       	ldi	r24, 0x3C	; 60
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 0a 03 	call	0x614	; 0x614 <_Z11charToShortPcs>
     9b8:	8c 01       	movw	r16, r24
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e8       	ldi	r20, 0x80	; 128
     9c0:	5f eb       	ldi	r21, 0xBF	; 191
     9c2:	c5 01       	movw	r24, r10
     9c4:	b4 01       	movw	r22, r8
     9c6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__cmpsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	51 f0       	breq	.+20     	; 0x9e2 <_Z15checkParametersv+0x9c>
     9ce:	80 92 65 02 	sts	0x0265, r8	; 0x800265 <distTarget>
     9d2:	90 92 66 02 	sts	0x0266, r9	; 0x800266 <distTarget+0x1>
     9d6:	a0 92 67 02 	sts	0x0267, r10	; 0x800267 <distTarget+0x2>
     9da:	b0 92 68 02 	sts	0x0268, r11	; 0x800268 <distTarget+0x3>
     9de:	c1 e0       	ldi	r28, 0x01	; 1
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <_Z15checkParametersv+0x9e>
     9e2:	c0 e0       	ldi	r28, 0x00	; 0
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	40 e8       	ldi	r20, 0x80	; 128
     9ea:	5f eb       	ldi	r21, 0xBF	; 191
     9ec:	c3 01       	movw	r24, r6
     9ee:	b2 01       	movw	r22, r4
     9f0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__cmpsf2>
     9f4:	88 23       	and	r24, r24
     9f6:	29 f0       	breq	.+10     	; 0xa02 <_Z15checkParametersv+0xbc>
     9f8:	d0 92 64 02 	sts	0x0264, r13	; 0x800264 <dropletSize+0x1>
     9fc:	c0 92 63 02 	sts	0x0263, r12	; 0x800263 <dropletSize>
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <_Z15checkParametersv+0xbe>
     a02:	c0 e0       	ldi	r28, 0x00	; 0
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	e8 16       	cp	r14, r24
     a08:	f8 06       	cpc	r15, r24
     a0a:	29 f0       	breq	.+10     	; 0xa16 <_Z15checkParametersv+0xd0>
     a0c:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <numDrops+0x1>
     a10:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <numDrops>
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <_Z15checkParametersv+0xd2>
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	0f 3f       	cpi	r16, 0xFF	; 255
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	18 07       	cpc	r17, r24
     a1e:	29 f0       	breq	.+10     	; 0xa2a <_Z15checkParametersv+0xe4>
     a20:	10 93 62 02 	sts	0x0262, r17	; 0x800262 <timeBetween+0x1>
     a24:	00 93 61 02 	sts	0x0261, r16	; 0x800261 <timeBetween>
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <_Z15checkParametersv+0xe6>
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	8c 2f       	mov	r24, r28
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	af 90       	pop	r10
     a40:	9f 90       	pop	r9
     a42:	8f 90       	pop	r8
     a44:	7f 90       	pop	r7
     a46:	6f 90       	pop	r6
     a48:	5f 90       	pop	r5
     a4a:	4f 90       	pop	r4
     a4c:	08 95       	ret

00000a4e <_Z10printErrorv>:
     a4e:	64 e7       	ldi	r22, 0x74	; 116
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	8c e6       	ldi	r24, 0x6C	; 108
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN5Print7printlnEPKc>
     a5a:	80 e2       	ldi	r24, 0x20	; 32
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN13LiquidCrystal5clearEv>
     a62:	80 e2       	ldi	r24, 0x20	; 32
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <_ZN13LiquidCrystal8noCursorEv>
     a6a:	80 e2       	ldi	r24, 0x20	; 32
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal4homeEv>
     a72:	60 e8       	ldi	r22, 0x80	; 128
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	80 e2       	ldi	r24, 0x20	; 32
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     a7e:	60 e9       	ldi	r22, 0x90	; 144
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	8c e6       	ldi	r24, 0x6C	; 108
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN5Print7printlnEPKc>
     a8a:	68 eb       	ldi	r22, 0xB8	; 184
     a8c:	7b e0       	ldi	r23, 0x0B	; 11
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <delay>
     a96:	6c e9       	ldi	r22, 0x9C	; 156
     a98:	71 e0       	ldi	r23, 0x01	; 1
     a9a:	8c e6       	ldi	r24, 0x6C	; 108
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	0c 94 8e 10 	jmp	0x211c	; 0x211c <_ZN5Print7printlnEPKc>

00000aa2 <_Z6insertPcssc>:
     aa2:	fc 01       	movw	r30, r24
     aa4:	30 81       	ld	r19, Z
     aa6:	30 32       	cpi	r19, 0x20	; 32
     aa8:	a1 f4       	brne	.+40     	; 0xad2 <_Z6insertPcssc+0x30>
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	db 01       	movw	r26, r22
     ab0:	11 97       	sbiw	r26, 0x01	; 1
     ab2:	46 17       	cp	r20, r22
     ab4:	57 07       	cpc	r21, r23
     ab6:	0c f5       	brge	.+66     	; 0xafa <_Z6insertPcssc+0x58>
     ab8:	fc 01       	movw	r30, r24
     aba:	e4 0f       	add	r30, r20
     abc:	f5 1f       	adc	r31, r21
     abe:	4a 17       	cp	r20, r26
     ac0:	5b 07       	cpc	r21, r27
     ac2:	19 f0       	breq	.+6      	; 0xaca <_Z6insertPcssc+0x28>
     ac4:	31 81       	ldd	r19, Z+1	; 0x01
     ac6:	30 83       	st	Z, r19
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <_Z6insertPcssc+0x2a>
     aca:	20 83       	st	Z, r18
     acc:	4f 5f       	subi	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	f0 cf       	rjmp	.-32     	; 0xab2 <_Z6insertPcssc+0x10>
     ad2:	80 e2       	ldi	r24, 0x20	; 32
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN13LiquidCrystal5clearEv>
     ada:	80 e2       	ldi	r24, 0x20	; 32
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal4homeEv>
     ae2:	66 ea       	ldi	r22, 0xA6	; 166
     ae4:	71 e0       	ldi	r23, 0x01	; 1
     ae6:	80 e2       	ldi	r24, 0x20	; 32
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
     aee:	60 ed       	ldi	r22, 0xD0	; 208
     af0:	77 e0       	ldi	r23, 0x07	; 7
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <delay>
     afa:	08 95       	ret

00000afc <_Z11getLCDInputv>:
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	0e 94 09 01 	call	0x212	; 0x212 <_Z10readRemotev>
     b04:	ec 01       	movw	r28, r24
     b06:	bc 01       	movw	r22, r24
     b08:	6e 54       	subi	r22, 0x4E	; 78
     b0a:	7e 4f       	sbci	r23, 0xFE	; 254
     b0c:	8c e6       	ldi	r24, 0x6C	; 108
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN5Print7printlnEPKc>
     b14:	c5 31       	cpi	r28, 0x15	; 21
     b16:	d1 05       	cpc	r29, r1
     b18:	08 f0       	brcs	.+2      	; 0xb1c <_Z11getLCDInputv+0x20>
     b1a:	d4 c2       	rjmp	.+1448   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     b1c:	fe 01       	movw	r30, r28
     b1e:	ec 5c       	subi	r30, 0xCC	; 204
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <__tablejump2__>
     b26:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     b2a:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     b2e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     b32:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     b36:	21 30       	cpi	r18, 0x01	; 1
     b38:	31 05       	cpc	r19, r1
     b3a:	a9 f4       	brne	.+42     	; 0xb66 <_Z11getLCDInputv+0x6a>
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	59 f0       	breq	.+22     	; 0xb56 <_Z11getLCDInputv+0x5a>
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	09 f0       	breq	.+2      	; 0xb46 <_Z11getLCDInputv+0x4a>
     b44:	bf c2       	rjmp	.+1406   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     b46:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     b4a:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     b4e:	4c 50       	subi	r20, 0x0C	; 12
     b50:	51 09       	sbc	r21, r1
     b52:	20 e3       	ldi	r18, 0x30	; 48
     b54:	e5 c1       	rjmp	.+970    	; 0xf20 <_Z11getLCDInputv+0x424>
     b56:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     b5a:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     b5e:	4c 50       	subi	r20, 0x0C	; 12
     b60:	51 09       	sbc	r21, r1
     b62:	20 e3       	ldi	r18, 0x30	; 48
     b64:	64 c2       	rjmp	.+1224   	; 0x102e <_Z11getLCDInputv+0x532>
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	59 f0       	breq	.+22     	; 0xb80 <_Z11getLCDInputv+0x84>
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	09 f0       	breq	.+2      	; 0xb70 <_Z11getLCDInputv+0x74>
     b6e:	aa c2       	rjmp	.+1364   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     b70:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     b74:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     b78:	4c 50       	subi	r20, 0x0C	; 12
     b7a:	51 09       	sbc	r21, r1
     b7c:	20 e3       	ldi	r18, 0x30	; 48
     b7e:	9a c2       	rjmp	.+1332   	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     b80:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     b84:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     b88:	4c 50       	subi	r20, 0x0C	; 12
     b8a:	51 09       	sbc	r21, r1
     b8c:	20 e3       	ldi	r18, 0x30	; 48
     b8e:	e1 c1       	rjmp	.+962    	; 0xf52 <_Z11getLCDInputv+0x456>
     b90:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     b94:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     b98:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     b9c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     ba0:	21 30       	cpi	r18, 0x01	; 1
     ba2:	31 05       	cpc	r19, r1
     ba4:	a9 f4       	brne	.+42     	; 0xbd0 <_Z11getLCDInputv+0xd4>
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	59 f0       	breq	.+22     	; 0xbc0 <_Z11getLCDInputv+0xc4>
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	09 f0       	breq	.+2      	; 0xbb0 <_Z11getLCDInputv+0xb4>
     bae:	8a c2       	rjmp	.+1300   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     bb0:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     bb4:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     bb8:	4c 50       	subi	r20, 0x0C	; 12
     bba:	51 09       	sbc	r21, r1
     bbc:	21 e3       	ldi	r18, 0x31	; 49
     bbe:	b0 c1       	rjmp	.+864    	; 0xf20 <_Z11getLCDInputv+0x424>
     bc0:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     bc4:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     bc8:	4c 50       	subi	r20, 0x0C	; 12
     bca:	51 09       	sbc	r21, r1
     bcc:	21 e3       	ldi	r18, 0x31	; 49
     bce:	2f c2       	rjmp	.+1118   	; 0x102e <_Z11getLCDInputv+0x532>
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	59 f0       	breq	.+22     	; 0xbea <_Z11getLCDInputv+0xee>
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	09 f0       	breq	.+2      	; 0xbda <_Z11getLCDInputv+0xde>
     bd8:	75 c2       	rjmp	.+1258   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     bda:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     bde:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     be2:	4c 50       	subi	r20, 0x0C	; 12
     be4:	51 09       	sbc	r21, r1
     be6:	21 e3       	ldi	r18, 0x31	; 49
     be8:	65 c2       	rjmp	.+1226   	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     bea:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     bee:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     bf2:	4c 50       	subi	r20, 0x0C	; 12
     bf4:	51 09       	sbc	r21, r1
     bf6:	21 e3       	ldi	r18, 0x31	; 49
     bf8:	ac c1       	rjmp	.+856    	; 0xf52 <_Z11getLCDInputv+0x456>
     bfa:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     bfe:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     c02:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     c06:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     c0a:	21 30       	cpi	r18, 0x01	; 1
     c0c:	31 05       	cpc	r19, r1
     c0e:	a9 f4       	brne	.+42     	; 0xc3a <_Z11getLCDInputv+0x13e>
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	59 f0       	breq	.+22     	; 0xc2a <_Z11getLCDInputv+0x12e>
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	09 f0       	breq	.+2      	; 0xc1a <_Z11getLCDInputv+0x11e>
     c18:	55 c2       	rjmp	.+1194   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     c1a:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     c1e:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     c22:	4c 50       	subi	r20, 0x0C	; 12
     c24:	51 09       	sbc	r21, r1
     c26:	22 e3       	ldi	r18, 0x32	; 50
     c28:	7b c1       	rjmp	.+758    	; 0xf20 <_Z11getLCDInputv+0x424>
     c2a:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     c2e:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     c32:	4c 50       	subi	r20, 0x0C	; 12
     c34:	51 09       	sbc	r21, r1
     c36:	22 e3       	ldi	r18, 0x32	; 50
     c38:	fa c1       	rjmp	.+1012   	; 0x102e <_Z11getLCDInputv+0x532>
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	59 f0       	breq	.+22     	; 0xc54 <_Z11getLCDInputv+0x158>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	09 f0       	breq	.+2      	; 0xc44 <_Z11getLCDInputv+0x148>
     c42:	40 c2       	rjmp	.+1152   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     c44:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     c48:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     c4c:	4c 50       	subi	r20, 0x0C	; 12
     c4e:	51 09       	sbc	r21, r1
     c50:	22 e3       	ldi	r18, 0x32	; 50
     c52:	30 c2       	rjmp	.+1120   	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     c54:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     c58:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     c5c:	4c 50       	subi	r20, 0x0C	; 12
     c5e:	51 09       	sbc	r21, r1
     c60:	22 e3       	ldi	r18, 0x32	; 50
     c62:	77 c1       	rjmp	.+750    	; 0xf52 <_Z11getLCDInputv+0x456>
     c64:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     c68:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     c6c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     c70:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     c74:	21 30       	cpi	r18, 0x01	; 1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f4       	brne	.+42     	; 0xca4 <_Z11getLCDInputv+0x1a8>
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	59 f0       	breq	.+22     	; 0xc94 <_Z11getLCDInputv+0x198>
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	09 f0       	breq	.+2      	; 0xc84 <_Z11getLCDInputv+0x188>
     c82:	20 c2       	rjmp	.+1088   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     c84:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     c88:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     c8c:	4c 50       	subi	r20, 0x0C	; 12
     c8e:	51 09       	sbc	r21, r1
     c90:	23 e3       	ldi	r18, 0x33	; 51
     c92:	46 c1       	rjmp	.+652    	; 0xf20 <_Z11getLCDInputv+0x424>
     c94:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     c98:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     c9c:	4c 50       	subi	r20, 0x0C	; 12
     c9e:	51 09       	sbc	r21, r1
     ca0:	23 e3       	ldi	r18, 0x33	; 51
     ca2:	c5 c1       	rjmp	.+906    	; 0x102e <_Z11getLCDInputv+0x532>
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	59 f0       	breq	.+22     	; 0xcbe <_Z11getLCDInputv+0x1c2>
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	09 f0       	breq	.+2      	; 0xcae <_Z11getLCDInputv+0x1b2>
     cac:	0b c2       	rjmp	.+1046   	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     cae:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     cb2:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     cb6:	4c 50       	subi	r20, 0x0C	; 12
     cb8:	51 09       	sbc	r21, r1
     cba:	23 e3       	ldi	r18, 0x33	; 51
     cbc:	fb c1       	rjmp	.+1014   	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     cbe:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     cc2:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     cc6:	4c 50       	subi	r20, 0x0C	; 12
     cc8:	51 09       	sbc	r21, r1
     cca:	23 e3       	ldi	r18, 0x33	; 51
     ccc:	42 c1       	rjmp	.+644    	; 0xf52 <_Z11getLCDInputv+0x456>
     cce:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     cd2:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     cd6:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     cda:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     cde:	21 30       	cpi	r18, 0x01	; 1
     ce0:	31 05       	cpc	r19, r1
     ce2:	a9 f4       	brne	.+42     	; 0xd0e <_Z11getLCDInputv+0x212>
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	59 f0       	breq	.+22     	; 0xcfe <_Z11getLCDInputv+0x202>
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	09 f0       	breq	.+2      	; 0xcee <_Z11getLCDInputv+0x1f2>
     cec:	eb c1       	rjmp	.+982    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     cee:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     cf2:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     cf6:	4c 50       	subi	r20, 0x0C	; 12
     cf8:	51 09       	sbc	r21, r1
     cfa:	24 e3       	ldi	r18, 0x34	; 52
     cfc:	11 c1       	rjmp	.+546    	; 0xf20 <_Z11getLCDInputv+0x424>
     cfe:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     d02:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     d06:	4c 50       	subi	r20, 0x0C	; 12
     d08:	51 09       	sbc	r21, r1
     d0a:	24 e3       	ldi	r18, 0x34	; 52
     d0c:	90 c1       	rjmp	.+800    	; 0x102e <_Z11getLCDInputv+0x532>
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	59 f0       	breq	.+22     	; 0xd28 <_Z11getLCDInputv+0x22c>
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	09 f0       	breq	.+2      	; 0xd18 <_Z11getLCDInputv+0x21c>
     d16:	d6 c1       	rjmp	.+940    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     d18:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     d1c:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     d20:	4c 50       	subi	r20, 0x0C	; 12
     d22:	51 09       	sbc	r21, r1
     d24:	24 e3       	ldi	r18, 0x34	; 52
     d26:	c6 c1       	rjmp	.+908    	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     d28:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     d2c:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     d30:	4c 50       	subi	r20, 0x0C	; 12
     d32:	51 09       	sbc	r21, r1
     d34:	24 e3       	ldi	r18, 0x34	; 52
     d36:	0d c1       	rjmp	.+538    	; 0xf52 <_Z11getLCDInputv+0x456>
     d38:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     d3c:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     d40:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     d44:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     d48:	21 30       	cpi	r18, 0x01	; 1
     d4a:	31 05       	cpc	r19, r1
     d4c:	a9 f4       	brne	.+42     	; 0xd78 <_Z11getLCDInputv+0x27c>
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	59 f0       	breq	.+22     	; 0xd68 <_Z11getLCDInputv+0x26c>
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	09 f0       	breq	.+2      	; 0xd58 <_Z11getLCDInputv+0x25c>
     d56:	b6 c1       	rjmp	.+876    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     d58:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     d5c:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     d60:	4c 50       	subi	r20, 0x0C	; 12
     d62:	51 09       	sbc	r21, r1
     d64:	25 e3       	ldi	r18, 0x35	; 53
     d66:	dc c0       	rjmp	.+440    	; 0xf20 <_Z11getLCDInputv+0x424>
     d68:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     d6c:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     d70:	4c 50       	subi	r20, 0x0C	; 12
     d72:	51 09       	sbc	r21, r1
     d74:	25 e3       	ldi	r18, 0x35	; 53
     d76:	5b c1       	rjmp	.+694    	; 0x102e <_Z11getLCDInputv+0x532>
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	59 f0       	breq	.+22     	; 0xd92 <_Z11getLCDInputv+0x296>
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	09 f0       	breq	.+2      	; 0xd82 <_Z11getLCDInputv+0x286>
     d80:	a1 c1       	rjmp	.+834    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     d82:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     d86:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     d8a:	4c 50       	subi	r20, 0x0C	; 12
     d8c:	51 09       	sbc	r21, r1
     d8e:	25 e3       	ldi	r18, 0x35	; 53
     d90:	91 c1       	rjmp	.+802    	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     d92:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     d96:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     d9a:	4c 50       	subi	r20, 0x0C	; 12
     d9c:	51 09       	sbc	r21, r1
     d9e:	25 e3       	ldi	r18, 0x35	; 53
     da0:	d8 c0       	rjmp	.+432    	; 0xf52 <_Z11getLCDInputv+0x456>
     da2:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     da6:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     daa:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     dae:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     db2:	21 30       	cpi	r18, 0x01	; 1
     db4:	31 05       	cpc	r19, r1
     db6:	a9 f4       	brne	.+42     	; 0xde2 <_Z11getLCDInputv+0x2e6>
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	59 f0       	breq	.+22     	; 0xdd2 <_Z11getLCDInputv+0x2d6>
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <_Z11getLCDInputv+0x2c6>
     dc0:	81 c1       	rjmp	.+770    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     dc2:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     dc6:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     dca:	4c 50       	subi	r20, 0x0C	; 12
     dcc:	51 09       	sbc	r21, r1
     dce:	26 e3       	ldi	r18, 0x36	; 54
     dd0:	a7 c0       	rjmp	.+334    	; 0xf20 <_Z11getLCDInputv+0x424>
     dd2:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     dd6:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     dda:	4c 50       	subi	r20, 0x0C	; 12
     ddc:	51 09       	sbc	r21, r1
     dde:	26 e3       	ldi	r18, 0x36	; 54
     de0:	26 c1       	rjmp	.+588    	; 0x102e <_Z11getLCDInputv+0x532>
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	59 f0       	breq	.+22     	; 0xdfc <_Z11getLCDInputv+0x300>
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	09 f0       	breq	.+2      	; 0xdec <_Z11getLCDInputv+0x2f0>
     dea:	6c c1       	rjmp	.+728    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     dec:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     df0:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     df4:	4c 50       	subi	r20, 0x0C	; 12
     df6:	51 09       	sbc	r21, r1
     df8:	26 e3       	ldi	r18, 0x36	; 54
     dfa:	5c c1       	rjmp	.+696    	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     dfc:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     e00:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     e04:	4c 50       	subi	r20, 0x0C	; 12
     e06:	51 09       	sbc	r21, r1
     e08:	26 e3       	ldi	r18, 0x36	; 54
     e0a:	a3 c0       	rjmp	.+326    	; 0xf52 <_Z11getLCDInputv+0x456>
     e0c:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     e10:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     e14:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     e18:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     e1c:	21 30       	cpi	r18, 0x01	; 1
     e1e:	31 05       	cpc	r19, r1
     e20:	a9 f4       	brne	.+42     	; 0xe4c <_Z11getLCDInputv+0x350>
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	59 f0       	breq	.+22     	; 0xe3c <_Z11getLCDInputv+0x340>
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	09 f0       	breq	.+2      	; 0xe2c <_Z11getLCDInputv+0x330>
     e2a:	4c c1       	rjmp	.+664    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     e2c:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     e30:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     e34:	4c 50       	subi	r20, 0x0C	; 12
     e36:	51 09       	sbc	r21, r1
     e38:	27 e3       	ldi	r18, 0x37	; 55
     e3a:	72 c0       	rjmp	.+228    	; 0xf20 <_Z11getLCDInputv+0x424>
     e3c:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     e40:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     e44:	4c 50       	subi	r20, 0x0C	; 12
     e46:	51 09       	sbc	r21, r1
     e48:	27 e3       	ldi	r18, 0x37	; 55
     e4a:	f1 c0       	rjmp	.+482    	; 0x102e <_Z11getLCDInputv+0x532>
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	59 f0       	breq	.+22     	; 0xe66 <_Z11getLCDInputv+0x36a>
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	09 f0       	breq	.+2      	; 0xe56 <_Z11getLCDInputv+0x35a>
     e54:	37 c1       	rjmp	.+622    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     e56:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     e5a:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     e5e:	4c 50       	subi	r20, 0x0C	; 12
     e60:	51 09       	sbc	r21, r1
     e62:	27 e3       	ldi	r18, 0x37	; 55
     e64:	27 c1       	rjmp	.+590    	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     e66:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     e6a:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     e6e:	4c 50       	subi	r20, 0x0C	; 12
     e70:	51 09       	sbc	r21, r1
     e72:	27 e3       	ldi	r18, 0x37	; 55
     e74:	6e c0       	rjmp	.+220    	; 0xf52 <_Z11getLCDInputv+0x456>
     e76:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     e7a:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     e7e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     e82:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     e86:	21 30       	cpi	r18, 0x01	; 1
     e88:	31 05       	cpc	r19, r1
     e8a:	a9 f4       	brne	.+42     	; 0xeb6 <_Z11getLCDInputv+0x3ba>
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	59 f0       	breq	.+22     	; 0xea6 <_Z11getLCDInputv+0x3aa>
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <_Z11getLCDInputv+0x39a>
     e94:	17 c1       	rjmp	.+558    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     e96:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     e9a:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     e9e:	4c 50       	subi	r20, 0x0C	; 12
     ea0:	51 09       	sbc	r21, r1
     ea2:	28 e3       	ldi	r18, 0x38	; 56
     ea4:	3d c0       	rjmp	.+122    	; 0xf20 <_Z11getLCDInputv+0x424>
     ea6:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     eaa:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     eae:	4c 50       	subi	r20, 0x0C	; 12
     eb0:	51 09       	sbc	r21, r1
     eb2:	28 e3       	ldi	r18, 0x38	; 56
     eb4:	bc c0       	rjmp	.+376    	; 0x102e <_Z11getLCDInputv+0x532>
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	59 f0       	breq	.+22     	; 0xed0 <_Z11getLCDInputv+0x3d4>
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	09 f0       	breq	.+2      	; 0xec0 <_Z11getLCDInputv+0x3c4>
     ebe:	02 c1       	rjmp	.+516    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     ec0:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     ec4:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     ec8:	4c 50       	subi	r20, 0x0C	; 12
     eca:	51 09       	sbc	r21, r1
     ecc:	28 e3       	ldi	r18, 0x38	; 56
     ece:	f2 c0       	rjmp	.+484    	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     ed0:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     ed4:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     ed8:	4c 50       	subi	r20, 0x0C	; 12
     eda:	51 09       	sbc	r21, r1
     edc:	28 e3       	ldi	r18, 0x38	; 56
     ede:	39 c0       	rjmp	.+114    	; 0xf52 <_Z11getLCDInputv+0x456>
     ee0:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     ee4:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     ee8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     eec:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     ef0:	21 30       	cpi	r18, 0x01	; 1
     ef2:	31 05       	cpc	r19, r1
     ef4:	d1 f4       	brne	.+52     	; 0xf2a <_Z11getLCDInputv+0x42e>
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	59 f0       	breq	.+22     	; 0xf10 <_Z11getLCDInputv+0x414>
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	09 f0       	breq	.+2      	; 0xf00 <_Z11getLCDInputv+0x404>
     efe:	e2 c0       	rjmp	.+452    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     f00:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     f04:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     f08:	4c 50       	subi	r20, 0x0C	; 12
     f0a:	51 09       	sbc	r21, r1
     f0c:	29 e3       	ldi	r18, 0x39	; 57
     f0e:	08 c0       	rjmp	.+16     	; 0xf20 <_Z11getLCDInputv+0x424>
     f10:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     f14:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     f18:	4c 50       	subi	r20, 0x0C	; 12
     f1a:	51 09       	sbc	r21, r1
     f1c:	29 e3       	ldi	r18, 0x39	; 57
     f1e:	87 c0       	rjmp	.+270    	; 0x102e <_Z11getLCDInputv+0x532>
     f20:	64 e0       	ldi	r22, 0x04	; 4
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	84 e4       	ldi	r24, 0x44	; 68
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	c9 c0       	rjmp	.+402    	; 0x10bc <_Z11getLCDInputv+0x5c0>
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	59 f0       	breq	.+22     	; 0xf44 <_Z11getLCDInputv+0x448>
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <_Z11getLCDInputv+0x438>
     f32:	c8 c0       	rjmp	.+400    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     f34:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     f38:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     f3c:	4c 50       	subi	r20, 0x0C	; 12
     f3e:	51 09       	sbc	r21, r1
     f40:	29 e3       	ldi	r18, 0x39	; 57
     f42:	b8 c0       	rjmp	.+368    	; 0x10b4 <_Z11getLCDInputv+0x5b8>
     f44:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
     f48:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
     f4c:	4c 50       	subi	r20, 0x0C	; 12
     f4e:	51 09       	sbc	r21, r1
     f50:	29 e3       	ldi	r18, 0x39	; 57
     f52:	64 e0       	ldi	r22, 0x04	; 4
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	80 e4       	ldi	r24, 0x40	; 64
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	b0 c0       	rjmp	.+352    	; 0x10bc <_Z11getLCDInputv+0x5c0>
     f5c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <menu>
     f60:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <menu+0x1>
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <_Z11getLCDInputv+0x476>
     f68:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <menu>
     f6c:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <menu+0x1>
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <menu+0x1>
     f76:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <menu>
     f7a:	a4 c0       	rjmp	.+328    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     f7c:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <menu>
     f80:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <menu+0x1>
     f84:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
     f88:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
     f8c:	21 30       	cpi	r18, 0x01	; 1
     f8e:	31 05       	cpc	r19, r1
     f90:	d9 f4       	brne	.+54     	; 0xfc8 <_Z11getLCDInputv+0x4cc>
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	71 f0       	breq	.+28     	; 0xfb2 <_Z11getLCDInputv+0x4b6>
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	09 f0       	breq	.+2      	; 0xf9c <_Z11getLCDInputv+0x4a0>
     f9a:	94 c0       	rjmp	.+296    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     f9c:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <col>
     fa0:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <col+0x1>
     fa4:	6c 50       	subi	r22, 0x0C	; 12
     fa6:	71 09       	sbc	r23, r1
     fa8:	44 e0       	ldi	r20, 0x04	; 4
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	84 e4       	ldi	r24, 0x44	; 68
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	25 c0       	rjmp	.+74     	; 0xffc <_Z11getLCDInputv+0x500>
     fb2:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <col>
     fb6:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <col+0x1>
     fba:	6c 50       	subi	r22, 0x0C	; 12
     fbc:	71 09       	sbc	r23, r1
     fbe:	44 e0       	ldi	r20, 0x04	; 4
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	88 e4       	ldi	r24, 0x48	; 72
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	1a c0       	rjmp	.+52     	; 0xffc <_Z11getLCDInputv+0x500>
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	71 f0       	breq	.+28     	; 0xfe8 <_Z11getLCDInputv+0x4ec>
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	09 f0       	breq	.+2      	; 0xfd2 <_Z11getLCDInputv+0x4d6>
     fd0:	79 c0       	rjmp	.+242    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
     fd2:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <col>
     fd6:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <col+0x1>
     fda:	6c 50       	subi	r22, 0x0C	; 12
     fdc:	71 09       	sbc	r23, r1
     fde:	44 e0       	ldi	r20, 0x04	; 4
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	8c e3       	ldi	r24, 0x3C	; 60
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	0a c0       	rjmp	.+20     	; 0xffc <_Z11getLCDInputv+0x500>
     fe8:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <col>
     fec:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <col+0x1>
     ff0:	6c 50       	subi	r22, 0x0C	; 12
     ff2:	71 09       	sbc	r23, r1
     ff4:	44 e0       	ldi	r20, 0x04	; 4
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	80 e4       	ldi	r24, 0x40	; 64
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	0c 94 12 02 	jmp	0x424	; 0x424 <_Z9clearCharPcss>
    1004:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <menu>
    1008:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <menu+0x1>
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	09 f0       	breq	.+2      	; 0x1012 <_Z11getLCDInputv+0x516>
    1010:	59 c0       	rjmp	.+178    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
    1012:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
    1016:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
    101a:	89 2b       	or	r24, r25
    101c:	09 f0       	breq	.+2      	; 0x1020 <_Z11getLCDInputv+0x524>
    101e:	52 c0       	rjmp	.+164    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
    1020:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
    1024:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
    1028:	4c 50       	subi	r20, 0x0C	; 12
    102a:	51 09       	sbc	r21, r1
    102c:	2e e2       	ldi	r18, 0x2E	; 46
    102e:	64 e0       	ldi	r22, 0x04	; 4
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	88 e4       	ldi	r24, 0x48	; 72
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	42 c0       	rjmp	.+132    	; 0x10bc <_Z11getLCDInputv+0x5c0>
    1038:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
    103c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
    1040:	89 2b       	or	r24, r25
    1042:	09 f0       	breq	.+2      	; 0x1046 <_Z11getLCDInputv+0x54a>
    1044:	3f c0       	rjmp	.+126    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <row+0x1>
    104e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <row>
    1052:	0a c0       	rjmp	.+20     	; 0x1068 <_Z11getLCDInputv+0x56c>
    1054:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
    1058:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	91 f5       	brne	.+100    	; 0x10c4 <_Z11getLCDInputv+0x5c8>
    1060:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <row+0x1>
    1064:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <row>
    1068:	8f e0       	ldi	r24, 0x0F	; 15
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <col+0x1>
    1070:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <col>
    1074:	27 c0       	rjmp	.+78     	; 0x10c4 <_Z11getLCDInputv+0x5c8>
    1076:	0e 94 a3 04 	call	0x946	; 0x946 <_Z15checkParametersv>
    107a:	88 23       	and	r24, r24
    107c:	21 f0       	breq	.+8      	; 0x1086 <_Z11getLCDInputv+0x58a>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <fire>
    1084:	1f c0       	rjmp	.+62     	; 0x10c4 <_Z11getLCDInputv+0x5c8>
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_Z10printErrorv>
    108e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <menu>
    1092:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <menu+0x1>
    1096:	02 97       	sbiw	r24, 0x02	; 2
    1098:	a9 f4       	brne	.+42     	; 0x10c4 <_Z11getLCDInputv+0x5c8>
    109a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <row>
    109e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <row+0x1>
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	79 f4       	brne	.+30     	; 0x10c4 <_Z11getLCDInputv+0x5c8>
    10a6:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <col>
    10aa:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <col+0x1>
    10ae:	4c 50       	subi	r20, 0x0C	; 12
    10b0:	51 09       	sbc	r21, r1
    10b2:	2d e2       	ldi	r18, 0x2D	; 45
    10b4:	64 e0       	ldi	r22, 0x04	; 4
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	8c e3       	ldi	r24, 0x3C	; 60
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <_Z6insertPcssc>
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <_Z9dropWaters>:

void dropWater(short dropletSize) // Drop the droplet based on time open in ms
{
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	8c 01       	movw	r16, r24
	if(!valveOpen) // If the solenoid isn't open
    10d0:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <valveOpen>
    10d4:	81 11       	cpse	r24, r1
    10d6:	19 c0       	rjmp	.+50     	; 0x110a <_Z9dropWaters+0x40>
	{
		PORTC |= 1; // Open solenoid
    10d8:	40 9a       	sbi	0x08, 0	; 8
		closeTime = millis() + dropletSize; // Calculate time to close
    10da:	0e 94 b3 11 	call	0x2366	; 0x2366 <millis>
    10de:	01 2e       	mov	r0, r17
    10e0:	00 0c       	add	r0, r0
    10e2:	22 0b       	sbc	r18, r18
    10e4:	33 0b       	sbc	r19, r19
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	80 0f       	add	r24, r16
    10ec:	91 1f       	adc	r25, r17
    10ee:	a2 1f       	adc	r26, r18
    10f0:	b3 1f       	adc	r27, r19
    10f2:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <closeTime>
    10f6:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <closeTime+0x1>
    10fa:	a0 93 5e 02 	sts	0x025E, r26	; 0x80025e <closeTime+0x2>
    10fe:	b0 93 5f 02 	sts	0x025F, r27	; 0x80025f <closeTime+0x3>
		valveOpen = true;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <valveOpen>
    1108:	13 c0       	rjmp	.+38     	; 0x1130 <_Z9dropWaters+0x66>
	}
	else if(millis() >= closeTime) // Valve is open and we need to close
    110a:	0e 94 b3 11 	call	0x2366	; 0x2366 <millis>
    110e:	00 91 5c 02 	lds	r16, 0x025C	; 0x80025c <closeTime>
    1112:	10 91 5d 02 	lds	r17, 0x025D	; 0x80025d <closeTime+0x1>
    1116:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <closeTime+0x2>
    111a:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <closeTime+0x3>
    111e:	60 17       	cp	r22, r16
    1120:	71 07       	cpc	r23, r17
    1122:	82 07       	cpc	r24, r18
    1124:	93 07       	cpc	r25, r19
    1126:	20 f0       	brcs	.+8      	; 0x1130 <_Z9dropWaters+0x66>
	{
		PORTC &= 0; // Close solenoid	
    1128:	88 b1       	in	r24, 0x08	; 8
    112a:	18 b8       	out	0x08, r1	; 8
		valveOpen = false;
    112c:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <valveOpen>
	}
}
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	08 95       	ret

00001136 <_Z9dropWatersss>:

void dropWater(short dropletSize, short numDrops, short timeBetween)
{
    1136:	8f 92       	push	r8
    1138:	9f 92       	push	r9
    113a:	af 92       	push	r10
    113c:	bf 92       	push	r11
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
    114c:	4b 01       	movw	r8, r22
    114e:	5a 01       	movw	r10, r20
	unsigned long impactTime = micros() + calcTTT(distTarget);
    1150:	0e 94 bf 11 	call	0x237e	; 0x237e <micros>
    1154:	6b 01       	movw	r12, r22
    1156:	7c 01       	movw	r14, r24
    1158:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <distTarget>
    115c:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <distTarget+0x1>
    1160:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <distTarget+0x2>
    1164:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <distTarget+0x3>
    1168:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z7calcTTTf>
    116c:	c6 0e       	add	r12, r22
    116e:	d7 1e       	adc	r13, r23
    1170:	e8 1e       	adc	r14, r24
    1172:	f9 1e       	adc	r15, r25
	
	if (numDrops == 1) // if we are only dropping 1 drop
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	88 16       	cp	r8, r24
    1178:	91 04       	cpc	r9, r1
    117a:	b1 f4       	brne	.+44     	; 0x11a8 <_Z9dropWatersss+0x72>
	{
		dropWater(dropletSize);
    117c:	ce 01       	movw	r24, r28
    117e:	0e 94 65 08 	call	0x10ca	; 0x10ca <_Z9dropWaters>
		while (micros() < impactTime)
    1182:	0e 94 bf 11 	call	0x237e	; 0x237e <micros>
    1186:	6c 15       	cp	r22, r12
    1188:	7d 05       	cpc	r23, r13
    118a:	8e 05       	cpc	r24, r14
    118c:	9f 05       	cpc	r25, r15
    118e:	c8 f3       	brcs	.-14     	; 0x1182 <_Z9dropWatersss+0x4c>
				dropWater(dropletSize); // Drop the drop
			}
		}
		
	}
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	9f 90       	pop	r9
    11a2:	8f 90       	pop	r8
		dropWater(dropletSize);
		while (micros() < impactTime)
		{
			// wait
		}	
		shoot(); // Fire the flash
    11a4:	0c 94 00 01 	jmp	0x200	; 0x200 <_Z5shootv>
	}
	else if (numDrops > 1) // if we are dropping multiple drops
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	88 16       	cp	r8, r24
    11ac:	91 04       	cpc	r9, r1
    11ae:	74 f1       	brlt	.+92     	; 0x120c <_Z9dropWatersss+0xd6>
	{
		short dropped = 0;
		bool takenPic = false; 
		unsigned long lastDrop = 0;
		unsigned long dropInterval = timeBetween * pow(10,-3); // Convert timeBetween to microseconds
    11b0:	b5 01       	movw	r22, r10
    11b2:	bb 0c       	add	r11, r11
    11b4:	88 0b       	sbc	r24, r24
    11b6:	99 0b       	sbc	r25, r25
    11b8:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
    11bc:	2f e6       	ldi	r18, 0x6F	; 111
    11be:	32 e1       	ldi	r19, 0x12	; 18
    11c0:	43 e8       	ldi	r20, 0x83	; 131
    11c2:	5a e3       	ldi	r21, 0x3A	; 58
    11c4:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    11c8:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fixunssfsi>
    11cc:	4b 01       	movw	r8, r22
    11ce:	5c 01       	movw	r10, r24
		dropWater(dropletSize); // drop first drop
    11d0:	ce 01       	movw	r24, r28
    11d2:	0e 94 65 08 	call	0x10ca	; 0x10ca <_Z9dropWaters>
		lastDrop = micros(); // record time of drop
    11d6:	0e 94 bf 11 	call	0x237e	; 0x237e <micros>
			if (!takenPic && micros() >= impactTime) // If we haven't taken the picture and we need to
			{
				shoot(); // Fire the flash
			}
			
			if(micros() >= (lastDrop + dropInterval)) // if we need to drop another drop
    11da:	86 0e       	add	r8, r22
    11dc:	97 1e       	adc	r9, r23
    11de:	a8 1e       	adc	r10, r24
    11e0:	b9 1e       	adc	r11, r25
		lastDrop = micros(); // record time of drop
		dropped++; // increment the drop counter
		
		while (dropped < numDrops) // while we haven't dropped all the drops
		{
			if (!takenPic && micros() >= impactTime) // If we haven't taken the picture and we need to
    11e2:	0e 94 bf 11 	call	0x237e	; 0x237e <micros>
    11e6:	6c 15       	cp	r22, r12
    11e8:	7d 05       	cpc	r23, r13
    11ea:	8e 05       	cpc	r24, r14
    11ec:	9f 05       	cpc	r25, r15
    11ee:	58 f4       	brcc	.+22     	; 0x1206 <_Z9dropWatersss+0xd0>
			{
				shoot(); // Fire the flash
			}
			
			if(micros() >= (lastDrop + dropInterval)) // if we need to drop another drop
    11f0:	0e 94 bf 11 	call	0x237e	; 0x237e <micros>
    11f4:	68 15       	cp	r22, r8
    11f6:	79 05       	cpc	r23, r9
    11f8:	8a 05       	cpc	r24, r10
    11fa:	9b 05       	cpc	r25, r11
    11fc:	90 f3       	brcs	.-28     	; 0x11e2 <_Z9dropWatersss+0xac>
			{
				dropWater(dropletSize); // Drop the drop
    11fe:	ce 01       	movw	r24, r28
    1200:	0e 94 65 08 	call	0x10ca	; 0x10ca <_Z9dropWaters>
    1204:	ee cf       	rjmp	.-36     	; 0x11e2 <_Z9dropWatersss+0xac>
		
		while (dropped < numDrops) // while we haven't dropped all the drops
		{
			if (!takenPic && micros() >= impactTime) // If we haven't taken the picture and we need to
			{
				shoot(); // Fire the flash
    1206:	0e 94 00 01 	call	0x200	; 0x200 <_Z5shootv>
    120a:	f2 cf       	rjmp	.-28     	; 0x11f0 <_Z9dropWatersss+0xba>
				dropWater(dropletSize); // Drop the drop
			}
		}
		
	}
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	9f 90       	pop	r9
    121e:	8f 90       	pop	r8
    1220:	08 95       	ret

00001222 <loop>:
	lcdIn3[3] = '0'; // Set initial time between drops to 0
	
	Serial.begin(9600); // Open serial monitor (For debugging)
}

void loop() {
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	2c 97       	sbiw	r28, 0x0c	; 12
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
	menu = 0;
    123a:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <menu+0x1>
    123e:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <menu>
	while(!fire)  // Enter options while not ready to fire
	{
	// reset input cursor pos
	row = 0;
	col = 15;
    1242:	0f e0       	ldi	r16, 0x0F	; 15
    1244:	10 e0       	ldi	r17, 0x00	; 0
	Serial.begin(9600); // Open serial monitor (For debugging)
}

void loop() {
	menu = 0;
	while(!fire)  // Enter options while not ready to fire
    1246:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <fire>
    124a:	81 11       	cpse	r24, r1
    124c:	de c0       	rjmp	.+444    	; 0x140a <loop+0x1e8>
	{
	// reset input cursor pos
	row = 0;
    124e:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <row+0x1>
    1252:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <row>
	col = 15;
    1256:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <col+0x1>
    125a:	00 93 38 02 	sts	0x0238, r16	; 0x800238 <col>
	
	/////////////////////////////////////
	// Menu 0
	///////////////////////////////////// 
	while (menu == 0 && !fire) // Second page of menu, set distTarget and distTrig1
    125e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <menu>
    1262:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <menu+0x1>
    1266:	89 2b       	or	r24, r25
    1268:	09 f0       	breq	.+2      	; 0x126c <loop+0x4a>
    126a:	60 c0       	rjmp	.+192    	; 0x132c <loop+0x10a>
    126c:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <fire>
    1270:	81 11       	cpse	r24, r1
    1272:	5c c0       	rjmp	.+184    	; 0x132c <loop+0x10a>
	{
		lcd.clear();
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN13LiquidCrystal5clearEv>
		lcd.cursor(); // Show cursor
    127c:	80 e2       	ldi	r24, 0x20	; 32
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	0e 94 82 21 	call	0x4304	; 0x4304 <_ZN13LiquidCrystal6cursorEv>
		lcd.home();
    1284:	80 e2       	ldi	r24, 0x20	; 32
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal4homeEv>
		String tmpStr = charToString(lcdIn0,SIZE);
    128c:	44 e0       	ldi	r20, 0x04	; 4
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	68 e4       	ldi	r22, 0x48	; 72
    1292:	72 e0       	ldi	r23, 0x02	; 2
    1294:	ce 01       	movw	r24, r28
    1296:	07 96       	adiw	r24, 0x07	; 7
    1298:	0e 94 25 02 	call	0x44a	; 0x44a <_Z12charToStringPcs>
		lcd.print("Dist Target:");
    129c:	69 eb       	ldi	r22, 0xB9	; 185
    129e:	71 e0       	ldi	r23, 0x01	; 1
    12a0:	80 e2       	ldi	r24, 0x20	; 32
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
		lcd.print(tmpStr);
    12a8:	be 01       	movw	r22, r28
    12aa:	69 5f       	subi	r22, 0xF9	; 249
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	80 e2       	ldi	r24, 0x20	; 32
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_ZN5Print5printERK6String>
		lcd.setCursor(0,1);
    12b6:	41 e0       	ldi	r20, 0x01	; 1
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	80 e2       	ldi	r24, 0x20	; 32
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	0e 94 9b 20 	call	0x4136	; 0x4136 <_ZN13LiquidCrystal9setCursorEhh>
		tmpStr = charToString(lcdIn1,SIZE);
    12c2:	44 e0       	ldi	r20, 0x04	; 4
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	64 e4       	ldi	r22, 0x44	; 68
    12c8:	72 e0       	ldi	r23, 0x02	; 2
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	0e 94 25 02 	call	0x44a	; 0x44a <_Z12charToStringPcs>
    12d2:	be 01       	movw	r22, r28
    12d4:	6f 5f       	subi	r22, 0xFF	; 255
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	ce 01       	movw	r24, r28
    12da:	07 96       	adiw	r24, 0x07	; 7
    12dc:	0e 94 04 14 	call	0x2808	; 0x2808 <_ZN6StringaSEOS_>
    12e0:	ce 01       	movw	r24, r28
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		lcd.print("Drop Size:");
    12e8:	66 ec       	ldi	r22, 0xC6	; 198
    12ea:	71 e0       	ldi	r23, 0x01	; 1
    12ec:	80 e2       	ldi	r24, 0x20	; 32
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
		lcd.print(tmpStr);
    12f4:	be 01       	movw	r22, r28
    12f6:	69 5f       	subi	r22, 0xF9	; 249
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_ZN5Print5printERK6String>
		lcd.setCursor(col,row); // Set cursor to user input
    1302:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <row>
    1306:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <col>
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	0e 94 9b 20 	call	0x4136	; 0x4136 <_ZN13LiquidCrystal9setCursorEhh>
		getLCDInput(); // Handles user input to LCD)
    1312:	0e 94 7e 05 	call	0xafc	; 0xafc <_Z11getLCDInputv>
		delay(500);
    1316:	64 ef       	ldi	r22, 0xF4	; 244
    1318:	71 e0       	ldi	r23, 0x01	; 1
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <delay>
	while (menu == 0 && !fire) // Second page of menu, set distTarget and distTrig1
	{
		lcd.clear();
		lcd.cursor(); // Show cursor
		lcd.home();
		String tmpStr = charToString(lcdIn0,SIZE);
    1322:	ce 01       	movw	r24, r28
    1324:	07 96       	adiw	r24, 0x07	; 7
    1326:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
	col = 15;
	
	/////////////////////////////////////
	// Menu 0
	///////////////////////////////////// 
	while (menu == 0 && !fire) // Second page of menu, set distTarget and distTrig1
    132a:	99 cf       	rjmp	.-206    	; 0x125e <loop+0x3c>
		lcd.setCursor(col,row); // Set cursor to user input
		getLCDInput(); // Handles user input to LCD)
		delay(500);
	}
	// reset input cursor pos
	row = 0;
    132c:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <row+0x1>
    1330:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <row>
	col = 15;
    1334:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <col+0x1>
    1338:	00 93 38 02 	sts	0x0238, r16	; 0x800238 <col>
	
	/////////////////////////////////////
	// Menu 1
	/////////////////////////////////////
	 
	while (menu == 1 && !fire) // Third page of menu, set trigger val
    133c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <menu>
    1340:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <menu+0x1>
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	09 f0       	breq	.+2      	; 0x134a <loop+0x128>
    1348:	7e cf       	rjmp	.-260    	; 0x1246 <loop+0x24>
    134a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <fire>
    134e:	81 11       	cpse	r24, r1
    1350:	7a cf       	rjmp	.-268    	; 0x1246 <loop+0x24>
	{
		lcd.clear();
    1352:	80 e2       	ldi	r24, 0x20	; 32
    1354:	92 e0       	ldi	r25, 0x02	; 2
    1356:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN13LiquidCrystal5clearEv>
		lcd.cursor(); // Show cursor
    135a:	80 e2       	ldi	r24, 0x20	; 32
    135c:	92 e0       	ldi	r25, 0x02	; 2
    135e:	0e 94 82 21 	call	0x4304	; 0x4304 <_ZN13LiquidCrystal6cursorEv>
		lcd.home();
    1362:	80 e2       	ldi	r24, 0x20	; 32
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal4homeEv>
		String tmpStr = charToString(lcdIn2,SIZE);
    136a:	44 e0       	ldi	r20, 0x04	; 4
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	60 e4       	ldi	r22, 0x40	; 64
    1370:	72 e0       	ldi	r23, 0x02	; 2
    1372:	ce 01       	movw	r24, r28
    1374:	07 96       	adiw	r24, 0x07	; 7
    1376:	0e 94 25 02 	call	0x44a	; 0x44a <_Z12charToStringPcs>
		lcd.print("Num Drops:");
    137a:	61 ed       	ldi	r22, 0xD1	; 209
    137c:	71 e0       	ldi	r23, 0x01	; 1
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
		lcd.print(tmpStr);
    1386:	be 01       	movw	r22, r28
    1388:	69 5f       	subi	r22, 0xF9	; 249
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_ZN5Print5printERK6String>
		lcd.setCursor(0,1);
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	80 e2       	ldi	r24, 0x20	; 32
    139a:	92 e0       	ldi	r25, 0x02	; 2
    139c:	0e 94 9b 20 	call	0x4136	; 0x4136 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("Time Diff:");
    13a0:	6c ed       	ldi	r22, 0xDC	; 220
    13a2:	71 e0       	ldi	r23, 0x01	; 1
    13a4:	80 e2       	ldi	r24, 0x20	; 32
    13a6:	92 e0       	ldi	r25, 0x02	; 2
    13a8:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
		tmpStr = charToString(lcdIn3,SIZE);
    13ac:	44 e0       	ldi	r20, 0x04	; 4
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	6c e3       	ldi	r22, 0x3C	; 60
    13b2:	72 e0       	ldi	r23, 0x02	; 2
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	0e 94 25 02 	call	0x44a	; 0x44a <_Z12charToStringPcs>
    13bc:	be 01       	movw	r22, r28
    13be:	6f 5f       	subi	r22, 0xFF	; 255
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	ce 01       	movw	r24, r28
    13c4:	07 96       	adiw	r24, 0x07	; 7
    13c6:	0e 94 04 14 	call	0x2808	; 0x2808 <_ZN6StringaSEOS_>
    13ca:	ce 01       	movw	r24, r28
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
		lcd.print(tmpStr);
    13d2:	be 01       	movw	r22, r28
    13d4:	69 5f       	subi	r22, 0xF9	; 249
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	80 e2       	ldi	r24, 0x20	; 32
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_ZN5Print5printERK6String>
		lcd.setCursor(col,row); // Set cursor to user input
    13e0:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <row>
    13e4:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <col>
    13e8:	80 e2       	ldi	r24, 0x20	; 32
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	0e 94 9b 20 	call	0x4136	; 0x4136 <_ZN13LiquidCrystal9setCursorEhh>
		getLCDInput(); // Handles user input to LCD)
    13f0:	0e 94 7e 05 	call	0xafc	; 0xafc <_Z11getLCDInputv>
		delay(500);
    13f4:	64 ef       	ldi	r22, 0xF4	; 244
    13f6:	71 e0       	ldi	r23, 0x01	; 1
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <delay>
	while (menu == 1 && !fire) // Third page of menu, set trigger val
	{
		lcd.clear();
		lcd.cursor(); // Show cursor
		lcd.home();
		String tmpStr = charToString(lcdIn2,SIZE);
    1400:	ce 01       	movw	r24, r28
    1402:	07 96       	adiw	r24, 0x07	; 7
    1404:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZN6StringD1Ev>
	
	/////////////////////////////////////
	// Menu 1
	/////////////////////////////////////
	 
	while (menu == 1 && !fire) // Third page of menu, set trigger val
    1408:	99 cf       	rjmp	.-206    	; 0x133c <loop+0x11a>
	}
 
	/////////////////////////////////////
	// Fire mode
	/////////////////////////////////////
	lcd.clear();
    140a:	80 e2       	ldi	r24, 0x20	; 32
    140c:	92 e0       	ldi	r25, 0x02	; 2
    140e:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN13LiquidCrystal5clearEv>
	lcd.home();
    1412:	80 e2       	ldi	r24, 0x20	; 32
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal4homeEv>
	lcd.print("Dropping...");
    141a:	67 ee       	ldi	r22, 0xE7	; 231
    141c:	71 e0       	ldi	r23, 0x01	; 1
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEPKc>
 
	dropWater(dropletSize,numDrops,timeBetween); // Drop the drops
    1426:	40 91 61 02 	lds	r20, 0x0261	; 0x800261 <timeBetween>
    142a:	50 91 62 02 	lds	r21, 0x0262	; 0x800262 <timeBetween+0x1>
    142e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <numDrops>
    1432:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <numDrops+0x1>
    1436:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <dropletSize>
    143a:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <dropletSize+0x1>
    143e:	0e 94 9b 08 	call	0x1136	; 0x1136 <_Z9dropWatersss>

}
    1442:	2c 96       	adiw	r28, 0x0c	; 12
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <_GLOBAL__sub_I_fire>:
				dropWater(dropletSize); // Drop the drop
			}
		}
		
	}
}
    1458:	cf 92       	push	r12
    145a:	ef 92       	push	r14
    145c:	0f 93       	push	r16

bool valveOpen = false;
unsigned long closeTime = 0;

// IR remote
IRrecv irrecv(REMOTE);
    145e:	68 e0       	ldi	r22, 0x08	; 8
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	8b e5       	ldi	r24, 0x5B	; 91
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN6IRrecvC1Ei>
char lcdIn3[SIZE]; // Time between drops (ms)

short row = 0; // used to select the row of LCD display
short col = 0; // used to select the column of LCD display

LiquidCrystal lcd(rs,en,d4,d5,d6,d7); // create LiquidCrystal variable using specified pins
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	c8 2e       	mov	r12, r24
    146e:	93 e0       	ldi	r25, 0x03	; 3
    1470:	e9 2e       	mov	r14, r25
    1472:	04 e0       	ldi	r16, 0x04	; 4
    1474:	25 e0       	ldi	r18, 0x05	; 5
    1476:	4b e0       	ldi	r20, 0x0B	; 11
    1478:	6c e0       	ldi	r22, 0x0C	; 12
    147a:	80 e2       	ldi	r24, 0x20	; 32
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN13LiquidCrystalC1Ehhhhhh>
				dropWater(dropletSize); // Drop the drop
			}
		}
		
	}
}
    1482:	0f 91       	pop	r16
    1484:	ef 90       	pop	r14
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <__subsf3>:
    148a:	50 58       	subi	r21, 0x80	; 128

0000148c <__addsf3>:
    148c:	bb 27       	eor	r27, r27
    148e:	aa 27       	eor	r26, r26
    1490:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__addsf3x>
    1494:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_round>
    1498:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscA>
    149c:	38 f0       	brcs	.+14     	; 0x14ac <__addsf3+0x20>
    149e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_pscB>
    14a2:	20 f0       	brcs	.+8      	; 0x14ac <__addsf3+0x20>
    14a4:	39 f4       	brne	.+14     	; 0x14b4 <__addsf3+0x28>
    14a6:	9f 3f       	cpi	r25, 0xFF	; 255
    14a8:	19 f4       	brne	.+6      	; 0x14b0 <__addsf3+0x24>
    14aa:	26 f4       	brtc	.+8      	; 0x14b4 <__addsf3+0x28>
    14ac:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__fp_nan>
    14b0:	0e f4       	brtc	.+2      	; 0x14b4 <__addsf3+0x28>
    14b2:	e0 95       	com	r30
    14b4:	e7 fb       	bst	r30, 7
    14b6:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_inf>

000014ba <__addsf3x>:
    14ba:	e9 2f       	mov	r30, r25
    14bc:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__fp_split3>
    14c0:	58 f3       	brcs	.-42     	; 0x1498 <__addsf3+0xc>
    14c2:	ba 17       	cp	r27, r26
    14c4:	62 07       	cpc	r22, r18
    14c6:	73 07       	cpc	r23, r19
    14c8:	84 07       	cpc	r24, r20
    14ca:	95 07       	cpc	r25, r21
    14cc:	20 f0       	brcs	.+8      	; 0x14d6 <__addsf3x+0x1c>
    14ce:	79 f4       	brne	.+30     	; 0x14ee <__addsf3x+0x34>
    14d0:	a6 f5       	brtc	.+104    	; 0x153a <__addsf3x+0x80>
    14d2:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_zero>
    14d6:	0e f4       	brtc	.+2      	; 0x14da <__addsf3x+0x20>
    14d8:	e0 95       	com	r30
    14da:	0b 2e       	mov	r0, r27
    14dc:	ba 2f       	mov	r27, r26
    14de:	a0 2d       	mov	r26, r0
    14e0:	0b 01       	movw	r0, r22
    14e2:	b9 01       	movw	r22, r18
    14e4:	90 01       	movw	r18, r0
    14e6:	0c 01       	movw	r0, r24
    14e8:	ca 01       	movw	r24, r20
    14ea:	a0 01       	movw	r20, r0
    14ec:	11 24       	eor	r1, r1
    14ee:	ff 27       	eor	r31, r31
    14f0:	59 1b       	sub	r21, r25
    14f2:	99 f0       	breq	.+38     	; 0x151a <__addsf3x+0x60>
    14f4:	59 3f       	cpi	r21, 0xF9	; 249
    14f6:	50 f4       	brcc	.+20     	; 0x150c <__addsf3x+0x52>
    14f8:	50 3e       	cpi	r21, 0xE0	; 224
    14fa:	68 f1       	brcs	.+90     	; 0x1556 <__addsf3x+0x9c>
    14fc:	1a 16       	cp	r1, r26
    14fe:	f0 40       	sbci	r31, 0x00	; 0
    1500:	a2 2f       	mov	r26, r18
    1502:	23 2f       	mov	r18, r19
    1504:	34 2f       	mov	r19, r20
    1506:	44 27       	eor	r20, r20
    1508:	58 5f       	subi	r21, 0xF8	; 248
    150a:	f3 cf       	rjmp	.-26     	; 0x14f2 <__addsf3x+0x38>
    150c:	46 95       	lsr	r20
    150e:	37 95       	ror	r19
    1510:	27 95       	ror	r18
    1512:	a7 95       	ror	r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	53 95       	inc	r21
    1518:	c9 f7       	brne	.-14     	; 0x150c <__addsf3x+0x52>
    151a:	7e f4       	brtc	.+30     	; 0x153a <__addsf3x+0x80>
    151c:	1f 16       	cp	r1, r31
    151e:	ba 0b       	sbc	r27, r26
    1520:	62 0b       	sbc	r22, r18
    1522:	73 0b       	sbc	r23, r19
    1524:	84 0b       	sbc	r24, r20
    1526:	ba f0       	brmi	.+46     	; 0x1556 <__addsf3x+0x9c>
    1528:	91 50       	subi	r25, 0x01	; 1
    152a:	a1 f0       	breq	.+40     	; 0x1554 <__addsf3x+0x9a>
    152c:	ff 0f       	add	r31, r31
    152e:	bb 1f       	adc	r27, r27
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	c2 f7       	brpl	.-16     	; 0x1528 <__addsf3x+0x6e>
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <__addsf3x+0x9c>
    153a:	ba 0f       	add	r27, r26
    153c:	62 1f       	adc	r22, r18
    153e:	73 1f       	adc	r23, r19
    1540:	84 1f       	adc	r24, r20
    1542:	48 f4       	brcc	.+18     	; 0x1556 <__addsf3x+0x9c>
    1544:	87 95       	ror	r24
    1546:	77 95       	ror	r23
    1548:	67 95       	ror	r22
    154a:	b7 95       	ror	r27
    154c:	f7 95       	ror	r31
    154e:	9e 3f       	cpi	r25, 0xFE	; 254
    1550:	08 f0       	brcs	.+2      	; 0x1554 <__addsf3x+0x9a>
    1552:	b0 cf       	rjmp	.-160    	; 0x14b4 <__addsf3+0x28>
    1554:	93 95       	inc	r25
    1556:	88 0f       	add	r24, r24
    1558:	08 f0       	brcs	.+2      	; 0x155c <__addsf3x+0xa2>
    155a:	99 27       	eor	r25, r25
    155c:	ee 0f       	add	r30, r30
    155e:	97 95       	ror	r25
    1560:	87 95       	ror	r24
    1562:	08 95       	ret

00001564 <__cmpsf2>:
    1564:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__fp_cmp>
    1568:	08 f4       	brcc	.+2      	; 0x156c <__cmpsf2+0x8>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	08 95       	ret

0000156e <__divsf3>:
    156e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3x>
    1572:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_round>
    1576:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_pscB>
    157a:	58 f0       	brcs	.+22     	; 0x1592 <__divsf3+0x24>
    157c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscA>
    1580:	40 f0       	brcs	.+16     	; 0x1592 <__divsf3+0x24>
    1582:	29 f4       	brne	.+10     	; 0x158e <__divsf3+0x20>
    1584:	5f 3f       	cpi	r21, 0xFF	; 255
    1586:	29 f0       	breq	.+10     	; 0x1592 <__divsf3+0x24>
    1588:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_inf>
    158c:	51 11       	cpse	r21, r1
    158e:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_szero>
    1592:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__fp_nan>

00001596 <__divsf3x>:
    1596:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__fp_split3>
    159a:	68 f3       	brcs	.-38     	; 0x1576 <__divsf3+0x8>

0000159c <__divsf3_pse>:
    159c:	99 23       	and	r25, r25
    159e:	b1 f3       	breq	.-20     	; 0x158c <__divsf3+0x1e>
    15a0:	55 23       	and	r21, r21
    15a2:	91 f3       	breq	.-28     	; 0x1588 <__divsf3+0x1a>
    15a4:	95 1b       	sub	r25, r21
    15a6:	55 0b       	sbc	r21, r21
    15a8:	bb 27       	eor	r27, r27
    15aa:	aa 27       	eor	r26, r26
    15ac:	62 17       	cp	r22, r18
    15ae:	73 07       	cpc	r23, r19
    15b0:	84 07       	cpc	r24, r20
    15b2:	38 f0       	brcs	.+14     	; 0x15c2 <__divsf3_pse+0x26>
    15b4:	9f 5f       	subi	r25, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	22 0f       	add	r18, r18
    15ba:	33 1f       	adc	r19, r19
    15bc:	44 1f       	adc	r20, r20
    15be:	aa 1f       	adc	r26, r26
    15c0:	a9 f3       	breq	.-22     	; 0x15ac <__divsf3_pse+0x10>
    15c2:	35 d0       	rcall	.+106    	; 0x162e <__divsf3_pse+0x92>
    15c4:	0e 2e       	mov	r0, r30
    15c6:	3a f0       	brmi	.+14     	; 0x15d6 <__divsf3_pse+0x3a>
    15c8:	e0 e8       	ldi	r30, 0x80	; 128
    15ca:	32 d0       	rcall	.+100    	; 0x1630 <__divsf3_pse+0x94>
    15cc:	91 50       	subi	r25, 0x01	; 1
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	e6 95       	lsr	r30
    15d2:	00 1c       	adc	r0, r0
    15d4:	ca f7       	brpl	.-14     	; 0x15c8 <__divsf3_pse+0x2c>
    15d6:	2b d0       	rcall	.+86     	; 0x162e <__divsf3_pse+0x92>
    15d8:	fe 2f       	mov	r31, r30
    15da:	29 d0       	rcall	.+82     	; 0x162e <__divsf3_pse+0x92>
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	bb 1f       	adc	r27, r27
    15e4:	26 17       	cp	r18, r22
    15e6:	37 07       	cpc	r19, r23
    15e8:	48 07       	cpc	r20, r24
    15ea:	ab 07       	cpc	r26, r27
    15ec:	b0 e8       	ldi	r27, 0x80	; 128
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <__divsf3_pse+0x56>
    15f0:	bb 0b       	sbc	r27, r27
    15f2:	80 2d       	mov	r24, r0
    15f4:	bf 01       	movw	r22, r30
    15f6:	ff 27       	eor	r31, r31
    15f8:	93 58       	subi	r25, 0x83	; 131
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	3a f0       	brmi	.+14     	; 0x160c <__divsf3_pse+0x70>
    15fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1600:	51 05       	cpc	r21, r1
    1602:	78 f0       	brcs	.+30     	; 0x1622 <__divsf3_pse+0x86>
    1604:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_inf>
    1608:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_szero>
    160c:	5f 3f       	cpi	r21, 0xFF	; 255
    160e:	e4 f3       	brlt	.-8      	; 0x1608 <__divsf3_pse+0x6c>
    1610:	98 3e       	cpi	r25, 0xE8	; 232
    1612:	d4 f3       	brlt	.-12     	; 0x1608 <__divsf3_pse+0x6c>
    1614:	86 95       	lsr	r24
    1616:	77 95       	ror	r23
    1618:	67 95       	ror	r22
    161a:	b7 95       	ror	r27
    161c:	f7 95       	ror	r31
    161e:	9f 5f       	subi	r25, 0xFF	; 255
    1620:	c9 f7       	brne	.-14     	; 0x1614 <__divsf3_pse+0x78>
    1622:	88 0f       	add	r24, r24
    1624:	91 1d       	adc	r25, r1
    1626:	96 95       	lsr	r25
    1628:	87 95       	ror	r24
    162a:	97 f9       	bld	r25, 7
    162c:	08 95       	ret
    162e:	e1 e0       	ldi	r30, 0x01	; 1
    1630:	66 0f       	add	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	bb 1f       	adc	r27, r27
    1638:	62 17       	cp	r22, r18
    163a:	73 07       	cpc	r23, r19
    163c:	84 07       	cpc	r24, r20
    163e:	ba 07       	cpc	r27, r26
    1640:	20 f0       	brcs	.+8      	; 0x164a <__divsf3_pse+0xae>
    1642:	62 1b       	sub	r22, r18
    1644:	73 0b       	sbc	r23, r19
    1646:	84 0b       	sbc	r24, r20
    1648:	ba 0b       	sbc	r27, r26
    164a:	ee 1f       	adc	r30, r30
    164c:	88 f7       	brcc	.-30     	; 0x1630 <__divsf3_pse+0x94>
    164e:	e0 95       	com	r30
    1650:	08 95       	ret

00001652 <__fixsfsi>:
    1652:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fixunssfsi>
    1656:	68 94       	set
    1658:	b1 11       	cpse	r27, r1
    165a:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_szero>
    165e:	08 95       	ret

00001660 <__fixunssfsi>:
    1660:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_splitA>
    1664:	88 f0       	brcs	.+34     	; 0x1688 <__fixunssfsi+0x28>
    1666:	9f 57       	subi	r25, 0x7F	; 127
    1668:	98 f0       	brcs	.+38     	; 0x1690 <__fixunssfsi+0x30>
    166a:	b9 2f       	mov	r27, r25
    166c:	99 27       	eor	r25, r25
    166e:	b7 51       	subi	r27, 0x17	; 23
    1670:	b0 f0       	brcs	.+44     	; 0x169e <__fixunssfsi+0x3e>
    1672:	e1 f0       	breq	.+56     	; 0x16ac <__fixunssfsi+0x4c>
    1674:	66 0f       	add	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	88 1f       	adc	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	1a f0       	brmi	.+6      	; 0x1684 <__fixunssfsi+0x24>
    167e:	ba 95       	dec	r27
    1680:	c9 f7       	brne	.-14     	; 0x1674 <__fixunssfsi+0x14>
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <__fixunssfsi+0x4c>
    1684:	b1 30       	cpi	r27, 0x01	; 1
    1686:	91 f0       	breq	.+36     	; 0x16ac <__fixunssfsi+0x4c>
    1688:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_zero>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	08 95       	ret
    1690:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_zero>
    1694:	67 2f       	mov	r22, r23
    1696:	78 2f       	mov	r23, r24
    1698:	88 27       	eor	r24, r24
    169a:	b8 5f       	subi	r27, 0xF8	; 248
    169c:	39 f0       	breq	.+14     	; 0x16ac <__fixunssfsi+0x4c>
    169e:	b9 3f       	cpi	r27, 0xF9	; 249
    16a0:	cc f3       	brlt	.-14     	; 0x1694 <__fixunssfsi+0x34>
    16a2:	86 95       	lsr	r24
    16a4:	77 95       	ror	r23
    16a6:	67 95       	ror	r22
    16a8:	b3 95       	inc	r27
    16aa:	d9 f7       	brne	.-10     	; 0x16a2 <__fixunssfsi+0x42>
    16ac:	3e f4       	brtc	.+14     	; 0x16bc <__fixunssfsi+0x5c>
    16ae:	90 95       	com	r25
    16b0:	80 95       	com	r24
    16b2:	70 95       	com	r23
    16b4:	61 95       	neg	r22
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	08 95       	ret

000016be <__floatunsisf>:
    16be:	e8 94       	clt
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <__floatsisf+0x12>

000016c2 <__floatsisf>:
    16c2:	97 fb       	bst	r25, 7
    16c4:	3e f4       	brtc	.+14     	; 0x16d4 <__floatsisf+0x12>
    16c6:	90 95       	com	r25
    16c8:	80 95       	com	r24
    16ca:	70 95       	com	r23
    16cc:	61 95       	neg	r22
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	8f 4f       	sbci	r24, 0xFF	; 255
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	99 23       	and	r25, r25
    16d6:	a9 f0       	breq	.+42     	; 0x1702 <__floatsisf+0x40>
    16d8:	f9 2f       	mov	r31, r25
    16da:	96 e9       	ldi	r25, 0x96	; 150
    16dc:	bb 27       	eor	r27, r27
    16de:	93 95       	inc	r25
    16e0:	f6 95       	lsr	r31
    16e2:	87 95       	ror	r24
    16e4:	77 95       	ror	r23
    16e6:	67 95       	ror	r22
    16e8:	b7 95       	ror	r27
    16ea:	f1 11       	cpse	r31, r1
    16ec:	f8 cf       	rjmp	.-16     	; 0x16de <__floatsisf+0x1c>
    16ee:	fa f4       	brpl	.+62     	; 0x172e <__floatsisf+0x6c>
    16f0:	bb 0f       	add	r27, r27
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <__floatsisf+0x36>
    16f4:	60 ff       	sbrs	r22, 0
    16f6:	1b c0       	rjmp	.+54     	; 0x172e <__floatsisf+0x6c>
    16f8:	6f 5f       	subi	r22, 0xFF	; 255
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	16 c0       	rjmp	.+44     	; 0x172e <__floatsisf+0x6c>
    1702:	88 23       	and	r24, r24
    1704:	11 f0       	breq	.+4      	; 0x170a <__floatsisf+0x48>
    1706:	96 e9       	ldi	r25, 0x96	; 150
    1708:	11 c0       	rjmp	.+34     	; 0x172c <__floatsisf+0x6a>
    170a:	77 23       	and	r23, r23
    170c:	21 f0       	breq	.+8      	; 0x1716 <__floatsisf+0x54>
    170e:	9e e8       	ldi	r25, 0x8E	; 142
    1710:	87 2f       	mov	r24, r23
    1712:	76 2f       	mov	r23, r22
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <__floatsisf+0x5e>
    1716:	66 23       	and	r22, r22
    1718:	71 f0       	breq	.+28     	; 0x1736 <__floatsisf+0x74>
    171a:	96 e8       	ldi	r25, 0x86	; 134
    171c:	86 2f       	mov	r24, r22
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	2a f0       	brmi	.+10     	; 0x172e <__floatsisf+0x6c>
    1724:	9a 95       	dec	r25
    1726:	66 0f       	add	r22, r22
    1728:	77 1f       	adc	r23, r23
    172a:	88 1f       	adc	r24, r24
    172c:	da f7       	brpl	.-10     	; 0x1724 <__floatsisf+0x62>
    172e:	88 0f       	add	r24, r24
    1730:	96 95       	lsr	r25
    1732:	87 95       	ror	r24
    1734:	97 f9       	bld	r25, 7
    1736:	08 95       	ret

00001738 <__fp_cmp>:
    1738:	99 0f       	add	r25, r25
    173a:	00 08       	sbc	r0, r0
    173c:	55 0f       	add	r21, r21
    173e:	aa 0b       	sbc	r26, r26
    1740:	e0 e8       	ldi	r30, 0x80	; 128
    1742:	fe ef       	ldi	r31, 0xFE	; 254
    1744:	16 16       	cp	r1, r22
    1746:	17 06       	cpc	r1, r23
    1748:	e8 07       	cpc	r30, r24
    174a:	f9 07       	cpc	r31, r25
    174c:	c0 f0       	brcs	.+48     	; 0x177e <__fp_cmp+0x46>
    174e:	12 16       	cp	r1, r18
    1750:	13 06       	cpc	r1, r19
    1752:	e4 07       	cpc	r30, r20
    1754:	f5 07       	cpc	r31, r21
    1756:	98 f0       	brcs	.+38     	; 0x177e <__fp_cmp+0x46>
    1758:	62 1b       	sub	r22, r18
    175a:	73 0b       	sbc	r23, r19
    175c:	84 0b       	sbc	r24, r20
    175e:	95 0b       	sbc	r25, r21
    1760:	39 f4       	brne	.+14     	; 0x1770 <__fp_cmp+0x38>
    1762:	0a 26       	eor	r0, r26
    1764:	61 f0       	breq	.+24     	; 0x177e <__fp_cmp+0x46>
    1766:	23 2b       	or	r18, r19
    1768:	24 2b       	or	r18, r20
    176a:	25 2b       	or	r18, r21
    176c:	21 f4       	brne	.+8      	; 0x1776 <__fp_cmp+0x3e>
    176e:	08 95       	ret
    1770:	0a 26       	eor	r0, r26
    1772:	09 f4       	brne	.+2      	; 0x1776 <__fp_cmp+0x3e>
    1774:	a1 40       	sbci	r26, 0x01	; 1
    1776:	a6 95       	lsr	r26
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	81 1d       	adc	r24, r1
    177c:	81 1d       	adc	r24, r1
    177e:	08 95       	ret

00001780 <__fp_inf>:
    1780:	97 f9       	bld	r25, 7
    1782:	9f 67       	ori	r25, 0x7F	; 127
    1784:	80 e8       	ldi	r24, 0x80	; 128
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	08 95       	ret

0000178c <__fp_nan>:
    178c:	9f ef       	ldi	r25, 0xFF	; 255
    178e:	80 ec       	ldi	r24, 0xC0	; 192
    1790:	08 95       	ret

00001792 <__fp_pscA>:
    1792:	00 24       	eor	r0, r0
    1794:	0a 94       	dec	r0
    1796:	16 16       	cp	r1, r22
    1798:	17 06       	cpc	r1, r23
    179a:	18 06       	cpc	r1, r24
    179c:	09 06       	cpc	r0, r25
    179e:	08 95       	ret

000017a0 <__fp_pscB>:
    17a0:	00 24       	eor	r0, r0
    17a2:	0a 94       	dec	r0
    17a4:	12 16       	cp	r1, r18
    17a6:	13 06       	cpc	r1, r19
    17a8:	14 06       	cpc	r1, r20
    17aa:	05 06       	cpc	r0, r21
    17ac:	08 95       	ret

000017ae <__fp_round>:
    17ae:	09 2e       	mov	r0, r25
    17b0:	03 94       	inc	r0
    17b2:	00 0c       	add	r0, r0
    17b4:	11 f4       	brne	.+4      	; 0x17ba <__fp_round+0xc>
    17b6:	88 23       	and	r24, r24
    17b8:	52 f0       	brmi	.+20     	; 0x17ce <__fp_round+0x20>
    17ba:	bb 0f       	add	r27, r27
    17bc:	40 f4       	brcc	.+16     	; 0x17ce <__fp_round+0x20>
    17be:	bf 2b       	or	r27, r31
    17c0:	11 f4       	brne	.+4      	; 0x17c6 <__fp_round+0x18>
    17c2:	60 ff       	sbrs	r22, 0
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <__fp_round+0x20>
    17c6:	6f 5f       	subi	r22, 0xFF	; 255
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8f 4f       	sbci	r24, 0xFF	; 255
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	08 95       	ret

000017d0 <__fp_split3>:
    17d0:	57 fd       	sbrc	r21, 7
    17d2:	90 58       	subi	r25, 0x80	; 128
    17d4:	44 0f       	add	r20, r20
    17d6:	55 1f       	adc	r21, r21
    17d8:	59 f0       	breq	.+22     	; 0x17f0 <__fp_splitA+0x10>
    17da:	5f 3f       	cpi	r21, 0xFF	; 255
    17dc:	71 f0       	breq	.+28     	; 0x17fa <__fp_splitA+0x1a>
    17de:	47 95       	ror	r20

000017e0 <__fp_splitA>:
    17e0:	88 0f       	add	r24, r24
    17e2:	97 fb       	bst	r25, 7
    17e4:	99 1f       	adc	r25, r25
    17e6:	61 f0       	breq	.+24     	; 0x1800 <__fp_splitA+0x20>
    17e8:	9f 3f       	cpi	r25, 0xFF	; 255
    17ea:	79 f0       	breq	.+30     	; 0x180a <__fp_splitA+0x2a>
    17ec:	87 95       	ror	r24
    17ee:	08 95       	ret
    17f0:	12 16       	cp	r1, r18
    17f2:	13 06       	cpc	r1, r19
    17f4:	14 06       	cpc	r1, r20
    17f6:	55 1f       	adc	r21, r21
    17f8:	f2 cf       	rjmp	.-28     	; 0x17de <__fp_split3+0xe>
    17fa:	46 95       	lsr	r20
    17fc:	f1 df       	rcall	.-30     	; 0x17e0 <__fp_splitA>
    17fe:	08 c0       	rjmp	.+16     	; 0x1810 <__fp_splitA+0x30>
    1800:	16 16       	cp	r1, r22
    1802:	17 06       	cpc	r1, r23
    1804:	18 06       	cpc	r1, r24
    1806:	99 1f       	adc	r25, r25
    1808:	f1 cf       	rjmp	.-30     	; 0x17ec <__fp_splitA+0xc>
    180a:	86 95       	lsr	r24
    180c:	71 05       	cpc	r23, r1
    180e:	61 05       	cpc	r22, r1
    1810:	08 94       	sec
    1812:	08 95       	ret

00001814 <__fp_zero>:
    1814:	e8 94       	clt

00001816 <__fp_szero>:
    1816:	bb 27       	eor	r27, r27
    1818:	66 27       	eor	r22, r22
    181a:	77 27       	eor	r23, r23
    181c:	cb 01       	movw	r24, r22
    181e:	97 f9       	bld	r25, 7
    1820:	08 95       	ret

00001822 <__mulsf3>:
    1822:	0e 94 24 0c 	call	0x1848	; 0x1848 <__mulsf3x>
    1826:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_round>
    182a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscA>
    182e:	38 f0       	brcs	.+14     	; 0x183e <__mulsf3+0x1c>
    1830:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_pscB>
    1834:	20 f0       	brcs	.+8      	; 0x183e <__mulsf3+0x1c>
    1836:	95 23       	and	r25, r21
    1838:	11 f0       	breq	.+4      	; 0x183e <__mulsf3+0x1c>
    183a:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_inf>
    183e:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__fp_nan>
    1842:	11 24       	eor	r1, r1
    1844:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_szero>

00001848 <__mulsf3x>:
    1848:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__fp_split3>
    184c:	70 f3       	brcs	.-36     	; 0x182a <__mulsf3+0x8>

0000184e <__mulsf3_pse>:
    184e:	95 9f       	mul	r25, r21
    1850:	c1 f3       	breq	.-16     	; 0x1842 <__mulsf3+0x20>
    1852:	95 0f       	add	r25, r21
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	55 1f       	adc	r21, r21
    1858:	62 9f       	mul	r22, r18
    185a:	f0 01       	movw	r30, r0
    185c:	72 9f       	mul	r23, r18
    185e:	bb 27       	eor	r27, r27
    1860:	f0 0d       	add	r31, r0
    1862:	b1 1d       	adc	r27, r1
    1864:	63 9f       	mul	r22, r19
    1866:	aa 27       	eor	r26, r26
    1868:	f0 0d       	add	r31, r0
    186a:	b1 1d       	adc	r27, r1
    186c:	aa 1f       	adc	r26, r26
    186e:	64 9f       	mul	r22, r20
    1870:	66 27       	eor	r22, r22
    1872:	b0 0d       	add	r27, r0
    1874:	a1 1d       	adc	r26, r1
    1876:	66 1f       	adc	r22, r22
    1878:	82 9f       	mul	r24, r18
    187a:	22 27       	eor	r18, r18
    187c:	b0 0d       	add	r27, r0
    187e:	a1 1d       	adc	r26, r1
    1880:	62 1f       	adc	r22, r18
    1882:	73 9f       	mul	r23, r19
    1884:	b0 0d       	add	r27, r0
    1886:	a1 1d       	adc	r26, r1
    1888:	62 1f       	adc	r22, r18
    188a:	83 9f       	mul	r24, r19
    188c:	a0 0d       	add	r26, r0
    188e:	61 1d       	adc	r22, r1
    1890:	22 1f       	adc	r18, r18
    1892:	74 9f       	mul	r23, r20
    1894:	33 27       	eor	r19, r19
    1896:	a0 0d       	add	r26, r0
    1898:	61 1d       	adc	r22, r1
    189a:	23 1f       	adc	r18, r19
    189c:	84 9f       	mul	r24, r20
    189e:	60 0d       	add	r22, r0
    18a0:	21 1d       	adc	r18, r1
    18a2:	82 2f       	mov	r24, r18
    18a4:	76 2f       	mov	r23, r22
    18a6:	6a 2f       	mov	r22, r26
    18a8:	11 24       	eor	r1, r1
    18aa:	9f 57       	subi	r25, 0x7F	; 127
    18ac:	50 40       	sbci	r21, 0x00	; 0
    18ae:	9a f0       	brmi	.+38     	; 0x18d6 <__mulsf3_pse+0x88>
    18b0:	f1 f0       	breq	.+60     	; 0x18ee <__mulsf3_pse+0xa0>
    18b2:	88 23       	and	r24, r24
    18b4:	4a f0       	brmi	.+18     	; 0x18c8 <__mulsf3_pse+0x7a>
    18b6:	ee 0f       	add	r30, r30
    18b8:	ff 1f       	adc	r31, r31
    18ba:	bb 1f       	adc	r27, r27
    18bc:	66 1f       	adc	r22, r22
    18be:	77 1f       	adc	r23, r23
    18c0:	88 1f       	adc	r24, r24
    18c2:	91 50       	subi	r25, 0x01	; 1
    18c4:	50 40       	sbci	r21, 0x00	; 0
    18c6:	a9 f7       	brne	.-22     	; 0x18b2 <__mulsf3_pse+0x64>
    18c8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ca:	51 05       	cpc	r21, r1
    18cc:	80 f0       	brcs	.+32     	; 0x18ee <__mulsf3_pse+0xa0>
    18ce:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_inf>
    18d2:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_szero>
    18d6:	5f 3f       	cpi	r21, 0xFF	; 255
    18d8:	e4 f3       	brlt	.-8      	; 0x18d2 <__mulsf3_pse+0x84>
    18da:	98 3e       	cpi	r25, 0xE8	; 232
    18dc:	d4 f3       	brlt	.-12     	; 0x18d2 <__mulsf3_pse+0x84>
    18de:	86 95       	lsr	r24
    18e0:	77 95       	ror	r23
    18e2:	67 95       	ror	r22
    18e4:	b7 95       	ror	r27
    18e6:	f7 95       	ror	r31
    18e8:	e7 95       	ror	r30
    18ea:	9f 5f       	subi	r25, 0xFF	; 255
    18ec:	c1 f7       	brne	.-16     	; 0x18de <__mulsf3_pse+0x90>
    18ee:	fe 2b       	or	r31, r30
    18f0:	88 0f       	add	r24, r24
    18f2:	91 1d       	adc	r25, r1
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	97 f9       	bld	r25, 7
    18fa:	08 95       	ret

000018fc <pow>:
    18fc:	fa 01       	movw	r30, r20
    18fe:	ee 0f       	add	r30, r30
    1900:	ff 1f       	adc	r31, r31
    1902:	30 96       	adiw	r30, 0x00	; 0
    1904:	21 05       	cpc	r18, r1
    1906:	31 05       	cpc	r19, r1
    1908:	a1 f1       	breq	.+104    	; 0x1972 <pow+0x76>
    190a:	61 15       	cp	r22, r1
    190c:	71 05       	cpc	r23, r1
    190e:	61 f4       	brne	.+24     	; 0x1928 <pow+0x2c>
    1910:	80 38       	cpi	r24, 0x80	; 128
    1912:	bf e3       	ldi	r27, 0x3F	; 63
    1914:	9b 07       	cpc	r25, r27
    1916:	49 f1       	breq	.+82     	; 0x196a <pow+0x6e>
    1918:	68 94       	set
    191a:	90 38       	cpi	r25, 0x80	; 128
    191c:	81 05       	cpc	r24, r1
    191e:	61 f0       	breq	.+24     	; 0x1938 <pow+0x3c>
    1920:	80 38       	cpi	r24, 0x80	; 128
    1922:	bf ef       	ldi	r27, 0xFF	; 255
    1924:	9b 07       	cpc	r25, r27
    1926:	41 f0       	breq	.+16     	; 0x1938 <pow+0x3c>
    1928:	99 23       	and	r25, r25
    192a:	4a f5       	brpl	.+82     	; 0x197e <pow+0x82>
    192c:	ff 3f       	cpi	r31, 0xFF	; 255
    192e:	e1 05       	cpc	r30, r1
    1930:	31 05       	cpc	r19, r1
    1932:	21 05       	cpc	r18, r1
    1934:	19 f1       	breq	.+70     	; 0x197c <pow+0x80>
    1936:	e8 94       	clt
    1938:	08 94       	sec
    193a:	e7 95       	ror	r30
    193c:	d9 01       	movw	r26, r18
    193e:	aa 23       	and	r26, r26
    1940:	29 f4       	brne	.+10     	; 0x194c <pow+0x50>
    1942:	ab 2f       	mov	r26, r27
    1944:	be 2f       	mov	r27, r30
    1946:	f8 5f       	subi	r31, 0xF8	; 248
    1948:	d0 f3       	brcs	.-12     	; 0x193e <pow+0x42>
    194a:	10 c0       	rjmp	.+32     	; 0x196c <pow+0x70>
    194c:	ff 5f       	subi	r31, 0xFF	; 255
    194e:	70 f4       	brcc	.+28     	; 0x196c <pow+0x70>
    1950:	a6 95       	lsr	r26
    1952:	e0 f7       	brcc	.-8      	; 0x194c <pow+0x50>
    1954:	f7 39       	cpi	r31, 0x97	; 151
    1956:	50 f0       	brcs	.+20     	; 0x196c <pow+0x70>
    1958:	19 f0       	breq	.+6      	; 0x1960 <pow+0x64>
    195a:	ff 3a       	cpi	r31, 0xAF	; 175
    195c:	38 f4       	brcc	.+14     	; 0x196c <pow+0x70>
    195e:	9f 77       	andi	r25, 0x7F	; 127
    1960:	9f 93       	push	r25
    1962:	0d d0       	rcall	.+26     	; 0x197e <pow+0x82>
    1964:	0f 90       	pop	r0
    1966:	07 fc       	sbrc	r0, 7
    1968:	90 58       	subi	r25, 0x80	; 128
    196a:	08 95       	ret
    196c:	46 f0       	brts	.+16     	; 0x197e <pow+0x82>
    196e:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__fp_nan>
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	80 e8       	ldi	r24, 0x80	; 128
    1978:	9f e3       	ldi	r25, 0x3F	; 63
    197a:	08 95       	ret
    197c:	4f e7       	ldi	r20, 0x7F	; 127
    197e:	9f 77       	andi	r25, 0x7F	; 127
    1980:	5f 93       	push	r21
    1982:	4f 93       	push	r20
    1984:	3f 93       	push	r19
    1986:	2f 93       	push	r18
    1988:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <log>
    198c:	2f 91       	pop	r18
    198e:	3f 91       	pop	r19
    1990:	4f 91       	pop	r20
    1992:	5f 91       	pop	r21
    1994:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    1998:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <exp>
    199c:	19 f4       	brne	.+6      	; 0x19a4 <pow+0xa8>
    199e:	16 f4       	brtc	.+4      	; 0x19a4 <pow+0xa8>
    19a0:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__fp_nan>
    19a4:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__fp_mpack>

000019a8 <sqrt>:
    19a8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_splitA>
    19ac:	b8 f3       	brcs	.-18     	; 0x199c <pow+0xa0>
    19ae:	99 23       	and	r25, r25
    19b0:	c9 f3       	breq	.-14     	; 0x19a4 <pow+0xa8>
    19b2:	b6 f3       	brts	.-20     	; 0x19a0 <pow+0xa4>
    19b4:	9f 57       	subi	r25, 0x7F	; 127
    19b6:	55 0b       	sbc	r21, r21
    19b8:	87 ff       	sbrs	r24, 7
    19ba:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__fp_norm2>
    19be:	00 24       	eor	r0, r0
    19c0:	a0 e6       	ldi	r26, 0x60	; 96
    19c2:	40 ea       	ldi	r20, 0xA0	; 160
    19c4:	90 01       	movw	r18, r0
    19c6:	80 58       	subi	r24, 0x80	; 128
    19c8:	56 95       	lsr	r21
    19ca:	97 95       	ror	r25
    19cc:	28 f4       	brcc	.+10     	; 0x19d8 <sqrt+0x30>
    19ce:	80 5c       	subi	r24, 0xC0	; 192
    19d0:	66 0f       	add	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	20 f0       	brcs	.+8      	; 0x19e0 <sqrt+0x38>
    19d8:	26 17       	cp	r18, r22
    19da:	37 07       	cpc	r19, r23
    19dc:	48 07       	cpc	r20, r24
    19de:	30 f4       	brcc	.+12     	; 0x19ec <sqrt+0x44>
    19e0:	62 1b       	sub	r22, r18
    19e2:	73 0b       	sbc	r23, r19
    19e4:	84 0b       	sbc	r24, r20
    19e6:	20 29       	or	r18, r0
    19e8:	31 29       	or	r19, r1
    19ea:	4a 2b       	or	r20, r26
    19ec:	a6 95       	lsr	r26
    19ee:	17 94       	ror	r1
    19f0:	07 94       	ror	r0
    19f2:	20 25       	eor	r18, r0
    19f4:	31 25       	eor	r19, r1
    19f6:	4a 27       	eor	r20, r26
    19f8:	58 f7       	brcc	.-42     	; 0x19d0 <sqrt+0x28>
    19fa:	66 0f       	add	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	20 f0       	brcs	.+8      	; 0x1a0a <sqrt+0x62>
    1a02:	26 17       	cp	r18, r22
    1a04:	37 07       	cpc	r19, r23
    1a06:	48 07       	cpc	r20, r24
    1a08:	30 f4       	brcc	.+12     	; 0x1a16 <sqrt+0x6e>
    1a0a:	62 0b       	sbc	r22, r18
    1a0c:	73 0b       	sbc	r23, r19
    1a0e:	84 0b       	sbc	r24, r20
    1a10:	20 0d       	add	r18, r0
    1a12:	31 1d       	adc	r19, r1
    1a14:	41 1d       	adc	r20, r1
    1a16:	a0 95       	com	r26
    1a18:	81 f7       	brne	.-32     	; 0x19fa <sqrt+0x52>
    1a1a:	b9 01       	movw	r22, r18
    1a1c:	84 2f       	mov	r24, r20
    1a1e:	91 58       	subi	r25, 0x81	; 129
    1a20:	88 0f       	add	r24, r24
    1a22:	96 95       	lsr	r25
    1a24:	87 95       	ror	r24
    1a26:	08 95       	ret
    1a28:	29 f4       	brne	.+10     	; 0x1a34 <sqrt+0x8c>
    1a2a:	16 f0       	brts	.+4      	; 0x1a30 <sqrt+0x88>
    1a2c:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_inf>
    1a30:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_zero>
    1a34:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__fp_nan>

00001a38 <exp>:
    1a38:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_splitA>
    1a3c:	a8 f3       	brcs	.-22     	; 0x1a28 <sqrt+0x80>
    1a3e:	96 38       	cpi	r25, 0x86	; 134
    1a40:	a0 f7       	brcc	.-24     	; 0x1a2a <sqrt+0x82>
    1a42:	07 f8       	bld	r0, 7
    1a44:	0f 92       	push	r0
    1a46:	e8 94       	clt
    1a48:	2b e3       	ldi	r18, 0x3B	; 59
    1a4a:	3a ea       	ldi	r19, 0xAA	; 170
    1a4c:	48 eb       	ldi	r20, 0xB8	; 184
    1a4e:	5f e7       	ldi	r21, 0x7F	; 127
    1a50:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3_pse>
    1a54:	0f 92       	push	r0
    1a56:	0f 92       	push	r0
    1a58:	0f 92       	push	r0
    1a5a:	4d b7       	in	r20, 0x3d	; 61
    1a5c:	5e b7       	in	r21, 0x3e	; 62
    1a5e:	0f 92       	push	r0
    1a60:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <modf>
    1a64:	e2 e9       	ldi	r30, 0x92	; 146
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_powser>
    1a6c:	4f 91       	pop	r20
    1a6e:	5f 91       	pop	r21
    1a70:	ef 91       	pop	r30
    1a72:	ff 91       	pop	r31
    1a74:	e5 95       	asr	r30
    1a76:	ee 1f       	adc	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	49 f0       	breq	.+18     	; 0x1a8e <exp+0x56>
    1a7c:	fe 57       	subi	r31, 0x7E	; 126
    1a7e:	e0 68       	ori	r30, 0x80	; 128
    1a80:	44 27       	eor	r20, r20
    1a82:	ee 0f       	add	r30, r30
    1a84:	44 1f       	adc	r20, r20
    1a86:	fa 95       	dec	r31
    1a88:	e1 f7       	brne	.-8      	; 0x1a82 <exp+0x4a>
    1a8a:	41 95       	neg	r20
    1a8c:	55 0b       	sbc	r21, r21
    1a8e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <ldexp>
    1a92:	0f 90       	pop	r0
    1a94:	07 fe       	sbrs	r0, 7
    1a96:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <inverse>
    1a9a:	08 95       	ret

00001a9c <__fp_mpack>:
    1a9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9e:	31 f0       	breq	.+12     	; 0x1aac <__fp_mpack_finite+0xc>

00001aa0 <__fp_mpack_finite>:
    1aa0:	91 50       	subi	r25, 0x01	; 1
    1aa2:	20 f4       	brcc	.+8      	; 0x1aac <__fp_mpack_finite+0xc>
    1aa4:	87 95       	ror	r24
    1aa6:	77 95       	ror	r23
    1aa8:	67 95       	ror	r22
    1aaa:	b7 95       	ror	r27
    1aac:	88 0f       	add	r24, r24
    1aae:	91 1d       	adc	r25, r1
    1ab0:	96 95       	lsr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	97 f9       	bld	r25, 7
    1ab6:	08 95       	ret

00001ab8 <__fp_norm2>:
    1ab8:	91 50       	subi	r25, 0x01	; 1
    1aba:	50 40       	sbci	r21, 0x00	; 0
    1abc:	66 0f       	add	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	d2 f7       	brpl	.-12     	; 0x1ab8 <__fp_norm2>
    1ac4:	08 95       	ret

00001ac6 <__fp_powser>:
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	1f 93       	push	r17
    1acc:	0f 93       	push	r16
    1ace:	ff 92       	push	r15
    1ad0:	ef 92       	push	r14
    1ad2:	df 92       	push	r13
    1ad4:	7b 01       	movw	r14, r22
    1ad6:	8c 01       	movw	r16, r24
    1ad8:	68 94       	set
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <__fp_powser+0x22>
    1adc:	da 2e       	mov	r13, r26
    1ade:	ef 01       	movw	r28, r30
    1ae0:	0e 94 24 0c 	call	0x1848	; 0x1848 <__mulsf3x>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e8 94       	clt
    1ae8:	a5 91       	lpm	r26, Z+
    1aea:	25 91       	lpm	r18, Z+
    1aec:	35 91       	lpm	r19, Z+
    1aee:	45 91       	lpm	r20, Z+
    1af0:	55 91       	lpm	r21, Z+
    1af2:	a6 f3       	brts	.-24     	; 0x1adc <__fp_powser+0x16>
    1af4:	ef 01       	movw	r28, r30
    1af6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__addsf3x>
    1afa:	fe 01       	movw	r30, r28
    1afc:	97 01       	movw	r18, r14
    1afe:	a8 01       	movw	r20, r16
    1b00:	da 94       	dec	r13
    1b02:	69 f7       	brne	.-38     	; 0x1ade <__fp_powser+0x18>
    1b04:	df 90       	pop	r13
    1b06:	ef 90       	pop	r14
    1b08:	ff 90       	pop	r15
    1b0a:	0f 91       	pop	r16
    1b0c:	1f 91       	pop	r17
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <inverse>:
    1b14:	9b 01       	movw	r18, r22
    1b16:	ac 01       	movw	r20, r24
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	80 e8       	ldi	r24, 0x80	; 128
    1b1e:	9f e3       	ldi	r25, 0x3F	; 63
    1b20:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__divsf3>
    1b24:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_inf>
    1b28:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__fp_mpack>

00001b2c <ldexp>:
    1b2c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_splitA>
    1b30:	d8 f3       	brcs	.-10     	; 0x1b28 <inverse+0x14>
    1b32:	99 23       	and	r25, r25
    1b34:	c9 f3       	breq	.-14     	; 0x1b28 <inverse+0x14>
    1b36:	94 0f       	add	r25, r20
    1b38:	51 1d       	adc	r21, r1
    1b3a:	a3 f3       	brvs	.-24     	; 0x1b24 <inverse+0x10>
    1b3c:	91 50       	subi	r25, 0x01	; 1
    1b3e:	50 40       	sbci	r21, 0x00	; 0
    1b40:	94 f0       	brlt	.+36     	; 0x1b66 <ldexp+0x3a>
    1b42:	59 f0       	breq	.+22     	; 0x1b5a <ldexp+0x2e>
    1b44:	88 23       	and	r24, r24
    1b46:	32 f0       	brmi	.+12     	; 0x1b54 <ldexp+0x28>
    1b48:	66 0f       	add	r22, r22
    1b4a:	77 1f       	adc	r23, r23
    1b4c:	88 1f       	adc	r24, r24
    1b4e:	91 50       	subi	r25, 0x01	; 1
    1b50:	50 40       	sbci	r21, 0x00	; 0
    1b52:	c1 f7       	brne	.-16     	; 0x1b44 <ldexp+0x18>
    1b54:	9e 3f       	cpi	r25, 0xFE	; 254
    1b56:	51 05       	cpc	r21, r1
    1b58:	2c f7       	brge	.-54     	; 0x1b24 <inverse+0x10>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	91 1d       	adc	r25, r1
    1b5e:	96 95       	lsr	r25
    1b60:	87 95       	ror	r24
    1b62:	97 f9       	bld	r25, 7
    1b64:	08 95       	ret
    1b66:	5f 3f       	cpi	r21, 0xFF	; 255
    1b68:	ac f0       	brlt	.+42     	; 0x1b94 <ldexp+0x68>
    1b6a:	98 3e       	cpi	r25, 0xE8	; 232
    1b6c:	9c f0       	brlt	.+38     	; 0x1b94 <ldexp+0x68>
    1b6e:	bb 27       	eor	r27, r27
    1b70:	86 95       	lsr	r24
    1b72:	77 95       	ror	r23
    1b74:	67 95       	ror	r22
    1b76:	b7 95       	ror	r27
    1b78:	08 f4       	brcc	.+2      	; 0x1b7c <ldexp+0x50>
    1b7a:	b1 60       	ori	r27, 0x01	; 1
    1b7c:	93 95       	inc	r25
    1b7e:	c1 f7       	brne	.-16     	; 0x1b70 <ldexp+0x44>
    1b80:	bb 0f       	add	r27, r27
    1b82:	58 f7       	brcc	.-42     	; 0x1b5a <ldexp+0x2e>
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <ldexp+0x5e>
    1b86:	60 ff       	sbrs	r22, 0
    1b88:	e8 cf       	rjmp	.-48     	; 0x1b5a <ldexp+0x2e>
    1b8a:	6f 5f       	subi	r22, 0xFF	; 255
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	e3 cf       	rjmp	.-58     	; 0x1b5a <ldexp+0x2e>
    1b94:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_szero>
    1b98:	16 f0       	brts	.+4      	; 0x1b9e <ldexp+0x72>
    1b9a:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__fp_mpack>
    1b9e:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__fp_nan>
    1ba2:	68 94       	set
    1ba4:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_inf>

00001ba8 <log>:
    1ba8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_splitA>
    1bac:	a8 f3       	brcs	.-22     	; 0x1b98 <ldexp+0x6c>
    1bae:	99 23       	and	r25, r25
    1bb0:	c1 f3       	breq	.-16     	; 0x1ba2 <ldexp+0x76>
    1bb2:	ae f3       	brts	.-22     	; 0x1b9e <ldexp+0x72>
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	1f 93       	push	r17
    1bba:	0f 93       	push	r16
    1bbc:	ff 92       	push	r15
    1bbe:	c9 2f       	mov	r28, r25
    1bc0:	dd 27       	eor	r29, r29
    1bc2:	88 23       	and	r24, r24
    1bc4:	2a f0       	brmi	.+10     	; 0x1bd0 <log+0x28>
    1bc6:	21 97       	sbiw	r28, 0x01	; 1
    1bc8:	66 0f       	add	r22, r22
    1bca:	77 1f       	adc	r23, r23
    1bcc:	88 1f       	adc	r24, r24
    1bce:	da f7       	brpl	.-10     	; 0x1bc6 <log+0x1e>
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f eb       	ldi	r21, 0xBF	; 191
    1bd8:	9f e3       	ldi	r25, 0x3F	; 63
    1bda:	88 39       	cpi	r24, 0x98	; 152
    1bdc:	20 f0       	brcs	.+8      	; 0x1be6 <log+0x3e>
    1bde:	80 3e       	cpi	r24, 0xE0	; 224
    1be0:	38 f0       	brcs	.+14     	; 0x1bf0 <log+0x48>
    1be2:	21 96       	adiw	r28, 0x01	; 1
    1be4:	8f 77       	andi	r24, 0x7F	; 127
    1be6:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
    1bea:	ea eb       	ldi	r30, 0xBA	; 186
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <log+0x50>
    1bf0:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
    1bf4:	e7 ee       	ldi	r30, 0xE7	; 231
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_powser>
    1bfc:	8b 01       	movw	r16, r22
    1bfe:	be 01       	movw	r22, r28
    1c00:	ec 01       	movw	r28, r24
    1c02:	fb 2e       	mov	r15, r27
    1c04:	6f 57       	subi	r22, 0x7F	; 127
    1c06:	71 09       	sbc	r23, r1
    1c08:	75 95       	asr	r23
    1c0a:	77 1f       	adc	r23, r23
    1c0c:	88 0b       	sbc	r24, r24
    1c0e:	99 0b       	sbc	r25, r25
    1c10:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
    1c14:	28 e1       	ldi	r18, 0x18	; 24
    1c16:	32 e7       	ldi	r19, 0x72	; 114
    1c18:	41 e3       	ldi	r20, 0x31	; 49
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 24 0c 	call	0x1848	; 0x1848 <__mulsf3x>
    1c20:	af 2d       	mov	r26, r15
    1c22:	98 01       	movw	r18, r16
    1c24:	ae 01       	movw	r20, r28
    1c26:	ff 90       	pop	r15
    1c28:	0f 91       	pop	r16
    1c2a:	1f 91       	pop	r17
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__addsf3x>
    1c34:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_round>

00001c38 <modf>:
    1c38:	fa 01       	movw	r30, r20
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	aa 0f       	add	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	9b 01       	movw	r18, r22
    1c42:	ac 01       	movw	r20, r24
    1c44:	bf 57       	subi	r27, 0x7F	; 127
    1c46:	28 f4       	brcc	.+10     	; 0x1c52 <modf+0x1a>
    1c48:	22 27       	eor	r18, r18
    1c4a:	33 27       	eor	r19, r19
    1c4c:	44 27       	eor	r20, r20
    1c4e:	50 78       	andi	r21, 0x80	; 128
    1c50:	20 c0       	rjmp	.+64     	; 0x1c92 <modf+0x5a>
    1c52:	b7 51       	subi	r27, 0x17	; 23
    1c54:	90 f4       	brcc	.+36     	; 0x1c7a <modf+0x42>
    1c56:	ab 2f       	mov	r26, r27
    1c58:	00 24       	eor	r0, r0
    1c5a:	46 95       	lsr	r20
    1c5c:	37 95       	ror	r19
    1c5e:	27 95       	ror	r18
    1c60:	01 1c       	adc	r0, r1
    1c62:	a3 95       	inc	r26
    1c64:	d2 f3       	brmi	.-12     	; 0x1c5a <modf+0x22>
    1c66:	00 20       	and	r0, r0
    1c68:	71 f0       	breq	.+28     	; 0x1c86 <modf+0x4e>
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	44 1f       	adc	r20, r20
    1c70:	b3 95       	inc	r27
    1c72:	da f3       	brmi	.-10     	; 0x1c6a <modf+0x32>
    1c74:	0e d0       	rcall	.+28     	; 0x1c92 <modf+0x5a>
    1c76:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__subsf3>
    1c7a:	61 30       	cpi	r22, 0x01	; 1
    1c7c:	71 05       	cpc	r23, r1
    1c7e:	a0 e8       	ldi	r26, 0x80	; 128
    1c80:	8a 07       	cpc	r24, r26
    1c82:	b9 46       	sbci	r27, 0x69	; 105
    1c84:	30 f4       	brcc	.+12     	; 0x1c92 <modf+0x5a>
    1c86:	9b 01       	movw	r18, r22
    1c88:	ac 01       	movw	r20, r24
    1c8a:	66 27       	eor	r22, r22
    1c8c:	77 27       	eor	r23, r23
    1c8e:	88 27       	eor	r24, r24
    1c90:	90 78       	andi	r25, 0x80	; 128
    1c92:	30 96       	adiw	r30, 0x00	; 0
    1c94:	21 f0       	breq	.+8      	; 0x1c9e <modf+0x66>
    1c96:	20 83       	st	Z, r18
    1c98:	31 83       	std	Z+1, r19	; 0x01
    1c9a:	42 83       	std	Z+2, r20	; 0x02
    1c9c:	53 83       	std	Z+3, r21	; 0x03
    1c9e:	08 95       	ret

00001ca0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1ca0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1ca2:	91 8d       	ldd	r25, Z+25	; 0x19
    1ca4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ca6:	89 2f       	mov	r24, r25
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	80 5c       	subi	r24, 0xC0	; 192
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	82 1b       	sub	r24, r18
    1cb0:	91 09       	sbc	r25, r1
}
    1cb2:	8f 73       	andi	r24, 0x3F	; 63
    1cb4:	99 27       	eor	r25, r25
    1cb6:	08 95       	ret

00001cb8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1cb8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1cba:	91 8d       	ldd	r25, Z+25	; 0x19
    1cbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cbe:	98 17       	cp	r25, r24
    1cc0:	31 f0       	breq	.+12     	; 0x1cce <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1cc2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cc4:	e8 0f       	add	r30, r24
    1cc6:	f1 1d       	adc	r31, r1
    1cc8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1cd2:	08 95       	ret

00001cd4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1cd4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1cd6:	91 8d       	ldd	r25, Z+25	; 0x19
    1cd8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cda:	98 17       	cp	r25, r24
    1cdc:	61 f0       	breq	.+24     	; 0x1cf6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1cde:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ce0:	df 01       	movw	r26, r30
    1ce2:	a8 0f       	add	r26, r24
    1ce4:	b1 1d       	adc	r27, r1
    1ce6:	5d 96       	adiw	r26, 0x1d	; 29
    1ce8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1cea:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cec:	9f 5f       	subi	r25, 0xFF	; 255
    1cee:	9f 73       	andi	r25, 0x3F	; 63
    1cf0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1cfa:	08 95       	ret

00001cfc <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1d00:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d02:	25 2f       	mov	r18, r21
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	84 2f       	mov	r24, r20
    1d08:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1d0a:	82 1b       	sub	r24, r18
    1d0c:	93 0b       	sbc	r25, r19
    1d0e:	54 17       	cp	r21, r20
    1d10:	10 f0       	brcs	.+4      	; 0x1d16 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1d12:	cf 96       	adiw	r24, 0x3f	; 63
    1d14:	08 95       	ret
  return tail - head - 1;
    1d16:	01 97       	sbiw	r24, 0x01	; 1
}
    1d18:	08 95       	ret

00001d1a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1d1a:	8d ee       	ldi	r24, 0xED	; 237
    1d1c:	9f e0       	ldi	r25, 0x0F	; 15
    1d1e:	89 2b       	or	r24, r25
    1d20:	49 f0       	breq	.+18     	; 0x1d34 <_Z14serialEventRunv+0x1a>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	89 2b       	or	r24, r25
    1d28:	29 f0       	breq	.+10     	; 0x1d34 <_Z14serialEventRunv+0x1a>
    1d2a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <_Z17Serial0_availablev>
    1d2e:	81 11       	cpse	r24, r1
    1d30:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1d34:	08 95       	ret

00001d36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1d36:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1d38:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d3a:	df 01       	movw	r26, r30
    1d3c:	a8 0f       	add	r26, r24
    1d3e:	b1 1d       	adc	r27, r1
    1d40:	a3 5a       	subi	r26, 0xA3	; 163
    1d42:	bf 4f       	sbci	r27, 0xFF	; 255
    1d44:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1d46:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	8f 73       	andi	r24, 0x3F	; 63
    1d4e:	99 27       	eor	r25, r25
    1d50:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1d52:	a6 89       	ldd	r26, Z+22	; 0x16
    1d54:	b7 89       	ldd	r27, Z+23	; 0x17
    1d56:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1d58:	a0 89       	ldd	r26, Z+16	; 0x10
    1d5a:	b1 89       	ldd	r27, Z+17	; 0x11
    1d5c:	8c 91       	ld	r24, X
    1d5e:	83 70       	andi	r24, 0x03	; 3
    1d60:	80 64       	ori	r24, 0x40	; 64
    1d62:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1d64:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d66:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d68:	98 13       	cpse	r25, r24
    1d6a:	06 c0       	rjmp	.+12     	; 0x1d78 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1d6c:	02 88       	ldd	r0, Z+18	; 0x12
    1d6e:	f3 89       	ldd	r31, Z+19	; 0x13
    1d70:	e0 2d       	mov	r30, r0
    1d72:	80 81       	ld	r24, Z
    1d74:	8f 7d       	andi	r24, 0xDF	; 223
    1d76:	80 83       	st	Z, r24
    1d78:	08 95       	ret

00001d7a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	ec 01       	movw	r28, r24
  _written = true;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1d8c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d90:	98 13       	cpse	r25, r24
    1d92:	05 c0       	rjmp	.+10     	; 0x1d9e <_ZN14HardwareSerial5writeEh+0x24>
    1d94:	e8 89       	ldd	r30, Y+16	; 0x10
    1d96:	f9 89       	ldd	r31, Y+17	; 0x11
    1d98:	80 81       	ld	r24, Z
    1d9a:	85 fd       	sbrc	r24, 5
    1d9c:	26 c0       	rjmp	.+76     	; 0x1dea <_ZN14HardwareSerial5writeEh+0x70>
    1d9e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1da0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1da2:	10 e0       	ldi	r17, 0x00	; 0
    1da4:	0f 5f       	subi	r16, 0xFF	; 255
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	0f 73       	andi	r16, 0x3F	; 63
    1daa:	11 27       	eor	r17, r17
    1dac:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1dae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1db0:	e8 12       	cpse	r14, r24
    1db2:	0c c0       	rjmp	.+24     	; 0x1dcc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	07 fc       	sbrc	r0, 7
    1db8:	fa cf       	rjmp	.-12     	; 0x1dae <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1dba:	e8 89       	ldd	r30, Y+16	; 0x10
    1dbc:	f9 89       	ldd	r31, Y+17	; 0x11
    1dbe:	80 81       	ld	r24, Z
    1dc0:	85 ff       	sbrs	r24, 5
    1dc2:	f5 cf       	rjmp	.-22     	; 0x1dae <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1dca:	f1 cf       	rjmp	.-30     	; 0x1dae <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1dcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e8 0f       	add	r30, r24
    1dd2:	f1 1d       	adc	r31, r1
    1dd4:	e3 5a       	subi	r30, 0xA3	; 163
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1dda:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ddc:	f8 94       	cli
    _tx_buffer_head = i;
    1dde:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1de0:	ea 89       	ldd	r30, Y+18	; 0x12
    1de2:	fb 89       	ldd	r31, Y+19	; 0x13
    1de4:	80 81       	ld	r24, Z
    1de6:	80 62       	ori	r24, 0x20	; 32
    1de8:	0a c0       	rjmp	.+20     	; 0x1dfe <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1dea:	9f b7       	in	r25, 0x3f	; 63
    1dec:	f8 94       	cli
      *_udr = c;
    1dee:	ee 89       	ldd	r30, Y+22	; 0x16
    1df0:	ff 89       	ldd	r31, Y+23	; 0x17
    1df2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1df4:	e8 89       	ldd	r30, Y+16	; 0x10
    1df6:	f9 89       	ldd	r31, Y+17	; 0x11
    1df8:	80 81       	ld	r24, Z
    1dfa:	83 70       	andi	r24, 0x03	; 3
    1dfc:	80 64       	ori	r24, 0x40	; 64
    1dfe:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e00:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	08 95       	ret

00001e14 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1e1a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e1c:	88 23       	and	r24, r24
    1e1e:	c9 f0       	breq	.+50     	; 0x1e52 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1e20:	ea 89       	ldd	r30, Y+18	; 0x12
    1e22:	fb 89       	ldd	r31, Y+19	; 0x13
    1e24:	80 81       	ld	r24, Z
    1e26:	85 fd       	sbrc	r24, 5
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <_ZN14HardwareSerial5flushEv+0x20>
    1e2a:	a8 89       	ldd	r26, Y+16	; 0x10
    1e2c:	b9 89       	ldd	r27, Y+17	; 0x11
    1e2e:	8c 91       	ld	r24, X
    1e30:	86 fd       	sbrc	r24, 6
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	07 fc       	sbrc	r0, 7
    1e38:	f5 cf       	rjmp	.-22     	; 0x1e24 <_ZN14HardwareSerial5flushEv+0x10>
    1e3a:	80 81       	ld	r24, Z
    1e3c:	85 ff       	sbrs	r24, 5
    1e3e:	f2 cf       	rjmp	.-28     	; 0x1e24 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1e40:	a8 89       	ldd	r26, Y+16	; 0x10
    1e42:	b9 89       	ldd	r27, Y+17	; 0x11
    1e44:	8c 91       	ld	r24, X
    1e46:	85 ff       	sbrs	r24, 5
    1e48:	ed cf       	rjmp	.-38     	; 0x1e24 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e50:	e7 cf       	rjmp	.-50     	; 0x1e20 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	08 95       	ret

00001e58 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	ec 01       	movw	r28, r24
    1e68:	6a 01       	movw	r12, r20
    1e6a:	7b 01       	movw	r14, r22
    1e6c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1e6e:	e8 89       	ldd	r30, Y+16	; 0x10
    1e70:	f9 89       	ldd	r31, Y+17	; 0x11
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1e76:	41 15       	cp	r20, r1
    1e78:	51 4e       	sbci	r21, 0xE1	; 225
    1e7a:	61 05       	cpc	r22, r1
    1e7c:	71 05       	cpc	r23, r1
    1e7e:	b1 f0       	breq	.+44     	; 0x1eac <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	79 e0       	ldi	r23, 0x09	; 9
    1e84:	8d e3       	ldi	r24, 0x3D	; 61
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a7 01       	movw	r20, r14
    1e8a:	96 01       	movw	r18, r12
    1e8c:	0e 94 a1 21 	call	0x4342	; 0x4342 <__udivmodsi4>
    1e90:	da 01       	movw	r26, r20
    1e92:	c9 01       	movw	r24, r18
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	a1 09       	sbc	r26, r1
    1e98:	b1 09       	sbc	r27, r1
    1e9a:	b6 95       	lsr	r27
    1e9c:	a7 95       	ror	r26
    1e9e:	97 95       	ror	r25
    1ea0:	87 95       	ror	r24
    1ea2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ea4:	21 15       	cp	r18, r1
    1ea6:	80 e1       	ldi	r24, 0x10	; 16
    1ea8:	38 07       	cpc	r19, r24
    1eaa:	a8 f0       	brcs	.+42     	; 0x1ed6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1eac:	e8 89       	ldd	r30, Y+16	; 0x10
    1eae:	f9 89       	ldd	r31, Y+17	; 0x11
    1eb0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1eb2:	60 e8       	ldi	r22, 0x80	; 128
    1eb4:	74 e8       	ldi	r23, 0x84	; 132
    1eb6:	8e e1       	ldi	r24, 0x1E	; 30
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a7 01       	movw	r20, r14
    1ebc:	96 01       	movw	r18, r12
    1ebe:	0e 94 a1 21 	call	0x4342	; 0x4342 <__udivmodsi4>
    1ec2:	da 01       	movw	r26, r20
    1ec4:	c9 01       	movw	r24, r18
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	a1 09       	sbc	r26, r1
    1eca:	b1 09       	sbc	r27, r1
    1ecc:	b6 95       	lsr	r27
    1ece:	a7 95       	ror	r26
    1ed0:	97 95       	ror	r25
    1ed2:	87 95       	ror	r24
    1ed4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1ed6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ed8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1eda:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1edc:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ede:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ee0:	20 83       	st	Z, r18

  _written = false;
    1ee2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1ee4:	ec 89       	ldd	r30, Y+20	; 0x14
    1ee6:	fd 89       	ldd	r31, Y+21	; 0x15
    1ee8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1eea:	ea 89       	ldd	r30, Y+18	; 0x12
    1eec:	fb 89       	ldd	r31, Y+19	; 0x13
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 61       	ori	r24, 0x10	; 16
    1ef2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1ef4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ef6:	fb 89       	ldd	r31, Y+19	; 0x13
    1ef8:	80 81       	ld	r24, Z
    1efa:	88 60       	ori	r24, 0x08	; 8
    1efc:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1efe:	ea 89       	ldd	r30, Y+18	; 0x12
    1f00:	fb 89       	ldd	r31, Y+19	; 0x13
    1f02:	80 81       	ld	r24, Z
    1f04:	80 68       	ori	r24, 0x80	; 128
    1f06:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1f08:	ea 89       	ldd	r30, Y+18	; 0x12
    1f0a:	fb 89       	ldd	r31, Y+19	; 0x13
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8f 7d       	andi	r24, 0xDF	; 223
    1f10:	80 83       	st	Z, r24
}
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	cf 90       	pop	r12
    1f20:	08 95       	ret

00001f22 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	08 95       	ret

00001f28 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1f28:	08 95       	ret

00001f2a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1f2a:	1f 92       	push	r1
    1f2c:	0f 92       	push	r0
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	0f 92       	push	r0
    1f32:	11 24       	eor	r1, r1
    1f34:	2f 93       	push	r18
    1f36:	8f 93       	push	r24
    1f38:	9f 93       	push	r25
    1f3a:	ef 93       	push	r30
    1f3c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1f3e:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <Serial+0x10>
    1f42:	f0 91 7d 02 	lds	r31, 0x027D	; 0x80027d <Serial+0x11>
    1f46:	80 81       	ld	r24, Z
    1f48:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <Serial+0x16>
    1f4c:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <Serial+0x17>
    1f50:	82 fd       	sbrc	r24, 2
    1f52:	12 c0       	rjmp	.+36     	; 0x1f78 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1f54:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1f56:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Serial+0x19>
    1f5a:	8f 5f       	subi	r24, 0xFF	; 255
    1f5c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1f5e:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <Serial+0x1a>
    1f62:	82 17       	cp	r24, r18
    1f64:	51 f0       	breq	.+20     	; 0x1f7a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1f66:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <Serial+0x19>
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	e4 59       	subi	r30, 0x94	; 148
    1f6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f70:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1f72:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <Serial+0x19>
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1f78:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	9f 91       	pop	r25
    1f80:	8f 91       	pop	r24
    1f82:	2f 91       	pop	r18
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	0f 90       	pop	r0
    1f8a:	1f 90       	pop	r1
    1f8c:	18 95       	reti

00001f8e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1f8e:	1f 92       	push	r1
    1f90:	0f 92       	push	r0
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	0f 92       	push	r0
    1f96:	11 24       	eor	r1, r1
    1f98:	2f 93       	push	r18
    1f9a:	3f 93       	push	r19
    1f9c:	4f 93       	push	r20
    1f9e:	5f 93       	push	r21
    1fa0:	6f 93       	push	r22
    1fa2:	7f 93       	push	r23
    1fa4:	8f 93       	push	r24
    1fa6:	9f 93       	push	r25
    1fa8:	af 93       	push	r26
    1faa:	bf 93       	push	r27
    1fac:	ef 93       	push	r30
    1fae:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1fb0:	8c e6       	ldi	r24, 0x6C	; 108
    1fb2:	92 e0       	ldi	r25, 0x02	; 2
    1fb4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1fb8:	ff 91       	pop	r31
    1fba:	ef 91       	pop	r30
    1fbc:	bf 91       	pop	r27
    1fbe:	af 91       	pop	r26
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	7f 91       	pop	r23
    1fc6:	6f 91       	pop	r22
    1fc8:	5f 91       	pop	r21
    1fca:	4f 91       	pop	r20
    1fcc:	3f 91       	pop	r19
    1fce:	2f 91       	pop	r18
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1fda:	8c e6       	ldi	r24, 0x6C	; 108
    1fdc:	92 e0       	ldi	r25, 0x02	; 2
    1fde:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <_ZN14HardwareSerial9availableEv>
    1fe2:	21 e0       	ldi	r18, 0x01	; 1
    1fe4:	89 2b       	or	r24, r25
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <_Z17Serial0_availablev+0x10>
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
}
    1fea:	82 2f       	mov	r24, r18
    1fec:	08 95       	ret

00001fee <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1fee:	ec e6       	ldi	r30, 0x6C	; 108
    1ff0:	f2 e0       	ldi	r31, 0x02	; 2
    1ff2:	13 82       	std	Z+3, r1	; 0x03
    1ff4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1ff6:	88 ee       	ldi	r24, 0xE8	; 232
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	a0 e0       	ldi	r26, 0x00	; 0
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	84 83       	std	Z+4, r24	; 0x04
    2000:	95 83       	std	Z+5, r25	; 0x05
    2002:	a6 83       	std	Z+6, r26	; 0x06
    2004:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2006:	87 ef       	ldi	r24, 0xF7	; 247
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
    200e:	85 ec       	ldi	r24, 0xC5	; 197
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	95 87       	std	Z+13, r25	; 0x0d
    2014:	84 87       	std	Z+12, r24	; 0x0c
    2016:	84 ec       	ldi	r24, 0xC4	; 196
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	97 87       	std	Z+15, r25	; 0x0f
    201c:	86 87       	std	Z+14, r24	; 0x0e
    201e:	80 ec       	ldi	r24, 0xC0	; 192
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	91 8b       	std	Z+17, r25	; 0x11
    2024:	80 8b       	std	Z+16, r24	; 0x10
    2026:	81 ec       	ldi	r24, 0xC1	; 193
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	93 8b       	std	Z+19, r25	; 0x13
    202c:	82 8b       	std	Z+18, r24	; 0x12
    202e:	82 ec       	ldi	r24, 0xC2	; 194
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	95 8b       	std	Z+21, r25	; 0x15
    2034:	84 8b       	std	Z+20, r24	; 0x14
    2036:	86 ec       	ldi	r24, 0xC6	; 198
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	97 8b       	std	Z+23, r25	; 0x17
    203c:	86 8b       	std	Z+22, r24	; 0x16
    203e:	11 8e       	std	Z+25, r1	; 0x19
    2040:	12 8e       	std	Z+26, r1	; 0x1a
    2042:	13 8e       	std	Z+27, r1	; 0x1b
    2044:	14 8e       	std	Z+28, r1	; 0x1c
    2046:	08 95       	ret

00002048 <initVariant>:
    2048:	08 95       	ret

0000204a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    204a:	0e 94 2b 12 	call	0x2456	; 0x2456 <init>

	initVariant();
    204e:	0e 94 24 10 	call	0x2048	; 0x2048 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2052:	0e 94 77 02 	call	0x4ee	; 0x4ee <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2056:	cd e8       	ldi	r28, 0x8D	; 141
    2058:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    205a:	0e 94 11 09 	call	0x1222	; 0x1222 <loop>
		if (serialEventRun) serialEventRun();
    205e:	20 97       	sbiw	r28, 0x00	; 0
    2060:	e1 f3       	breq	.-8      	; 0x205a <main+0x10>
    2062:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z14serialEventRunv>
    2066:	f9 cf       	rjmp	.-14     	; 0x205a <main+0x10>

00002068 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2068:	cf 92       	push	r12
    206a:	df 92       	push	r13
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	6c 01       	movw	r12, r24
    207a:	7a 01       	movw	r14, r20
    207c:	8b 01       	movw	r16, r22
    207e:	c0 e0       	ldi	r28, 0x00	; 0
    2080:	d0 e0       	ldi	r29, 0x00	; 0
    2082:	ce 15       	cp	r28, r14
    2084:	df 05       	cpc	r29, r15
    2086:	81 f0       	breq	.+32     	; 0x20a8 <_ZN5Print5writeEPKhj+0x40>
    2088:	d8 01       	movw	r26, r16
    208a:	6d 91       	ld	r22, X+
    208c:	8d 01       	movw	r16, r26
    208e:	d6 01       	movw	r26, r12
    2090:	ed 91       	ld	r30, X+
    2092:	fc 91       	ld	r31, X
    2094:	01 90       	ld	r0, Z+
    2096:	f0 81       	ld	r31, Z
    2098:	e0 2d       	mov	r30, r0
    209a:	c6 01       	movw	r24, r12
    209c:	09 95       	icall
    209e:	89 2b       	or	r24, r25
    20a0:	11 f0       	breq	.+4      	; 0x20a6 <_ZN5Print5writeEPKhj+0x3e>
    20a2:	21 96       	adiw	r28, 0x01	; 1
    20a4:	ee cf       	rjmp	.-36     	; 0x2082 <_ZN5Print5writeEPKhj+0x1a>
    20a6:	7e 01       	movw	r14, r28
    20a8:	c7 01       	movw	r24, r14
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	df 90       	pop	r13
    20b8:	cf 90       	pop	r12
    20ba:	08 95       	ret

000020bc <_ZN5Print5writeEPKc>:
    20bc:	61 15       	cp	r22, r1
    20be:	71 05       	cpc	r23, r1
    20c0:	79 f0       	breq	.+30     	; 0x20e0 <_ZN5Print5writeEPKc+0x24>
    20c2:	fb 01       	movw	r30, r22
    20c4:	01 90       	ld	r0, Z+
    20c6:	00 20       	and	r0, r0
    20c8:	e9 f7       	brne	.-6      	; 0x20c4 <_ZN5Print5writeEPKc+0x8>
    20ca:	31 97       	sbiw	r30, 0x01	; 1
    20cc:	af 01       	movw	r20, r30
    20ce:	46 1b       	sub	r20, r22
    20d0:	57 0b       	sbc	r21, r23
    20d2:	dc 01       	movw	r26, r24
    20d4:	ed 91       	ld	r30, X+
    20d6:	fc 91       	ld	r31, X
    20d8:	02 80       	ldd	r0, Z+2	; 0x02
    20da:	f3 81       	ldd	r31, Z+3	; 0x03
    20dc:	e0 2d       	mov	r30, r0
    20de:	09 94       	ijmp
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	08 95       	ret

000020e6 <_ZN5Print5printERK6String>:
    20e6:	db 01       	movw	r26, r22
    20e8:	14 96       	adiw	r26, 0x04	; 4
    20ea:	4d 91       	ld	r20, X+
    20ec:	5c 91       	ld	r21, X
    20ee:	15 97       	sbiw	r26, 0x05	; 5
    20f0:	6d 91       	ld	r22, X+
    20f2:	7c 91       	ld	r23, X
    20f4:	dc 01       	movw	r26, r24
    20f6:	ed 91       	ld	r30, X+
    20f8:	fc 91       	ld	r31, X
    20fa:	02 80       	ldd	r0, Z+2	; 0x02
    20fc:	f3 81       	ldd	r31, Z+3	; 0x03
    20fe:	e0 2d       	mov	r30, r0
    2100:	09 94       	ijmp

00002102 <_ZN5Print5printEPKc>:
    2102:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <_ZN5Print5writeEPKc>

00002106 <_ZN5Print5printEc>:
    2106:	dc 01       	movw	r26, r24
    2108:	ed 91       	ld	r30, X+
    210a:	fc 91       	ld	r31, X
    210c:	01 90       	ld	r0, Z+
    210e:	f0 81       	ld	r31, Z
    2110:	e0 2d       	mov	r30, r0
    2112:	09 94       	ijmp

00002114 <_ZN5Print7printlnEv>:
    2114:	65 e0       	ldi	r22, 0x05	; 5
    2116:	72 e0       	ldi	r23, 0x02	; 2
    2118:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <_ZN5Print5writeEPKc>

0000211c <_ZN5Print7printlnEPKc>:
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	ec 01       	movw	r28, r24
    2126:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZN5Print5writeEPKc>
    212a:	8c 01       	movw	r16, r24
    212c:	ce 01       	movw	r24, r28
    212e:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN5Print7printlnEv>
    2132:	80 0f       	add	r24, r16
    2134:	91 1f       	adc	r25, r17
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	08 95       	ret

00002140 <_ZN5Print11printNumberEmh>:
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	a1 97       	sbiw	r28, 0x21	; 33
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	7c 01       	movw	r14, r24
    2166:	fa 01       	movw	r30, r20
    2168:	cb 01       	movw	r24, r22
    216a:	19 a2       	std	Y+33, r1	; 0x21
    216c:	22 30       	cpi	r18, 0x02	; 2
    216e:	08 f4       	brcc	.+2      	; 0x2172 <_ZN5Print11printNumberEmh+0x32>
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	8e 01       	movw	r16, r28
    2174:	0f 5d       	subi	r16, 0xDF	; 223
    2176:	1f 4f       	sbci	r17, 0xFF	; 255
    2178:	82 2e       	mov	r8, r18
    217a:	91 2c       	mov	r9, r1
    217c:	a1 2c       	mov	r10, r1
    217e:	b1 2c       	mov	r11, r1
    2180:	bf 01       	movw	r22, r30
    2182:	a5 01       	movw	r20, r10
    2184:	94 01       	movw	r18, r8
    2186:	0e 94 a1 21 	call	0x4342	; 0x4342 <__udivmodsi4>
    218a:	f9 01       	movw	r30, r18
    218c:	ca 01       	movw	r24, r20
    218e:	01 50       	subi	r16, 0x01	; 1
    2190:	11 09       	sbc	r17, r1
    2192:	6a 30       	cpi	r22, 0x0A	; 10
    2194:	10 f4       	brcc	.+4      	; 0x219a <_ZN5Print11printNumberEmh+0x5a>
    2196:	60 5d       	subi	r22, 0xD0	; 208
    2198:	01 c0       	rjmp	.+2      	; 0x219c <_ZN5Print11printNumberEmh+0x5c>
    219a:	69 5c       	subi	r22, 0xC9	; 201
    219c:	d8 01       	movw	r26, r16
    219e:	6c 93       	st	X, r22
    21a0:	23 2b       	or	r18, r19
    21a2:	24 2b       	or	r18, r20
    21a4:	25 2b       	or	r18, r21
    21a6:	61 f7       	brne	.-40     	; 0x2180 <_ZN5Print11printNumberEmh+0x40>
    21a8:	b8 01       	movw	r22, r16
    21aa:	c7 01       	movw	r24, r14
    21ac:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZN5Print5writeEPKc>
    21b0:	a1 96       	adiw	r28, 0x21	; 33
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	bf 90       	pop	r11
    21ca:	af 90       	pop	r10
    21cc:	9f 90       	pop	r9
    21ce:	8f 90       	pop	r8
    21d0:	08 95       	ret

000021d2 <_ZN5Print5printEmi>:
    21d2:	21 15       	cp	r18, r1
    21d4:	31 05       	cpc	r19, r1
    21d6:	41 f4       	brne	.+16     	; 0x21e8 <_ZN5Print5printEmi+0x16>
    21d8:	dc 01       	movw	r26, r24
    21da:	ed 91       	ld	r30, X+
    21dc:	fc 91       	ld	r31, X
    21de:	01 90       	ld	r0, Z+
    21e0:	f0 81       	ld	r31, Z
    21e2:	e0 2d       	mov	r30, r0
    21e4:	64 2f       	mov	r22, r20
    21e6:	09 94       	ijmp
    21e8:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <_ZN5Print11printNumberEmh>

000021ec <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    21f6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_ZN5Print5printEmi>
    21fa:	8c 01       	movw	r16, r24
  n += println();
    21fc:	ce 01       	movw	r24, r28
    21fe:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN5Print7printlnEv>
  return n;
}
    2202:	80 0f       	add	r24, r16
    2204:	91 1f       	adc	r25, r17
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	08 95       	ret

00002210 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
  if (base == 0) {
    2220:	21 15       	cp	r18, r1
    2222:	31 05       	cpc	r19, r1
    2224:	81 f4       	brne	.+32     	; 0x2246 <_ZN5Print5printEli+0x36>
    return write(n);
    2226:	dc 01       	movw	r26, r24
    2228:	ed 91       	ld	r30, X+
    222a:	fc 91       	ld	r31, X
    222c:	01 90       	ld	r0, Z+
    222e:	f0 81       	ld	r31, Z
    2230:	e0 2d       	mov	r30, r0
    2232:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	df 90       	pop	r13
    2242:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2244:	09 94       	ijmp
  } else if (base == 10) {
    2246:	2a 30       	cpi	r18, 0x0A	; 10
    2248:	31 05       	cpc	r19, r1
    224a:	01 f5       	brne	.+64     	; 0x228c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    224c:	77 ff       	sbrs	r23, 7
    224e:	1d c0       	rjmp	.+58     	; 0x228a <_ZN5Print5printEli+0x7a>
    2250:	6a 01       	movw	r12, r20
    2252:	7b 01       	movw	r14, r22
    2254:	ec 01       	movw	r28, r24
      int t = print('-');
    2256:	6d e2       	ldi	r22, 0x2D	; 45
    2258:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN5Print5printEc>
    225c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    225e:	44 27       	eor	r20, r20
    2260:	55 27       	eor	r21, r21
    2262:	ba 01       	movw	r22, r20
    2264:	4c 19       	sub	r20, r12
    2266:	5d 09       	sbc	r21, r13
    2268:	6e 09       	sbc	r22, r14
    226a:	7f 09       	sbc	r23, r15
    226c:	2a e0       	ldi	r18, 0x0A	; 10
    226e:	ce 01       	movw	r24, r28
    2270:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN5Print11printNumberEmh>
    2274:	80 0f       	add	r24, r16
    2276:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    228a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    229c:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <_ZN5Print11printNumberEmh>

000022a0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    22a0:	9a 01       	movw	r18, r20
  return print((long) n, base);
    22a2:	ab 01       	movw	r20, r22
    22a4:	77 0f       	add	r23, r23
    22a6:	66 0b       	sbc	r22, r22
    22a8:	77 0b       	sbc	r23, r23
    22aa:	0c 94 08 11 	jmp	0x2210	; 0x2210 <_ZN5Print5printEli>

000022ae <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    22b8:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_ZN5Print5printEii>
    22bc:	8c 01       	movw	r16, r24
  n += println();
    22be:	ce 01       	movw	r24, r28
    22c0:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN5Print7printlnEv>
  return n;
}
    22c4:	80 0f       	add	r24, r16
    22c6:	91 1f       	adc	r25, r17
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	08 95       	ret

000022d2 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    22d2:	1f 92       	push	r1
    22d4:	0f 92       	push	r0
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	0f 92       	push	r0
    22da:	11 24       	eor	r1, r1
    22dc:	2f 93       	push	r18
    22de:	3f 93       	push	r19
    22e0:	8f 93       	push	r24
    22e2:	9f 93       	push	r25
    22e4:	af 93       	push	r26
    22e6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    22e8:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <timer0_millis>
    22ec:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <timer0_millis+0x1>
    22f0:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <timer0_millis+0x2>
    22f4:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    22f8:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    22fc:	23 e0       	ldi	r18, 0x03	; 3
    22fe:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2300:	2d 37       	cpi	r18, 0x7D	; 125
    2302:	20 f4       	brcc	.+8      	; 0x230c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	a1 1d       	adc	r26, r1
    2308:	b1 1d       	adc	r27, r1
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    230c:	26 e8       	ldi	r18, 0x86	; 134
    230e:	23 0f       	add	r18, r19
		m += 1;
    2310:	02 96       	adiw	r24, 0x02	; 2
    2312:	a1 1d       	adc	r26, r1
    2314:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2316:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <timer0_fract>
	timer0_millis = m;
    231a:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <timer0_millis>
    231e:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <timer0_millis+0x1>
    2322:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <timer0_millis+0x2>
    2326:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <timer0_millis+0x3>
	timer0_overflow_count++;
    232a:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <timer0_overflow_count>
    232e:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <timer0_overflow_count+0x1>
    2332:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <timer0_overflow_count+0x2>
    2336:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <timer0_overflow_count+0x3>
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	a1 1d       	adc	r26, r1
    233e:	b1 1d       	adc	r27, r1
    2340:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <timer0_overflow_count>
    2344:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <timer0_overflow_count+0x1>
    2348:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <timer0_overflow_count+0x2>
    234c:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <timer0_overflow_count+0x3>
}
    2350:	bf 91       	pop	r27
    2352:	af 91       	pop	r26
    2354:	9f 91       	pop	r25
    2356:	8f 91       	pop	r24
    2358:	3f 91       	pop	r19
    235a:	2f 91       	pop	r18
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2366:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2368:	f8 94       	cli
	m = timer0_millis;
    236a:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <timer0_millis>
    236e:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <timer0_millis+0x1>
    2372:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <timer0_millis+0x2>
    2376:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <timer0_millis+0x3>
	SREG = oldSREG;
    237a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    237c:	08 95       	ret

0000237e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    237e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2380:	f8 94       	cli
	m = timer0_overflow_count;
    2382:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <timer0_overflow_count>
    2386:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <timer0_overflow_count+0x1>
    238a:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <timer0_overflow_count+0x2>
    238e:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2392:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2394:	a8 9b       	sbis	0x15, 0	; 21
    2396:	05 c0       	rjmp	.+10     	; 0x23a2 <micros+0x24>
    2398:	2f 3f       	cpi	r18, 0xFF	; 255
    239a:	19 f0       	breq	.+6      	; 0x23a2 <micros+0x24>
		m++;
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	a1 1d       	adc	r26, r1
    23a0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    23a2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    23a4:	ba 2f       	mov	r27, r26
    23a6:	a9 2f       	mov	r26, r25
    23a8:	98 2f       	mov	r25, r24
    23aa:	88 27       	eor	r24, r24
    23ac:	82 0f       	add	r24, r18
    23ae:	91 1d       	adc	r25, r1
    23b0:	a1 1d       	adc	r26, r1
    23b2:	b1 1d       	adc	r27, r1
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	42 e0       	ldi	r20, 0x02	; 2
    23ba:	66 0f       	add	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	4a 95       	dec	r20
    23c4:	d1 f7       	brne	.-12     	; 0x23ba <micros+0x3c>
}
    23c6:	08 95       	ret

000023c8 <delay>:

void delay(unsigned long ms)
{
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	af 92       	push	r10
    23ce:	bf 92       	push	r11
    23d0:	cf 92       	push	r12
    23d2:	df 92       	push	r13
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	6b 01       	movw	r12, r22
    23da:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    23dc:	0e 94 bf 11 	call	0x237e	; 0x237e <micros>
    23e0:	4b 01       	movw	r8, r22
    23e2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    23e4:	c1 14       	cp	r12, r1
    23e6:	d1 04       	cpc	r13, r1
    23e8:	e1 04       	cpc	r14, r1
    23ea:	f1 04       	cpc	r15, r1
    23ec:	01 f1       	breq	.+64     	; 0x242e <delay+0x66>
		yield();
    23ee:	0e 94 90 21 	call	0x4320	; 0x4320 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    23f2:	0e 94 bf 11 	call	0x237e	; 0x237e <micros>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	88 19       	sub	r24, r8
    23fc:	99 09       	sbc	r25, r9
    23fe:	aa 09       	sbc	r26, r10
    2400:	bb 09       	sbc	r27, r11
    2402:	88 3e       	cpi	r24, 0xE8	; 232
    2404:	93 40       	sbci	r25, 0x03	; 3
    2406:	a1 05       	cpc	r26, r1
    2408:	b1 05       	cpc	r27, r1
    240a:	60 f3       	brcs	.-40     	; 0x23e4 <delay+0x1c>
			ms--;
    240c:	21 e0       	ldi	r18, 0x01	; 1
    240e:	c2 1a       	sub	r12, r18
    2410:	d1 08       	sbc	r13, r1
    2412:	e1 08       	sbc	r14, r1
    2414:	f1 08       	sbc	r15, r1
			start += 1000;
    2416:	88 ee       	ldi	r24, 0xE8	; 232
    2418:	88 0e       	add	r8, r24
    241a:	83 e0       	ldi	r24, 0x03	; 3
    241c:	98 1e       	adc	r9, r24
    241e:	a1 1c       	adc	r10, r1
    2420:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2422:	c1 14       	cp	r12, r1
    2424:	d1 04       	cpc	r13, r1
    2426:	e1 04       	cpc	r14, r1
    2428:	f1 04       	cpc	r15, r1
    242a:	19 f7       	brne	.-58     	; 0x23f2 <delay+0x2a>
    242c:	db cf       	rjmp	.-74     	; 0x23e4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	bf 90       	pop	r11
    2438:	af 90       	pop	r10
    243a:	9f 90       	pop	r9
    243c:	8f 90       	pop	r8
    243e:	08 95       	ret

00002440 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	91 05       	cpc	r25, r1
    2444:	38 f0       	brcs	.+14     	; 0x2454 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    244e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <delayMicroseconds+0x10>
    2454:	08 95       	ret

00002456 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2456:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2458:	84 b5       	in	r24, 0x24	; 36
    245a:	82 60       	ori	r24, 0x02	; 2
    245c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    245e:	84 b5       	in	r24, 0x24	; 36
    2460:	81 60       	ori	r24, 0x01	; 1
    2462:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2464:	85 b5       	in	r24, 0x25	; 37
    2466:	82 60       	ori	r24, 0x02	; 2
    2468:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    246a:	85 b5       	in	r24, 0x25	; 37
    246c:	81 60       	ori	r24, 0x01	; 1
    246e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2470:	ee e6       	ldi	r30, 0x6E	; 110
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	81 60       	ori	r24, 0x01	; 1
    2478:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    247a:	e1 e8       	ldi	r30, 0x81	; 129
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2480:	80 81       	ld	r24, Z
    2482:	82 60       	ori	r24, 0x02	; 2
    2484:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2486:	80 81       	ld	r24, Z
    2488:	81 60       	ori	r24, 0x01	; 1
    248a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    248c:	e0 e8       	ldi	r30, 0x80	; 128
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	81 60       	ori	r24, 0x01	; 1
    2494:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2496:	e1 eb       	ldi	r30, 0xB1	; 177
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	84 60       	ori	r24, 0x04	; 4
    249e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    24a0:	e0 eb       	ldi	r30, 0xB0	; 176
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	81 60       	ori	r24, 0x01	; 1
    24a8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    24aa:	ea e7       	ldi	r30, 0x7A	; 122
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	84 60       	ori	r24, 0x04	; 4
    24b2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    24b4:	80 81       	ld	r24, Z
    24b6:	82 60       	ori	r24, 0x02	; 2
    24b8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    24ba:	80 81       	ld	r24, Z
    24bc:	81 60       	ori	r24, 0x01	; 1
    24be:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    24c0:	80 81       	ld	r24, Z
    24c2:	80 68       	ori	r24, 0x80	; 128
    24c4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    24c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    24ca:	08 95       	ret

000024cc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    24cc:	83 30       	cpi	r24, 0x03	; 3
    24ce:	81 f0       	breq	.+32     	; 0x24f0 <turnOffPWM+0x24>
    24d0:	28 f4       	brcc	.+10     	; 0x24dc <turnOffPWM+0x10>
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	99 f0       	breq	.+38     	; 0x24fc <turnOffPWM+0x30>
    24d6:	82 30       	cpi	r24, 0x02	; 2
    24d8:	a1 f0       	breq	.+40     	; 0x2502 <turnOffPWM+0x36>
    24da:	08 95       	ret
    24dc:	87 30       	cpi	r24, 0x07	; 7
    24de:	a9 f0       	breq	.+42     	; 0x250a <turnOffPWM+0x3e>
    24e0:	88 30       	cpi	r24, 0x08	; 8
    24e2:	b9 f0       	breq	.+46     	; 0x2512 <turnOffPWM+0x46>
    24e4:	84 30       	cpi	r24, 0x04	; 4
    24e6:	d1 f4       	brne	.+52     	; 0x251c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24ec:	8f 7d       	andi	r24, 0xDF	; 223
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    24f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24f4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24fa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    24fc:	84 b5       	in	r24, 0x24	; 36
    24fe:	8f 77       	andi	r24, 0x7F	; 127
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2502:	84 b5       	in	r24, 0x24	; 36
    2504:	8f 7d       	andi	r24, 0xDF	; 223
    2506:	84 bd       	out	0x24, r24	; 36
    2508:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    250a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    250e:	8f 77       	andi	r24, 0x7F	; 127
    2510:	03 c0       	rjmp	.+6      	; 0x2518 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2512:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2516:	8f 7d       	andi	r24, 0xDF	; 223
    2518:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    251c:	08 95       	ret

0000251e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	fc 01       	movw	r30, r24
    2526:	e8 5d       	subi	r30, 0xD8	; 216
    2528:	fe 4f       	sbci	r31, 0xFE	; 254
    252a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    252c:	fc 01       	movw	r30, r24
    252e:	e4 5c       	subi	r30, 0xC4	; 196
    2530:	fe 4f       	sbci	r31, 0xFE	; 254
    2532:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2534:	88 23       	and	r24, r24
    2536:	61 f1       	breq	.+88     	; 0x2590 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	fc 01       	movw	r30, r24
    2540:	ec 59       	subi	r30, 0x9C	; 156
    2542:	fe 4f       	sbci	r31, 0xFE	; 254
    2544:	c5 91       	lpm	r28, Z+
    2546:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2548:	fc 01       	movw	r30, r24
    254a:	e6 5a       	subi	r30, 0xA6	; 166
    254c:	fe 4f       	sbci	r31, 0xFE	; 254
    254e:	a5 91       	lpm	r26, Z+
    2550:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2552:	61 11       	cpse	r22, r1
    2554:	09 c0       	rjmp	.+18     	; 0x2568 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2556:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2558:	f8 94       	cli
		*reg &= ~bit;
    255a:	88 81       	ld	r24, Y
    255c:	20 95       	com	r18
    255e:	82 23       	and	r24, r18
    2560:	88 83       	st	Y, r24
		*out &= ~bit;
    2562:	ec 91       	ld	r30, X
    2564:	2e 23       	and	r18, r30
    2566:	0b c0       	rjmp	.+22     	; 0x257e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2568:	62 30       	cpi	r22, 0x02	; 2
    256a:	61 f4       	brne	.+24     	; 0x2584 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    256c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    256e:	f8 94       	cli
		*reg &= ~bit;
    2570:	88 81       	ld	r24, Y
    2572:	32 2f       	mov	r19, r18
    2574:	30 95       	com	r19
    2576:	83 23       	and	r24, r19
    2578:	88 83       	st	Y, r24
		*out |= bit;
    257a:	ec 91       	ld	r30, X
    257c:	2e 2b       	or	r18, r30
    257e:	2c 93       	st	X, r18
		SREG = oldSREG;
    2580:	9f bf       	out	0x3f, r25	; 63
    2582:	06 c0       	rjmp	.+12     	; 0x2590 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2584:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2586:	f8 94       	cli
		*reg |= bit;
    2588:	e8 81       	ld	r30, Y
    258a:	2e 2b       	or	r18, r30
    258c:	28 83       	st	Y, r18
		SREG = oldSREG;
    258e:	8f bf       	out	0x3f, r24	; 63
	}
}
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	08 95       	ret

00002596 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2596:	1f 93       	push	r17
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	f9 01       	movw	r30, r18
    25a2:	ec 5e       	subi	r30, 0xEC	; 236
    25a4:	fe 4f       	sbci	r31, 0xFE	; 254
    25a6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    25a8:	f9 01       	movw	r30, r18
    25aa:	e8 5d       	subi	r30, 0xD8	; 216
    25ac:	fe 4f       	sbci	r31, 0xFE	; 254
    25ae:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    25b0:	f9 01       	movw	r30, r18
    25b2:	e4 5c       	subi	r30, 0xC4	; 196
    25b4:	fe 4f       	sbci	r31, 0xFE	; 254
    25b6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    25b8:	cc 23       	and	r28, r28
    25ba:	c1 f0       	breq	.+48     	; 0x25ec <digitalWrite+0x56>
    25bc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    25be:	81 11       	cpse	r24, r1
    25c0:	0e 94 66 12 	call	0x24cc	; 0x24cc <turnOffPWM>

	out = portOutputRegister(port);
    25c4:	ec 2f       	mov	r30, r28
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	e6 5a       	subi	r30, 0xA6	; 166
    25ce:	fe 4f       	sbci	r31, 0xFE	; 254
    25d0:	a5 91       	lpm	r26, Z+
    25d2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    25d4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    25d6:	f8 94       	cli

	if (val == LOW) {
    25d8:	11 11       	cpse	r17, r1
    25da:	04 c0       	rjmp	.+8      	; 0x25e4 <digitalWrite+0x4e>
		*out &= ~bit;
    25dc:	8c 91       	ld	r24, X
    25de:	d0 95       	com	r29
    25e0:	d8 23       	and	r29, r24
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    25e4:	ec 91       	ld	r30, X
    25e6:	de 2b       	or	r29, r30
    25e8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    25ea:	9f bf       	out	0x3f, r25	; 63
}
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	08 95       	ret

000025f4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	f9 01       	movw	r30, r18
    25fe:	ec 5e       	subi	r30, 0xEC	; 236
    2600:	fe 4f       	sbci	r31, 0xFE	; 254
    2602:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2604:	f9 01       	movw	r30, r18
    2606:	e8 5d       	subi	r30, 0xD8	; 216
    2608:	fe 4f       	sbci	r31, 0xFE	; 254
    260a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    260c:	f9 01       	movw	r30, r18
    260e:	e4 5c       	subi	r30, 0xC4	; 196
    2610:	fe 4f       	sbci	r31, 0xFE	; 254
    2612:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2614:	cc 23       	and	r28, r28
    2616:	91 f0       	breq	.+36     	; 0x263c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2618:	81 11       	cpse	r24, r1
    261a:	0e 94 66 12 	call	0x24cc	; 0x24cc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    261e:	ec 2f       	mov	r30, r28
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	ee 0f       	add	r30, r30
    2624:	ff 1f       	adc	r31, r31
    2626:	e0 5b       	subi	r30, 0xB0	; 176
    2628:	fe 4f       	sbci	r31, 0xFE	; 254
    262a:	a5 91       	lpm	r26, Z+
    262c:	b4 91       	lpm	r27, Z
    262e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2630:	ed 23       	and	r30, r29
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	21 f4       	brne	.+8      	; 0x2640 <digitalRead+0x4c>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <digitalRead+0x4c>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	08 95       	ret

00002646 <_ZNK6String14StringIfHelperEv>:
StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
	return a;
}
    2646:	08 95       	ret

00002648 <_ZN6StringD1Ev>:
    2648:	fc 01       	movw	r30, r24
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <free>

00002652 <_ZN6String10invalidateEv>:
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
    2656:	ec 01       	movw	r28, r24
    2658:	88 81       	ld	r24, Y
    265a:	99 81       	ldd	r25, Y+1	; 0x01
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	11 f0       	breq	.+4      	; 0x2664 <_ZN6String10invalidateEv+0x12>
    2660:	0e 94 b2 22 	call	0x4564	; 0x4564 <free>
    2664:	19 82       	std	Y+1, r1	; 0x01
    2666:	18 82       	st	Y, r1
    2668:	1d 82       	std	Y+5, r1	; 0x05
    266a:	1c 82       	std	Y+4, r1	; 0x04
    266c:	1b 82       	std	Y+3, r1	; 0x03
    266e:	1a 82       	std	Y+2, r1	; 0x02
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <_ZN6String12changeBufferEj>:
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	ec 01       	movw	r28, r24
    2680:	8b 01       	movw	r16, r22
    2682:	6f 5f       	subi	r22, 0xFF	; 255
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	88 81       	ld	r24, Y
    2688:	99 81       	ldd	r25, Y+1	; 0x01
    268a:	0e 94 3b 23 	call	0x4676	; 0x4676 <realloc>
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	31 f0       	breq	.+12     	; 0x269e <_ZN6String12changeBufferEj+0x28>
    2692:	99 83       	std	Y+1, r25	; 0x01
    2694:	88 83       	st	Y, r24
    2696:	1b 83       	std	Y+3, r17	; 0x03
    2698:	0a 83       	std	Y+2, r16	; 0x02
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	01 c0       	rjmp	.+2      	; 0x26a0 <_ZN6String12changeBufferEj+0x2a>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <_ZN6String7reserveEj>:
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	ec 01       	movw	r28, r24
    26b0:	88 81       	ld	r24, Y
    26b2:	99 81       	ldd	r25, Y+1	; 0x01
    26b4:	89 2b       	or	r24, r25
    26b6:	29 f0       	breq	.+10     	; 0x26c2 <_ZN6String7reserveEj+0x18>
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	9b 81       	ldd	r25, Y+3	; 0x03
    26bc:	86 17       	cp	r24, r22
    26be:	97 07       	cpc	r25, r23
    26c0:	60 f4       	brcc	.+24     	; 0x26da <_ZN6String7reserveEj+0x30>
    26c2:	ce 01       	movw	r24, r28
    26c4:	0e 94 3b 13 	call	0x2676	; 0x2676 <_ZN6String12changeBufferEj>
    26c8:	88 23       	and	r24, r24
    26ca:	41 f0       	breq	.+16     	; 0x26dc <_ZN6String7reserveEj+0x32>
    26cc:	8c 81       	ldd	r24, Y+4	; 0x04
    26ce:	9d 81       	ldd	r25, Y+5	; 0x05
    26d0:	89 2b       	or	r24, r25
    26d2:	19 f4       	brne	.+6      	; 0x26da <_ZN6String7reserveEj+0x30>
    26d4:	e8 81       	ld	r30, Y
    26d6:	f9 81       	ldd	r31, Y+1	; 0x01
    26d8:	10 82       	st	Z, r1
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	08 95       	ret

000026e2 <_ZN6String4copyEPKcj>:
    26e2:	ef 92       	push	r14
    26e4:	ff 92       	push	r15
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	ec 01       	movw	r28, r24
    26f0:	7b 01       	movw	r14, r22
    26f2:	8a 01       	movw	r16, r20
    26f4:	ba 01       	movw	r22, r20
    26f6:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN6String7reserveEj>
    26fa:	81 11       	cpse	r24, r1
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <_ZN6String4copyEPKcj+0x24>
    26fe:	ce 01       	movw	r24, r28
    2700:	0e 94 29 13 	call	0x2652	; 0x2652 <_ZN6String10invalidateEv>
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <_ZN6String4copyEPKcj+0x32>
    2706:	1d 83       	std	Y+5, r17	; 0x05
    2708:	0c 83       	std	Y+4, r16	; 0x04
    270a:	b7 01       	movw	r22, r14
    270c:	88 81       	ld	r24, Y
    270e:	99 81       	ldd	r25, Y+1	; 0x01
    2710:	0e 94 0a 24 	call	0x4814	; 0x4814 <strcpy>
    2714:	ce 01       	movw	r24, r28
    2716:	df 91       	pop	r29
    2718:	cf 91       	pop	r28
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	ff 90       	pop	r15
    2720:	ef 90       	pop	r14
    2722:	08 95       	ret

00002724 <_ZN6StringC1EPKc>:
    2724:	fc 01       	movw	r30, r24
    2726:	11 82       	std	Z+1, r1	; 0x01
    2728:	10 82       	st	Z, r1
    272a:	13 82       	std	Z+3, r1	; 0x03
    272c:	12 82       	std	Z+2, r1	; 0x02
    272e:	15 82       	std	Z+5, r1	; 0x05
    2730:	14 82       	std	Z+4, r1	; 0x04
    2732:	61 15       	cp	r22, r1
    2734:	71 05       	cpc	r23, r1
    2736:	51 f0       	breq	.+20     	; 0x274c <_ZN6StringC1EPKc+0x28>
    2738:	fb 01       	movw	r30, r22
    273a:	01 90       	ld	r0, Z+
    273c:	00 20       	and	r0, r0
    273e:	e9 f7       	brne	.-6      	; 0x273a <_ZN6StringC1EPKc+0x16>
    2740:	31 97       	sbiw	r30, 0x01	; 1
    2742:	af 01       	movw	r20, r30
    2744:	46 1b       	sub	r20, r22
    2746:	57 0b       	sbc	r21, r23
    2748:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <_ZN6String4copyEPKcj>
    274c:	08 95       	ret

0000274e <_ZN6String4moveERS_>:
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	8c 01       	movw	r16, r24
    2758:	eb 01       	movw	r28, r22
    275a:	fc 01       	movw	r30, r24
    275c:	80 81       	ld	r24, Z
    275e:	91 81       	ldd	r25, Z+1	; 0x01
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	d1 f0       	breq	.+52     	; 0x2798 <_ZN6String4moveERS_+0x4a>
    2764:	68 81       	ld	r22, Y
    2766:	79 81       	ldd	r23, Y+1	; 0x01
    2768:	61 15       	cp	r22, r1
    276a:	71 05       	cpc	r23, r1
    276c:	99 f0       	breq	.+38     	; 0x2794 <_ZN6String4moveERS_+0x46>
    276e:	23 e2       	ldi	r18, 0x23	; 35
    2770:	33 e1       	ldi	r19, 0x13	; 19
    2772:	23 2b       	or	r18, r19
    2774:	79 f0       	breq	.+30     	; 0x2794 <_ZN6String4moveERS_+0x46>
    2776:	42 81       	ldd	r20, Z+2	; 0x02
    2778:	53 81       	ldd	r21, Z+3	; 0x03
    277a:	2c 81       	ldd	r18, Y+4	; 0x04
    277c:	3d 81       	ldd	r19, Y+5	; 0x05
    277e:	42 17       	cp	r20, r18
    2780:	53 07       	cpc	r21, r19
    2782:	40 f0       	brcs	.+16     	; 0x2794 <_ZN6String4moveERS_+0x46>
    2784:	0e 94 0a 24 	call	0x4814	; 0x4814 <strcpy>
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	9d 81       	ldd	r25, Y+5	; 0x05
    278c:	f8 01       	movw	r30, r16
    278e:	95 83       	std	Z+5, r25	; 0x05
    2790:	84 83       	std	Z+4, r24	; 0x04
    2792:	13 c0       	rjmp	.+38     	; 0x27ba <_ZN6String4moveERS_+0x6c>
    2794:	0e 94 b2 22 	call	0x4564	; 0x4564 <free>
    2798:	88 81       	ld	r24, Y
    279a:	99 81       	ldd	r25, Y+1	; 0x01
    279c:	f8 01       	movw	r30, r16
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	9b 81       	ldd	r25, Y+3	; 0x03
    27a6:	93 83       	std	Z+3, r25	; 0x03
    27a8:	82 83       	std	Z+2, r24	; 0x02
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	95 83       	std	Z+5, r25	; 0x05
    27b0:	84 83       	std	Z+4, r24	; 0x04
    27b2:	19 82       	std	Y+1, r1	; 0x01
    27b4:	18 82       	st	Y, r1
    27b6:	1b 82       	std	Y+3, r1	; 0x03
    27b8:	1a 82       	std	Y+2, r1	; 0x02
    27ba:	1d 82       	std	Y+5, r1	; 0x05
    27bc:	1c 82       	std	Y+4, r1	; 0x04
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	08 95       	ret

000027c8 <_ZN6StringaSERKS_>:
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	ec 01       	movw	r28, r24
    27ce:	fb 01       	movw	r30, r22
    27d0:	86 17       	cp	r24, r22
    27d2:	97 07       	cpc	r25, r23
    27d4:	61 f0       	breq	.+24     	; 0x27ee <_ZN6StringaSERKS_+0x26>
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	61 15       	cp	r22, r1
    27dc:	71 05       	cpc	r23, r1
    27de:	29 f0       	breq	.+10     	; 0x27ea <_ZN6StringaSERKS_+0x22>
    27e0:	44 81       	ldd	r20, Z+4	; 0x04
    27e2:	55 81       	ldd	r21, Z+5	; 0x05
    27e4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN6String4copyEPKcj>
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <_ZN6StringaSERKS_+0x26>
    27ea:	0e 94 29 13 	call	0x2652	; 0x2652 <_ZN6String10invalidateEv>
    27ee:	ce 01       	movw	r24, r28
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <_ZN6StringC1ERKS_>:
    27f6:	fc 01       	movw	r30, r24
    27f8:	11 82       	std	Z+1, r1	; 0x01
    27fa:	10 82       	st	Z, r1
    27fc:	13 82       	std	Z+3, r1	; 0x03
    27fe:	12 82       	std	Z+2, r1	; 0x02
    2800:	15 82       	std	Z+5, r1	; 0x05
    2802:	14 82       	std	Z+4, r1	; 0x04
    2804:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <_ZN6StringaSERKS_>

00002808 <_ZN6StringaSEOS_>:
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	ec 01       	movw	r28, r24
    280e:	86 17       	cp	r24, r22
    2810:	97 07       	cpc	r25, r23
    2812:	11 f0       	breq	.+4      	; 0x2818 <_ZN6StringaSEOS_+0x10>
    2814:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN6String4moveERS_>
    2818:	ce 01       	movw	r24, r28
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	08 95       	ret

00002820 <_ZN6String6concatEPKcj>:
    2820:	ef 92       	push	r14
    2822:	ff 92       	push	r15
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	61 15       	cp	r22, r1
    282e:	71 05       	cpc	r23, r1
    2830:	11 f4       	brne	.+4      	; 0x2836 <_ZN6String6concatEPKcj+0x16>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	1c c0       	rjmp	.+56     	; 0x286e <_ZN6String6concatEPKcj+0x4e>
    2836:	41 15       	cp	r20, r1
    2838:	51 05       	cpc	r21, r1
    283a:	c1 f0       	breq	.+48     	; 0x286c <_ZN6String6concatEPKcj+0x4c>
    283c:	7b 01       	movw	r14, r22
    283e:	ec 01       	movw	r28, r24
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	9d 81       	ldd	r25, Y+5	; 0x05
    2844:	8a 01       	movw	r16, r20
    2846:	08 0f       	add	r16, r24
    2848:	19 1f       	adc	r17, r25
    284a:	b8 01       	movw	r22, r16
    284c:	ce 01       	movw	r24, r28
    284e:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN6String7reserveEj>
    2852:	88 23       	and	r24, r24
    2854:	71 f3       	breq	.-36     	; 0x2832 <_ZN6String6concatEPKcj+0x12>
    2856:	28 81       	ld	r18, Y
    2858:	39 81       	ldd	r19, Y+1	; 0x01
    285a:	8c 81       	ldd	r24, Y+4	; 0x04
    285c:	9d 81       	ldd	r25, Y+5	; 0x05
    285e:	b7 01       	movw	r22, r14
    2860:	82 0f       	add	r24, r18
    2862:	93 1f       	adc	r25, r19
    2864:	0e 94 0a 24 	call	0x4814	; 0x4814 <strcpy>
    2868:	1d 83       	std	Y+5, r17	; 0x05
    286a:	0c 83       	std	Y+4, r16	; 0x04
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	ff 90       	pop	r15
    2878:	ef 90       	pop	r14
    287a:	08 95       	ret

0000287c <_ZN6String6concatEc>:
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	00 d0       	rcall	.+0      	; 0x2882 <_ZN6String6concatEc+0x6>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	69 83       	std	Y+1, r22	; 0x01
    2888:	1a 82       	std	Y+2, r1	; 0x02
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	be 01       	movw	r22, r28
    2890:	6f 5f       	subi	r22, 0xFF	; 255
    2892:	7f 4f       	sbci	r23, 0xFF	; 255
    2894:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN6String6concatEPKcj>
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	08 95       	ret

000028a2 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    28a8:	0e 94 3e 14 	call	0x287c	; 0x287c <_ZN6String6concatEc>
    28ac:	81 11       	cpse	r24, r1
    28ae:	03 c0       	rjmp	.+6      	; 0x28b6 <_ZplRK15StringSumHelperc+0x14>
    28b0:	ce 01       	movw	r24, r28
    28b2:	0e 94 29 13 	call	0x2652	; 0x2652 <_ZN6String10invalidateEv>
	return a;
}
    28b6:	ce 01       	movw	r24, r28
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	08 95       	ret

000028be <_ZN6IRrecvC1Ei>:
// Return if receiving new IR signals
// 
bool  IRrecv::isIdle ( ) 
{
 return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}
    28be:	e2 e1       	ldi	r30, 0x12	; 18
    28c0:	f3 e0       	ldi	r31, 0x03	; 3
    28c2:	61 83       	std	Z+1, r22	; 0x01
    28c4:	13 82       	std	Z+3, r1	; 0x03
    28c6:	08 95       	ret

000028c8 <_ZN6IRrecv10enableIRInEv>:
    28c8:	f8 94       	cli
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    28d0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    28d4:	94 e6       	ldi	r25, 0x64	; 100
    28d6:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    28da:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    28de:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    28e2:	78 94       	sei
    28e4:	e2 e1       	ldi	r30, 0x12	; 18
    28e6:	f3 e0       	ldi	r31, 0x03	; 3
    28e8:	80 83       	st	Z, r24
    28ea:	14 82       	std	Z+4, r1	; 0x04
    28ec:	81 81       	ldd	r24, Z+1	; 0x01
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	0c 94 8f 12 	jmp	0x251e	; 0x251e <pinMode>

000028f4 <_ZN6IRrecv6resumeEv>:
//+=============================================================================
// Restart the ISR state machine
//
void  IRrecv::resume ( )
{
	irparams.rcvstate = STATE_IDLE;
    28f4:	e2 e1       	ldi	r30, 0x12	; 18
    28f6:	f3 e0       	ldi	r31, 0x03	; 3
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	80 83       	st	Z, r24
	irparams.rawlen = 0;
    28fc:	14 82       	std	Z+4, r1	; 0x04
    28fe:	08 95       	ret

00002900 <_ZN6IRrecv7compareEjj>:
// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
//
int  IRrecv::compare (unsigned int oldval,  unsigned int newval)
{
    2900:	8f 92       	push	r8
    2902:	9f 92       	push	r9
    2904:	af 92       	push	r10
    2906:	bf 92       	push	r11
    2908:	cf 92       	push	r12
    290a:	df 92       	push	r13
    290c:	ef 92       	push	r14
    290e:	ff 92       	push	r15
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	eb 01       	movw	r28, r22
	if      (newval < oldval * .8)  return 0 ;
    2916:	ba 01       	movw	r22, r20
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 5f 0b 	call	0x16be	; 0x16be <__floatunsisf>
    2920:	4b 01       	movw	r8, r22
    2922:	5c 01       	movw	r10, r24
    2924:	be 01       	movw	r22, r28
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 5f 0b 	call	0x16be	; 0x16be <__floatunsisf>
    292e:	6b 01       	movw	r12, r22
    2930:	7c 01       	movw	r14, r24
    2932:	2d ec       	ldi	r18, 0xCD	; 205
    2934:	3c ec       	ldi	r19, 0xCC	; 204
    2936:	4c e4       	ldi	r20, 0x4C	; 76
    2938:	5f e3       	ldi	r21, 0x3F	; 63
    293a:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    293e:	9b 01       	movw	r18, r22
    2940:	ac 01       	movw	r20, r24
    2942:	c5 01       	movw	r24, r10
    2944:	b4 01       	movw	r22, r8
    2946:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__cmpsf2>
    294a:	87 fd       	sbrc	r24, 7
    294c:	17 c0       	rjmp	.+46     	; 0x297c <_ZN6IRrecv7compareEjj+0x7c>
	else if (oldval < newval * .8)  return 2 ;
    294e:	2d ec       	ldi	r18, 0xCD	; 205
    2950:	3c ec       	ldi	r19, 0xCC	; 204
    2952:	4c e4       	ldi	r20, 0x4C	; 76
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	c5 01       	movw	r24, r10
    2958:	b4 01       	movw	r22, r8
    295a:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	c7 01       	movw	r24, r14
    2964:	b6 01       	movw	r22, r12
    2966:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__cmpsf2>
	else                            return 1 ;
    296a:	08 2e       	mov	r0, r24
    296c:	00 0c       	add	r0, r0
    296e:	99 0b       	sbc	r25, r25
    2970:	88 27       	eor	r24, r24
    2972:	99 0f       	add	r25, r25
    2974:	88 1f       	adc	r24, r24
    2976:	99 27       	eor	r25, r25
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <_ZN6IRrecv7compareEjj+0x80>
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
//
int  IRrecv::compare (unsigned int oldval,  unsigned int newval)
{
	if      (newval < oldval * .8)  return 0 ;
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
	else if (oldval < newval * .8)  return 2 ;
	else                            return 1 ;
}
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	9f 90       	pop	r9
    2992:	8f 90       	pop	r8
    2994:	08 95       	ret

00002996 <_ZN6IRrecv10decodeHashEP14decode_results>:
//
#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

long  IRrecv::decodeHash (decode_results *results)
{
    2996:	8f 92       	push	r8
    2998:	9f 92       	push	r9
    299a:	af 92       	push	r10
    299c:	bf 92       	push	r11
    299e:	cf 92       	push	r12
    29a0:	df 92       	push	r13
    29a2:	ef 92       	push	r14
    29a4:	ff 92       	push	r15
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;
    29ae:	fb 01       	movw	r30, r22
    29b0:	e3 84       	ldd	r14, Z+11	; 0x0b
    29b2:	f4 84       	ldd	r15, Z+12	; 0x0c
    29b4:	f6 e0       	ldi	r31, 0x06	; 6
    29b6:	ef 16       	cp	r14, r31
    29b8:	f1 04       	cpc	r15, r1
    29ba:	0c f4       	brge	.+2      	; 0x29be <_ZN6IRrecv10decodeHashEP14decode_results+0x28>
    29bc:	43 c0       	rjmp	.+134    	; 0x2a44 <_ZN6IRrecv10decodeHashEP14decode_results+0xae>
    29be:	eb 01       	movw	r28, r22
    29c0:	6c 01       	movw	r12, r24
    29c2:	ee 0c       	add	r14, r14
    29c4:	ff 1c       	adc	r15, r15
    29c6:	06 e0       	ldi	r16, 0x06	; 6
    29c8:	10 e0       	ldi	r17, 0x00	; 0
    29ca:	95 ec       	ldi	r25, 0xC5	; 197
    29cc:	89 2e       	mov	r8, r25
    29ce:	9d e9       	ldi	r25, 0x9D	; 157
    29d0:	99 2e       	mov	r9, r25
    29d2:	9c e1       	ldi	r25, 0x1C	; 28
    29d4:	a9 2e       	mov	r10, r25
    29d6:	91 e8       	ldi	r25, 0x81	; 129
    29d8:	b9 2e       	mov	r11, r25

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    29da:	e9 85       	ldd	r30, Y+9	; 0x09
    29dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    29de:	df 01       	movw	r26, r30
    29e0:	a0 0f       	add	r26, r16
    29e2:	b1 1f       	adc	r27, r17
    29e4:	4d 91       	ld	r20, X+
    29e6:	5c 91       	ld	r21, X
    29e8:	c8 01       	movw	r24, r16
    29ea:	04 97       	sbiw	r24, 0x04	; 4
    29ec:	e8 0f       	add	r30, r24
    29ee:	f9 1f       	adc	r31, r25
    29f0:	60 81       	ld	r22, Z
    29f2:	71 81       	ldd	r23, Z+1	; 0x01
    29f4:	c6 01       	movw	r24, r12
    29f6:	0e 94 80 14 	call	0x2900	; 0x2900 <_ZN6IRrecv7compareEjj>
    29fa:	fc 01       	movw	r30, r24
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
    29fc:	a5 01       	movw	r20, r10
    29fe:	94 01       	movw	r18, r8
    2a00:	63 e9       	ldi	r22, 0x93	; 147
    2a02:	71 e0       	ldi	r23, 0x01	; 1
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	0e 94 91 21 	call	0x4322	; 0x4322 <__mulsi3>
    2a0c:	4f 01       	movw	r8, r30
    2a0e:	ff 0f       	add	r31, r31
    2a10:	aa 08       	sbc	r10, r10
    2a12:	bb 08       	sbc	r11, r11
    2a14:	86 26       	eor	r8, r22
    2a16:	97 26       	eor	r9, r23
    2a18:	a8 26       	eor	r10, r24
    2a1a:	b9 26       	eor	r11, r25
    2a1c:	0e 5f       	subi	r16, 0xFE	; 254
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
    2a20:	0e 15       	cp	r16, r14
    2a22:	1f 05       	cpc	r17, r15
    2a24:	d1 f6       	brne	.-76     	; 0x29da <_ZN6IRrecv10decodeHashEP14decode_results+0x44>
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
	}

	results->value       = hash;
    2a26:	8b 82       	std	Y+3, r8	; 0x03
    2a28:	9c 82       	std	Y+4, r9	; 0x04
    2a2a:	ad 82       	std	Y+5, r10	; 0x05
    2a2c:	be 82       	std	Y+6, r11	; 0x06
	results->bits        = 32;
    2a2e:	80 e2       	ldi	r24, 0x20	; 32
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	98 87       	std	Y+8, r25	; 0x08
    2a34:	8f 83       	std	Y+7, r24	; 0x07
	results->decode_type = UNKNOWN;
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	88 83       	st	Y, r24

	return true;
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	03 c0       	rjmp	.+6      	; 0x2a4a <_ZN6IRrecv10decodeHashEP14decode_results+0xb4>
long  IRrecv::decodeHash (decode_results *results)
{
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	cb 01       	movw	r24, r22
	results->value       = hash;
	results->bits        = 32;
	results->decode_type = UNKNOWN;

	return true;
}
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	cf 90       	pop	r12
    2a5a:	bf 90       	pop	r11
    2a5c:	af 90       	pop	r10
    2a5e:	9f 90       	pop	r9
    2a60:	8f 90       	pop	r8
    2a62:	08 95       	ret

00002a64 <_ZN6IRrecv6decodeEP14decode_results>:
// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
//
int  IRrecv::decode (decode_results *results)
{
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	eb 01       	movw	r28, r22
	results->rawbuf   = irparams.rawbuf;
    2a6e:	29 e1       	ldi	r18, 0x19	; 25
    2a70:	33 e0       	ldi	r19, 0x03	; 3
    2a72:	3a 87       	std	Y+10, r19	; 0x0a
    2a74:	29 87       	std	Y+9, r18	; 0x09
	results->rawlen   = irparams.rawlen;
    2a76:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <irparams+0x4>
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	3c 87       	std	Y+12, r19	; 0x0c
    2a7e:	2b 87       	std	Y+11, r18	; 0x0b

	results->overflow = irparams.overflow;
    2a80:	20 91 e3 03 	lds	r18, 0x03E3	; 0x8003e3 <irparams+0xd1>
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	3e 87       	std	Y+14, r19	; 0x0e
    2a88:	2d 87       	std	Y+13, r18	; 0x0d

	if (irparams.rcvstate != STATE_STOP)  return false ;
    2a8a:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <irparams>
    2a8e:	25 30       	cpi	r18, 0x05	; 5
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <_ZN6IRrecv6decodeEP14decode_results+0x30>
    2a92:	5e c0       	rjmp	.+188    	; 0x2b50 <_ZN6IRrecv6decodeEP14decode_results+0xec>
    2a94:	8c 01       	movw	r16, r24

#if DECODE_NEC
	DBG_PRINTLN("Attempting NEC decode");
	if (decodeNEC(results))  return true ;
    2a96:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN6IRrecv9decodeNECEP14decode_results>
    2a9a:	88 23       	and	r24, r24
    2a9c:	19 f0       	breq	.+6      	; 0x2aa4 <_ZN6IRrecv6decodeEP14decode_results+0x40>
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	58 c0       	rjmp	.+176    	; 0x2b54 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
#endif

#if DECODE_SONY
	DBG_PRINTLN("Attempting Sony decode");
	if (decodeSony(results))  return true ;
    2aa4:	be 01       	movw	r22, r28
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <_ZN6IRrecv10decodeSonyEP14decode_results>
    2aac:	81 11       	cpse	r24, r1
    2aae:	f7 cf       	rjmp	.-18     	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_SANYO
	DBG_PRINTLN("Attempting Sanyo decode");
	if (decodeSanyo(results))  return true ;
    2ab0:	be 01       	movw	r22, r28
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <_ZN6IRrecv11decodeSanyoEP14decode_results>
    2ab8:	81 11       	cpse	r24, r1
    2aba:	f1 cf       	rjmp	.-30     	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_MITSUBISHI
	DBG_PRINTLN("Attempting Mitsubishi decode");
	if (decodeMitsubishi(results))  return true ;
    2abc:	be 01       	movw	r22, r28
    2abe:	c8 01       	movw	r24, r16
    2ac0:	0e 94 8b 19 	call	0x3316	; 0x3316 <_ZN6IRrecv16decodeMitsubishiEP14decode_results>
    2ac4:	81 11       	cpse	r24, r1
    2ac6:	eb cf       	rjmp	.-42     	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_RC5
	DBG_PRINTLN("Attempting RC5 decode");
	if (decodeRC5(results))  return true ;
    2ac8:	be 01       	movw	r22, r28
    2aca:	c8 01       	movw	r24, r16
    2acc:	0e 94 cd 1b 	call	0x379a	; 0x379a <_ZN6IRrecv9decodeRC5EP14decode_results>
    2ad0:	81 11       	cpse	r24, r1
    2ad2:	e5 cf       	rjmp	.-54     	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_RC6
	DBG_PRINTLN("Attempting RC6 decode");
	if (decodeRC6(results))  return true ;
    2ad4:	be 01       	movw	r22, r28
    2ad6:	c8 01       	movw	r24, r16
    2ad8:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN6IRrecv9decodeRC6EP14decode_results>
    2adc:	81 11       	cpse	r24, r1
    2ade:	df cf       	rjmp	.-66     	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_PANASONIC
	DBG_PRINTLN("Attempting Panasonic decode");
	if (decodePanasonic(results))  return true ;
    2ae0:	be 01       	movw	r22, r28
    2ae2:	c8 01       	movw	r24, r16
    2ae4:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN6IRrecv15decodePanasonicEP14decode_results>
    2ae8:	81 11       	cpse	r24, r1
    2aea:	d9 cf       	rjmp	.-78     	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_LG
	DBG_PRINTLN("Attempting LG decode");
	if (decodeLG(results))  return true ;
    2aec:	be 01       	movw	r22, r28
    2aee:	c8 01       	movw	r24, r16
    2af0:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN6IRrecv8decodeLGEP14decode_results>
    2af4:	81 11       	cpse	r24, r1
    2af6:	d3 cf       	rjmp	.-90     	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_JVC
	DBG_PRINTLN("Attempting JVC decode");
	if (decodeJVC(results))  return true ;
    2af8:	be 01       	movw	r22, r28
    2afa:	c8 01       	movw	r24, r16
    2afc:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN6IRrecv9decodeJVCEP14decode_results>
    2b00:	81 11       	cpse	r24, r1
    2b02:	cd cf       	rjmp	.-102    	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_SAMSUNG
	DBG_PRINTLN("Attempting SAMSUNG decode");
	if (decodeSAMSUNG(results))  return true ;
    2b04:	be 01       	movw	r22, r28
    2b06:	c8 01       	movw	r24, r16
    2b08:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results>
    2b0c:	81 11       	cpse	r24, r1
    2b0e:	c7 cf       	rjmp	.-114    	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_WHYNTER
	DBG_PRINTLN("Attempting Whynter decode");
	if (decodeWhynter(results))  return true ;
    2b10:	be 01       	movw	r22, r28
    2b12:	c8 01       	movw	r24, r16
    2b14:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN6IRrecv13decodeWhynterEP14decode_results>
    2b18:	81 11       	cpse	r24, r1
    2b1a:	c1 cf       	rjmp	.-126    	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_AIWA_RC_T501
	DBG_PRINTLN("Attempting Aiwa RC-T501 decode");
	if (decodeAiwaRCT501(results))  return true ;
    2b1c:	be 01       	movw	r22, r28
    2b1e:	c8 01       	movw	r24, r16
    2b20:	0e 94 39 17 	call	0x2e72	; 0x2e72 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results>
    2b24:	81 11       	cpse	r24, r1
    2b26:	bb cf       	rjmp	.-138    	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

#if DECODE_DENON
	DBG_PRINTLN("Attempting Denon decode");
	if (decodeDenon(results))  return true ;
    2b28:	be 01       	movw	r22, r28
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZN6IRrecv11decodeDenonEP14decode_results>
    2b30:	81 11       	cpse	r24, r1
    2b32:	b5 cf       	rjmp	.-150    	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
#endif

	// decodeHash returns a hash on any input.
	// Thus, it needs to be last in the list.
	// If you add any decodes, add them before this.
	if (decodeHash(results))  return true ;
    2b34:	be 01       	movw	r22, r28
    2b36:	c8 01       	movw	r24, r16
    2b38:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN6IRrecv10decodeHashEP14decode_results>
    2b3c:	67 2b       	or	r22, r23
    2b3e:	68 2b       	or	r22, r24
    2b40:	69 2b       	or	r22, r25
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <_ZN6IRrecv6decodeEP14decode_results+0xe2>
    2b44:	ac cf       	rjmp	.-168    	; 0x2a9e <_ZN6IRrecv6decodeEP14decode_results+0x3a>
//+=============================================================================
// Restart the ISR state machine
//
void  IRrecv::resume ( )
{
	irparams.rcvstate = STATE_IDLE;
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <irparams>
	irparams.rawlen = 0;
    2b4c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <irparams+0x4>
	results->rawbuf   = irparams.rawbuf;
	results->rawlen   = irparams.rawlen;

	results->overflow = irparams.overflow;

	if (irparams.rcvstate != STATE_STOP)  return false ;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
	if (decodeHash(results))  return true ;

	// Throw away and start over
	resume();
	return false;
}
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	08 95       	ret

00002b5e <_Z5MATCHii>:
// I may revisit this code at a later date and look at the assembler produced
//   in a hope of finding out what is going on, but for now they will remain as
//   functions even in non-DEBUG mode
//
int  MATCH (int measured,  int desired)
{
    2b5e:	cf 92       	push	r12
    2b60:	df 92       	push	r13
    2b62:	ef 92       	push	r14
    2b64:	ff 92       	push	r15
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	ec 01       	movw	r28, r24
 	DBG_PRINT(F(" <= "));
 	DBG_PRINT(measured, DEC);
 	DBG_PRINT(F(" <= "));
 	DBG_PRINT(TICKS_HIGH(desired), DEC);

  bool passed = ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
    2b6c:	07 2e       	mov	r0, r23
    2b6e:	00 0c       	add	r0, r0
    2b70:	88 0b       	sbc	r24, r24
    2b72:	99 0b       	sbc	r25, r25
    2b74:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
    2b78:	6b 01       	movw	r12, r22
    2b7a:	7c 01       	movw	r14, r24
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e4       	ldi	r20, 0x40	; 64
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	48 e4       	ldi	r20, 0x48	; 72
    2b8e:	52 e4       	ldi	r21, 0x42	; 66
    2b90:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
    2b94:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixsfsi>
    2b98:	c6 17       	cp	r28, r22
    2b9a:	d7 07       	cpc	r29, r23
    2b9c:	d4 f0       	brlt	.+52     	; 0x2bd2 <_Z5MATCHii+0x74>
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 ea       	ldi	r20, 0xA0	; 160
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	c7 01       	movw	r24, r14
    2ba8:	b6 01       	movw	r22, r12
    2baa:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	48 e4       	ldi	r20, 0x48	; 72
    2bb4:	52 e4       	ldi	r21, 0x42	; 66
    2bb6:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e8       	ldi	r20, 0x80	; 128
    2bc0:	5f e3       	ldi	r21, 0x3F	; 63
    2bc2:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
    2bc6:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixsfsi>
    2bca:	21 e0       	ldi	r18, 0x01	; 1
    2bcc:	6c 17       	cp	r22, r28
    2bce:	7d 07       	cpc	r23, r29
    2bd0:	0c f4       	brge	.+2      	; 0x2bd4 <_Z5MATCHii+0x76>
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
  if (passed)
    DBG_PRINTLN(F("?; passed"));
  else
    DBG_PRINTLN(F("?; FAILED")); 
 	return passed;
}
    2bd4:	82 2f       	mov	r24, r18
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	08 95       	ret

00002be6 <_Z10MATCH_MARKii>:

//+========================================================
// Due to sensor lag, when received, Marks tend to be 100us too long
//
int  MATCH_MARK (int measured_ticks,  int desired_us)
{
    2be6:	cf 92       	push	r12
    2be8:	df 92       	push	r13
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	ec 01       	movw	r28, r24
	DBG_PRINT(F(" <= "));
	DBG_PRINT(measured_ticks * USECPERTICK, DEC);
	DBG_PRINT(F(" <= "));
	DBG_PRINT(TICKS_HIGH(desired_us + MARK_EXCESS) * USECPERTICK, DEC);

  bool passed = ((measured_ticks >= TICKS_LOW (desired_us + MARK_EXCESS))
    2bf4:	6c 59       	subi	r22, 0x9C	; 156
    2bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf8:	07 2e       	mov	r0, r23
    2bfa:	00 0c       	add	r0, r0
    2bfc:	88 0b       	sbc	r24, r24
    2bfe:	99 0b       	sbc	r25, r25
    2c00:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
    2c04:	6b 01       	movw	r12, r22
    2c06:	7c 01       	movw	r14, r24
                && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e4       	ldi	r20, 0x40	; 64
    2c0e:	5f e3       	ldi	r21, 0x3F	; 63
    2c10:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	48 e4       	ldi	r20, 0x48	; 72
    2c1a:	52 e4       	ldi	r21, 0x42	; 66
    2c1c:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
    2c20:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixsfsi>
    2c24:	c6 17       	cp	r28, r22
    2c26:	d7 07       	cpc	r29, r23
    2c28:	d4 f0       	brlt	.+52     	; 0x2c5e <_Z10MATCH_MARKii+0x78>
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 ea       	ldi	r20, 0xA0	; 160
    2c30:	5f e3       	ldi	r21, 0x3F	; 63
    2c32:	c7 01       	movw	r24, r14
    2c34:	b6 01       	movw	r22, r12
    2c36:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	48 e4       	ldi	r20, 0x48	; 72
    2c40:	52 e4       	ldi	r21, 0x42	; 66
    2c42:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e8       	ldi	r20, 0x80	; 128
    2c4c:	5f e3       	ldi	r21, 0x3F	; 63
    2c4e:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
    2c52:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixsfsi>
    2c56:	21 e0       	ldi	r18, 0x01	; 1
    2c58:	6c 17       	cp	r22, r28
    2c5a:	7d 07       	cpc	r23, r29
    2c5c:	0c f4       	brge	.+2      	; 0x2c60 <_Z10MATCH_MARKii+0x7a>
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
  if (passed)
    DBG_PRINTLN(F("?; passed"));
  else
    DBG_PRINTLN(F("?; FAILED")); 
 	return passed;
}
    2c60:	82 2f       	mov	r24, r18
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	ff 90       	pop	r15
    2c6a:	ef 90       	pop	r14
    2c6c:	df 90       	pop	r13
    2c6e:	cf 90       	pop	r12
    2c70:	08 95       	ret

00002c72 <_Z11MATCH_SPACEii>:

//+========================================================
// Due to sensor lag, when received, Spaces tend to be 100us too short
//
int  MATCH_SPACE (int measured_ticks,  int desired_us)
{
    2c72:	cf 92       	push	r12
    2c74:	df 92       	push	r13
    2c76:	ef 92       	push	r14
    2c78:	ff 92       	push	r15
    2c7a:	cf 93       	push	r28
    2c7c:	df 93       	push	r29
    2c7e:	ec 01       	movw	r28, r24
	DBG_PRINT(F(" <= "));
	DBG_PRINT(measured_ticks * USECPERTICK, DEC);
	DBG_PRINT(F(" <= "));
	DBG_PRINT(TICKS_HIGH(desired_us - MARK_EXCESS) * USECPERTICK, DEC);

  bool passed = ((measured_ticks >= TICKS_LOW (desired_us - MARK_EXCESS))
    2c80:	64 56       	subi	r22, 0x64	; 100
    2c82:	71 09       	sbc	r23, r1
    2c84:	07 2e       	mov	r0, r23
    2c86:	00 0c       	add	r0, r0
    2c88:	88 0b       	sbc	r24, r24
    2c8a:	99 0b       	sbc	r25, r25
    2c8c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__floatsisf>
    2c90:	6b 01       	movw	r12, r22
    2c92:	7c 01       	movw	r14, r24
                && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e4       	ldi	r20, 0x40	; 64
    2c9a:	5f e3       	ldi	r21, 0x3F	; 63
    2c9c:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	48 e4       	ldi	r20, 0x48	; 72
    2ca6:	52 e4       	ldi	r21, 0x42	; 66
    2ca8:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
    2cac:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixsfsi>
    2cb0:	c6 17       	cp	r28, r22
    2cb2:	d7 07       	cpc	r29, r23
    2cb4:	d4 f0       	brlt	.+52     	; 0x2cea <_Z11MATCH_SPACEii+0x78>
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 ea       	ldi	r20, 0xA0	; 160
    2cbc:	5f e3       	ldi	r21, 0x3F	; 63
    2cbe:	c7 01       	movw	r24, r14
    2cc0:	b6 01       	movw	r22, r12
    2cc2:	0e 94 11 0c 	call	0x1822	; 0x1822 <__mulsf3>
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	48 e4       	ldi	r20, 0x48	; 72
    2ccc:	52 e4       	ldi	r21, 0x42	; 66
    2cce:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e8       	ldi	r20, 0x80	; 128
    2cd8:	5f e3       	ldi	r21, 0x3F	; 63
    2cda:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
    2cde:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixsfsi>
    2ce2:	21 e0       	ldi	r18, 0x01	; 1
    2ce4:	6c 17       	cp	r22, r28
    2ce6:	7d 07       	cpc	r23, r29
    2ce8:	0c f4       	brge	.+2      	; 0x2cec <_Z11MATCH_SPACEii+0x7a>
    2cea:	20 e0       	ldi	r18, 0x00	; 0
  if (passed)
    DBG_PRINTLN(F("?; passed"));
  else
    DBG_PRINTLN(F("?; FAILED")); 
 	return passed;
}
    2cec:	82 2f       	mov	r24, r18
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	df 91       	pop	r29
    2cf2:	cf 91       	pop	r28
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	df 90       	pop	r13
    2cfa:	cf 90       	pop	r12
    2cfc:	08 95       	ret

00002cfe <__vector_7>:
//   Ready is set; State switches to IDLE; Timing of SPACE continues.
// As soon as first MARK arrives:
//   Gap width is recorded; Ready is cleared; New logging starts
//
ISR (TIMER_INTR_NAME)
{
    2cfe:	1f 92       	push	r1
    2d00:	0f 92       	push	r0
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	0f 92       	push	r0
    2d06:	11 24       	eor	r1, r1
    2d08:	2f 93       	push	r18
    2d0a:	3f 93       	push	r19
    2d0c:	4f 93       	push	r20
    2d0e:	5f 93       	push	r21
    2d10:	6f 93       	push	r22
    2d12:	7f 93       	push	r23
    2d14:	8f 93       	push	r24
    2d16:	9f 93       	push	r25
    2d18:	af 93       	push	r26
    2d1a:	bf 93       	push	r27
    2d1c:	ef 93       	push	r30
    2d1e:	ff 93       	push	r31
	TIMER_RESET;

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	// digitalRead() is very slow. Optimisation is possible, but makes the code unportable
	uint8_t  irdata = (uint8_t)digitalRead(irparams.recvpin);
    2d20:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <irparams+0x1>
    2d24:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <digitalRead>

	irparams.timer++;  // One more 50uS tick
    2d28:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <irparams+0x5>
    2d2c:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <irparams+0x6>
    2d30:	2f 5f       	subi	r18, 0xFF	; 255
    2d32:	3f 4f       	sbci	r19, 0xFF	; 255
    2d34:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <irparams+0x6>
    2d38:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <irparams+0x5>
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
    2d3c:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <irparams+0x4>
    2d40:	95 36       	cpi	r25, 0x65	; 101
    2d42:	18 f0       	brcs	.+6      	; 0x2d4a <__vector_7+0x4c>
    2d44:	96 e0       	ldi	r25, 0x06	; 6
    2d46:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <irparams>

	switch(irparams.rcvstate) {
    2d4a:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <irparams>
    2d4e:	94 30       	cpi	r25, 0x04	; 4
    2d50:	c9 f1       	breq	.+114    	; 0x2dc4 <__vector_7+0xc6>
    2d52:	28 f4       	brcc	.+10     	; 0x2d5e <__vector_7+0x60>
    2d54:	92 30       	cpi	r25, 0x02	; 2
    2d56:	69 f0       	breq	.+26     	; 0x2d72 <__vector_7+0x74>
    2d58:	93 30       	cpi	r25, 0x03	; 3
    2d5a:	d1 f0       	breq	.+52     	; 0x2d90 <__vector_7+0x92>
    2d5c:	5e c0       	rjmp	.+188    	; 0x2e1a <__vector_7+0x11c>
    2d5e:	95 30       	cpi	r25, 0x05	; 5
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <__vector_7+0x66>
    2d62:	51 c0       	rjmp	.+162    	; 0x2e06 <__vector_7+0x108>
    2d64:	96 30       	cpi	r25, 0x06	; 6
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <__vector_7+0x6c>
    2d68:	58 c0       	rjmp	.+176    	; 0x2e1a <__vector_7+0x11c>
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    2d6a:	91 e0       	ldi	r25, 0x01	; 1
    2d6c:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <irparams+0xd1>
    2d70:	51 c0       	rjmp	.+162    	; 0x2e14 <__vector_7+0x116>
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow

	switch(irparams.rcvstate) {
		//......................................................................
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
    2d72:	81 11       	cpse	r24, r1
    2d74:	52 c0       	rjmp	.+164    	; 0x2e1a <__vector_7+0x11c>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
    2d76:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <irparams+0x5>
    2d7a:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <irparams+0x6>
    2d7e:	24 36       	cpi	r18, 0x64	; 100
    2d80:	31 05       	cpc	r19, r1
    2d82:	08 f4       	brcc	.+2      	; 0x2d86 <__vector_7+0x88>
    2d84:	42 c0       	rjmp	.+132    	; 0x2e0a <__vector_7+0x10c>
					irparams.timer = 0;

				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
    2d86:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <irparams+0xd1>
					irparams.rawlen                    = 0;
    2d8a:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <irparams+0x4>
    2d8e:	1c c0       	rjmp	.+56     	; 0x2dc8 <__vector_7+0xca>
				}
			}
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <__vector_7+0x98>
    2d94:	42 c0       	rjmp	.+132    	; 0x2e1a <__vector_7+0x11c>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    2d96:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <irparams+0x4>
    2d9a:	91 e0       	ldi	r25, 0x01	; 1
    2d9c:	9e 0f       	add	r25, r30
    2d9e:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <irparams+0x4>
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <irparams+0x5>
    2da8:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <irparams+0x6>
    2dac:	ee 0f       	add	r30, r30
    2dae:	ff 1f       	adc	r31, r31
    2db0:	ee 5e       	subi	r30, 0xEE	; 238
    2db2:	fc 4f       	sbci	r31, 0xFC	; 252
    2db4:	30 87       	std	Z+8, r19	; 0x08
    2db6:	27 83       	std	Z+7, r18	; 0x07
				irparams.timer                     = 0;
    2db8:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <irparams+0x6>
    2dbc:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <irparams+0x5>
				irparams.rcvstate                  = STATE_SPACE;
    2dc0:	94 e0       	ldi	r25, 0x04	; 4
    2dc2:	29 c0       	rjmp	.+82     	; 0x2e16 <__vector_7+0x118>
			}
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
    2dc4:	81 11       	cpse	r24, r1
    2dc6:	17 c0       	rjmp	.+46     	; 0x2df6 <__vector_7+0xf8>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    2dc8:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <irparams+0x4>
    2dcc:	91 e0       	ldi	r25, 0x01	; 1
    2dce:	9e 0f       	add	r25, r30
    2dd0:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <irparams+0x4>
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <irparams+0x5>
    2dda:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <irparams+0x6>
    2dde:	ee 0f       	add	r30, r30
    2de0:	ff 1f       	adc	r31, r31
    2de2:	ee 5e       	subi	r30, 0xEE	; 238
    2de4:	fc 4f       	sbci	r31, 0xFC	; 252
    2de6:	30 87       	std	Z+8, r19	; 0x08
    2de8:	27 83       	std	Z+7, r18	; 0x07
				irparams.timer                     = 0;
    2dea:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <irparams+0x6>
    2dee:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <irparams+0x5>
				irparams.rcvstate                  = STATE_MARK;
    2df2:	93 e0       	ldi	r25, 0x03	; 3
    2df4:	10 c0       	rjmp	.+32     	; 0x2e16 <__vector_7+0x118>

			} else if (irparams.timer > GAP_TICKS) {  // Space
    2df6:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <irparams+0x5>
    2dfa:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <irparams+0x6>
    2dfe:	25 36       	cpi	r18, 0x65	; 101
    2e00:	31 05       	cpc	r19, r1
    2e02:	58 f0       	brcs	.+22     	; 0x2e1a <__vector_7+0x11c>
    2e04:	07 c0       	rjmp	.+14     	; 0x2e14 <__vector_7+0x116>
					irparams.rcvstate = STATE_STOP;
			}
			break;
		//......................................................................
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
    2e06:	81 11       	cpse	r24, r1
    2e08:	08 c0       	rjmp	.+16     	; 0x2e1a <__vector_7+0x11c>
    2e0a:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <irparams+0x6>
    2e0e:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <irparams+0x5>
    2e12:	03 c0       	rjmp	.+6      	; 0x2e1a <__vector_7+0x11c>
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
			irparams.rcvstate = STATE_STOP;
    2e14:	95 e0       	ldi	r25, 0x05	; 5
    2e16:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <irparams>
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    2e1a:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <irparams+0x3>
    2e1e:	99 23       	and	r25, r25
    2e20:	b9 f0       	breq	.+46     	; 0x2e50 <__vector_7+0x152>
		if (irdata == MARK)
    2e22:	81 11       	cpse	r24, r1
    2e24:	0a c0       	rjmp	.+20     	; 0x2e3a <__vector_7+0x13c>
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    2e26:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <irparams+0x2>
    2e2a:	88 23       	and	r24, r24
    2e2c:	21 f0       	breq	.+8      	; 0x2e36 <__vector_7+0x138>
    2e2e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <irparams+0x2>
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	09 c0       	rjmp	.+18     	; 0x2e48 <__vector_7+0x14a>
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
    2e36:	2d 9a       	sbi	0x05, 5	; 5
    2e38:	0b c0       	rjmp	.+22     	; 0x2e50 <__vector_7+0x152>
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    2e3a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <irparams+0x2>
    2e3e:	88 23       	and	r24, r24
    2e40:	31 f0       	breq	.+12     	; 0x2e4e <__vector_7+0x150>
    2e42:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <irparams+0x2>
    2e46:	60 e0       	ldi	r22, 0x00	; 0
    2e48:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <__vector_7+0x152>
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
    2e4e:	2d 98       	cbi	0x05, 5	; 5
	}
}
    2e50:	ff 91       	pop	r31
    2e52:	ef 91       	pop	r30
    2e54:	bf 91       	pop	r27
    2e56:	af 91       	pop	r26
    2e58:	9f 91       	pop	r25
    2e5a:	8f 91       	pop	r24
    2e5c:	7f 91       	pop	r23
    2e5e:	6f 91       	pop	r22
    2e60:	5f 91       	pop	r21
    2e62:	4f 91       	pop	r20
    2e64:	3f 91       	pop	r19
    2e66:	2f 91       	pop	r18
    2e68:	0f 90       	pop	r0
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	0f 90       	pop	r0
    2e6e:	1f 90       	pop	r1
    2e70:	18 95       	reti

00002e72 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
bool  IRrecv::decodeAiwaRCT501 (decode_results *results)
{
    2e72:	8f 92       	push	r8
    2e74:	9f 92       	push	r9
    2e76:	af 92       	push	r10
    2e78:	bf 92       	push	r11
    2e7a:	cf 92       	push	r12
    2e7c:	df 92       	push	r13
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
	int  data   = 0;
	int  offset = 1;

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
    2e8a:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    2e8e:	88 35       	cpi	r24, 0x58	; 88
    2e90:	10 f4       	brcc	.+4      	; 0x2e96 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x24>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	77 c0       	rjmp	.+238    	; 0x2f84 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x112>
    2e96:	eb 01       	movw	r28, r22

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
    2e98:	e9 85       	ldd	r30, Y+9	; 0x09
    2e9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	60 e6       	ldi	r22, 0x60	; 96
    2ea2:	72 e2       	ldi	r23, 0x22	; 34
    2ea4:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    2ea8:	89 2b       	or	r24, r25
    2eaa:	99 f3       	breq	.-26     	; 0x2e92 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x20>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
    2eac:	e9 85       	ldd	r30, Y+9	; 0x09
    2eae:	fa 85       	ldd	r31, Y+10	; 0x0a
    2eb0:	84 81       	ldd	r24, Z+4	; 0x04
    2eb2:	95 81       	ldd	r25, Z+5	; 0x05
    2eb4:	64 e9       	ldi	r22, 0x94	; 148
    2eb6:	71 e1       	ldi	r23, 0x11	; 17
    2eb8:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    2ebc:	89 2b       	or	r24, r25
    2ebe:	49 f3       	breq	.-46     	; 0x2e92 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x20>
    2ec0:	5e e1       	ldi	r21, 0x1E	; 30
    2ec2:	a5 2e       	mov	r10, r21
    2ec4:	b1 2c       	mov	r11, r1
    2ec6:	6d e1       	ldi	r22, 0x1D	; 29
    2ec8:	c6 2e       	mov	r12, r22
    2eca:	d1 2c       	mov	r13, r1
    2ecc:	00 e0       	ldi	r16, 0x00	; 0
    2ece:	10 e0       	ldi	r17, 0x00	; 0

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
    2ed0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	04 97       	sbiw	r24, 0x04	; 4
    2ed8:	c8 16       	cp	r12, r24
    2eda:	d9 06       	cpc	r13, r25
    2edc:	dc f5       	brge	.+118    	; 0x2f54 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xe2>
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
    2ede:	e9 85       	ldd	r30, Y+9	; 0x09
    2ee0:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ee2:	c6 01       	movw	r24, r12
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	e8 0f       	add	r30, r24
    2eea:	f9 1f       	adc	r31, r25
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	64 ef       	ldi	r22, 0xF4	; 244
    2ef2:	71 e0       	ldi	r23, 0x01	; 1
    2ef4:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    2ef8:	89 2b       	or	r24, r25
    2efa:	59 f2       	breq	.-106    	; 0x2e92 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x20>
    2efc:	75 01       	movw	r14, r10
    2efe:	45 01       	movw	r8, r10
    2f00:	88 0c       	add	r8, r8
    2f02:	99 1c       	adc	r9, r9
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
    2f04:	e9 85       	ldd	r30, Y+9	; 0x09
    2f06:	fa 85       	ldd	r31, Y+10	; 0x0a
    2f08:	e8 0d       	add	r30, r8
    2f0a:	f9 1d       	adc	r31, r9
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	68 e5       	ldi	r22, 0x58	; 88
    2f12:	72 e0       	ldi	r23, 0x02	; 2
    2f14:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    2f18:	89 2b       	or	r24, r25
    2f1a:	31 f0       	breq	.+12     	; 0x2f28 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xb6>
    2f1c:	c8 01       	movw	r24, r16
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	8c 01       	movw	r16, r24
    2f24:	01 60       	ori	r16, 0x01	; 1
    2f26:	0f c0       	rjmp	.+30     	; 0x2f46 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xd4>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	e8 0d       	add	r30, r8
    2f30:	f9 1d       	adc	r31, r9
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	64 ea       	ldi	r22, 0xA4	; 164
    2f38:	76 e0       	ldi	r23, 0x06	; 6
    2f3a:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    2f3e:	89 2b       	or	r24, r25
    2f40:	51 f0       	breq	.+20     	; 0x2f56 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xe4>
    2f42:	00 0f       	add	r16, r16
    2f44:	11 1f       	adc	r17, r17
		else                                                                     break ;  // End of one & zero detected
		offset++;
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	c8 0e       	add	r12, r24
    2f4a:	d1 1c       	adc	r13, r1
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	a8 0e       	add	r10, r24
    2f50:	b1 1c       	adc	r11, r1
	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
    2f52:	be cf       	rjmp	.-132    	; 0x2ed0 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x5e>
    2f54:	76 01       	movw	r14, r12
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                     break ;  // End of one & zero detected
		offset++;
	}

	results->bits = (offset - 1) / 2;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	e8 1a       	sub	r14, r24
    2f5a:	f1 08       	sbc	r15, r1
    2f5c:	f5 94       	asr	r15
    2f5e:	e7 94       	ror	r14
    2f60:	f8 86       	std	Y+8, r15	; 0x08
    2f62:	ef 82       	std	Y+7, r14	; 0x07
	if (results->bits < 42)  return false ;
    2f64:	8a e2       	ldi	r24, 0x2A	; 42
    2f66:	e8 16       	cp	r14, r24
    2f68:	f1 04       	cpc	r15, r1
    2f6a:	0c f4       	brge	.+2      	; 0x2f6e <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0xfc>
    2f6c:	92 cf       	rjmp	.-220    	; 0x2e92 <_ZN6IRrecv16decodeAiwaRCT501EP14decode_results+0x20>

	results->value       = data;
    2f6e:	c8 01       	movw	r24, r16
    2f70:	11 0f       	add	r17, r17
    2f72:	aa 0b       	sbc	r26, r26
    2f74:	bb 0b       	sbc	r27, r27
    2f76:	8b 83       	std	Y+3, r24	; 0x03
    2f78:	9c 83       	std	Y+4, r25	; 0x04
    2f7a:	ad 83       	std	Y+5, r26	; 0x05
    2f7c:	be 83       	std	Y+6, r27	; 0x06
	results->decode_type = AIWA_RC_T501;
    2f7e:	89 e0       	ldi	r24, 0x09	; 9
    2f80:	88 83       	st	Y, r24
	return true;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
}
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	ef 90       	pop	r14
    2f90:	df 90       	pop	r13
    2f92:	cf 90       	pop	r12
    2f94:	bf 90       	pop	r11
    2f96:	af 90       	pop	r10
    2f98:	9f 90       	pop	r9
    2f9a:	8f 90       	pop	r8
    2f9c:	08 95       	ret

00002f9e <_ZN6IRrecv11decodeDenonEP14decode_results>:

//+=============================================================================
//
#if DECODE_DENON
bool  IRrecv::decodeDenon (decode_results *results)
{
    2f9e:	af 92       	push	r10
    2fa0:	bf 92       	push	r11
    2fa2:	cf 92       	push	r12
    2fa4:	df 92       	push	r13
    2fa6:	ef 92       	push	r14
    2fa8:	ff 92       	push	r15
    2faa:	0f 93       	push	r16
    2fac:	1f 93       	push	r17
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
	unsigned long  data   = 0;  // Somewhere to build our code
	int            offset = 1;  // Skip the Gap reading

	// Check we have the right amount of data
	if (irparams.rawlen != 1 + 2 + (2 * BITS) + 1)  return false ;
    2fb2:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    2fb6:	80 32       	cpi	r24, 0x20	; 32
    2fb8:	11 f0       	breq	.+4      	; 0x2fbe <_ZN6IRrecv11decodeDenonEP14decode_results+0x20>
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	5f c0       	rjmp	.+190    	; 0x307c <_ZN6IRrecv11decodeDenonEP14decode_results+0xde>
    2fbe:	eb 01       	movw	r28, r22

	// Check initial Mark+Space match
	if (!MATCH_MARK (results->rawbuf[offset++], HDR_MARK ))  return false ;
    2fc0:	e9 85       	ldd	r30, Y+9	; 0x09
    2fc2:	fa 85       	ldd	r31, Y+10	; 0x0a
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	6c e2       	ldi	r22, 0x2C	; 44
    2fca:	71 e0       	ldi	r23, 0x01	; 1
    2fcc:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    2fd0:	89 2b       	or	r24, r25
    2fd2:	99 f3       	breq	.-26     	; 0x2fba <_ZN6IRrecv11decodeDenonEP14decode_results+0x1c>
	if (!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE))  return false ;
    2fd4:	e9 85       	ldd	r30, Y+9	; 0x09
    2fd6:	fa 85       	ldd	r31, Y+10	; 0x0a
    2fd8:	84 81       	ldd	r24, Z+4	; 0x04
    2fda:	95 81       	ldd	r25, Z+5	; 0x05
    2fdc:	6e ee       	ldi	r22, 0xEE	; 238
    2fde:	72 e0       	ldi	r23, 0x02	; 2
    2fe0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    2fe4:	89 2b       	or	r24, r25
    2fe6:	49 f3       	breq	.-46     	; 0x2fba <_ZN6IRrecv11decodeDenonEP14decode_results+0x1c>
    2fe8:	06 e0       	ldi	r16, 0x06	; 6
    2fea:	10 e0       	ldi	r17, 0x00	; 0
    2fec:	c1 2c       	mov	r12, r1
    2fee:	d1 2c       	mov	r13, r1
    2ff0:	76 01       	movw	r14, r12

	// Read the bits in
	for (int i = 0;  i < BITS;  i++) {
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK))  return false ;
    2ff2:	e9 85       	ldd	r30, Y+9	; 0x09
    2ff4:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ff6:	e0 0f       	add	r30, r16
    2ff8:	f1 1f       	adc	r31, r17
    2ffa:	80 81       	ld	r24, Z
    2ffc:	91 81       	ldd	r25, Z+1	; 0x01
    2ffe:	6c e2       	ldi	r22, 0x2C	; 44
    3000:	71 e0       	ldi	r23, 0x01	; 1
    3002:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3006:	89 2b       	or	r24, r25
    3008:	c1 f2       	breq	.-80     	; 0x2fba <_ZN6IRrecv11decodeDenonEP14decode_results+0x1c>

		// IR data is big-endian, so we shuffle it in from the right:
		if      (MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1 ;
    300a:	58 01       	movw	r10, r16
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	a8 0e       	add	r10, r24
    3010:	b1 1c       	adc	r11, r1
    3012:	e9 85       	ldd	r30, Y+9	; 0x09
    3014:	fa 85       	ldd	r31, Y+10	; 0x0a
    3016:	ea 0d       	add	r30, r10
    3018:	fb 1d       	adc	r31, r11
    301a:	80 81       	ld	r24, Z
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	68 e0       	ldi	r22, 0x08	; 8
    3020:	77 e0       	ldi	r23, 0x07	; 7
    3022:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3026:	89 2b       	or	r24, r25
    3028:	39 f0       	breq	.+14     	; 0x3038 <_ZN6IRrecv11decodeDenonEP14decode_results+0x9a>
    302a:	cc 0c       	add	r12, r12
    302c:	dd 1c       	adc	r13, r13
    302e:	ee 1c       	adc	r14, r14
    3030:	ff 1c       	adc	r15, r15
    3032:	68 94       	set
    3034:	c0 f8       	bld	r12, 0
    3036:	12 c0       	rjmp	.+36     	; 0x305c <_ZN6IRrecv11decodeDenonEP14decode_results+0xbe>
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0 ;
    3038:	89 85       	ldd	r24, Y+9	; 0x09
    303a:	9a 85       	ldd	r25, Y+10	; 0x0a
    303c:	fc 01       	movw	r30, r24
    303e:	ea 0d       	add	r30, r10
    3040:	fb 1d       	adc	r31, r11
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	6e ee       	ldi	r22, 0xEE	; 238
    3048:	72 e0       	ldi	r23, 0x02	; 2
    304a:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    304e:	89 2b       	or	r24, r25
    3050:	09 f4       	brne	.+2      	; 0x3054 <_ZN6IRrecv11decodeDenonEP14decode_results+0xb6>
    3052:	b3 cf       	rjmp	.-154    	; 0x2fba <_ZN6IRrecv11decodeDenonEP14decode_results+0x1c>
    3054:	cc 0c       	add	r12, r12
    3056:	dd 1c       	adc	r13, r13
    3058:	ee 1c       	adc	r14, r14
    305a:	ff 1c       	adc	r15, r15
    305c:	0c 5f       	subi	r16, 0xFC	; 252
    305e:	1f 4f       	sbci	r17, 0xFF	; 255
	// Check initial Mark+Space match
	if (!MATCH_MARK (results->rawbuf[offset++], HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE))  return false ;

	// Read the bits in
	for (int i = 0;  i < BITS;  i++) {
    3060:	0e 33       	cpi	r16, 0x3E	; 62
    3062:	11 05       	cpc	r17, r1
    3064:	31 f6       	brne	.-116    	; 0x2ff2 <_ZN6IRrecv11decodeDenonEP14decode_results+0x54>
		else                                                        return false ;
		offset++;
	}

	// Success
	results->bits        = BITS;
    3066:	8e e0       	ldi	r24, 0x0E	; 14
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	98 87       	std	Y+8, r25	; 0x08
    306c:	8f 83       	std	Y+7, r24	; 0x07
	results->value       = data;
    306e:	cb 82       	std	Y+3, r12	; 0x03
    3070:	dc 82       	std	Y+4, r13	; 0x04
    3072:	ed 82       	std	Y+5, r14	; 0x05
    3074:	fe 82       	std	Y+6, r15	; 0x06
	results->decode_type = DENON;
    3076:	8f e0       	ldi	r24, 0x0F	; 15
    3078:	88 83       	st	Y, r24
	return true;
    307a:	81 e0       	ldi	r24, 0x01	; 1
}
    307c:	df 91       	pop	r29
    307e:	cf 91       	pop	r28
    3080:	1f 91       	pop	r17
    3082:	0f 91       	pop	r16
    3084:	ff 90       	pop	r15
    3086:	ef 90       	pop	r14
    3088:	df 90       	pop	r13
    308a:	cf 90       	pop	r12
    308c:	bf 90       	pop	r11
    308e:	af 90       	pop	r10
    3090:	08 95       	ret

00003092 <_ZN6IRrecv9decodeJVCEP14decode_results>:
#endif

//+=============================================================================
#if DECODE_JVC
bool  IRrecv::decodeJVC (decode_results *results)
{
    3092:	af 92       	push	r10
    3094:	bf 92       	push	r11
    3096:	cf 92       	push	r12
    3098:	df 92       	push	r13
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	eb 01       	movw	r28, r22
	long  data   = 0;
	int   offset = 1; // Skip first space

	// Check for repeat
	if (  (irparams.rawlen - 1 == 33)
    30a8:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
	    && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
	    && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)
    30ac:	82 32       	cpi	r24, 0x22	; 34
    30ae:	51 f5       	brne	.+84     	; 0x3104 <_ZN6IRrecv9decodeJVCEP14decode_results+0x72>
	long  data   = 0;
	int   offset = 1; // Skip first space

	// Check for repeat
	if (  (irparams.rawlen - 1 == 33)
	    && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
    30b0:	e9 85       	ldd	r30, Y+9	; 0x09
    30b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	68 e5       	ldi	r22, 0x58	; 88
    30ba:	72 e0       	ldi	r23, 0x02	; 2
    30bc:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    30c0:	89 2b       	or	r24, r25
    30c2:	01 f1       	breq	.+64     	; 0x3104 <_ZN6IRrecv9decodeJVCEP14decode_results+0x72>
	    && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)
    30c4:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <irparams+0x4>
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	e1 50       	subi	r30, 0x01	; 1
    30cc:	f0 48       	sbci	r31, 0x80	; 128
    30ce:	ee 0f       	add	r30, r30
    30d0:	ff 1f       	adc	r31, r31
    30d2:	89 85       	ldd	r24, Y+9	; 0x09
    30d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d6:	e8 0f       	add	r30, r24
    30d8:	f9 1f       	adc	r31, r25
    30da:	80 81       	ld	r24, Z
    30dc:	91 81       	ldd	r25, Z+1	; 0x01
    30de:	68 e5       	ldi	r22, 0x58	; 88
    30e0:	72 e0       	ldi	r23, 0x02	; 2
    30e2:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    30e6:	89 2b       	or	r24, r25
    30e8:	69 f0       	breq	.+26     	; 0x3104 <_ZN6IRrecv9decodeJVCEP14decode_results+0x72>
	   ) {
		results->bits        = 0;
    30ea:	18 86       	std	Y+8, r1	; 0x08
    30ec:	1f 82       	std	Y+7, r1	; 0x07
		results->value       = REPEAT;
    30ee:	8f ef       	ldi	r24, 0xFF	; 255
    30f0:	9f ef       	ldi	r25, 0xFF	; 255
    30f2:	dc 01       	movw	r26, r24
    30f4:	8b 83       	std	Y+3, r24	; 0x03
    30f6:	9c 83       	std	Y+4, r25	; 0x04
    30f8:	ad 83       	std	Y+5, r26	; 0x05
    30fa:	be 83       	std	Y+6, r27	; 0x06
		results->decode_type = JVC;
    30fc:	86 e0       	ldi	r24, 0x06	; 6
    30fe:	88 83       	st	Y, r24
		return true;
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	73 c0       	rjmp	.+230    	; 0x31ea <_ZN6IRrecv9decodeJVCEP14decode_results+0x158>
	}

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK))  return false ;
    3104:	e9 85       	ldd	r30, Y+9	; 0x09
    3106:	fa 85       	ldd	r31, Y+10	; 0x0a
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	93 81       	ldd	r25, Z+3	; 0x03
    310c:	60 e4       	ldi	r22, 0x40	; 64
    310e:	7f e1       	ldi	r23, 0x1F	; 31
    3110:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3114:	89 2b       	or	r24, r25
    3116:	21 f0       	breq	.+8      	; 0x3120 <_ZN6IRrecv9decodeJVCEP14decode_results+0x8e>

	if (irparams.rawlen < (2 * JVC_BITS) + 1 )  return false ;
    3118:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    311c:	81 32       	cpi	r24, 0x21	; 33
    311e:	10 f4       	brcc	.+4      	; 0x3124 <_ZN6IRrecv9decodeJVCEP14decode_results+0x92>
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	63 c0       	rjmp	.+198    	; 0x31ea <_ZN6IRrecv9decodeJVCEP14decode_results+0x158>

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false ;
    3124:	e9 85       	ldd	r30, Y+9	; 0x09
    3126:	fa 85       	ldd	r31, Y+10	; 0x0a
    3128:	84 81       	ldd	r24, Z+4	; 0x04
    312a:	95 81       	ldd	r25, Z+5	; 0x05
    312c:	60 ea       	ldi	r22, 0xA0	; 160
    312e:	7f e0       	ldi	r23, 0x0F	; 15
    3130:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3134:	89 2b       	or	r24, r25
    3136:	a1 f3       	breq	.-24     	; 0x3120 <_ZN6IRrecv9decodeJVCEP14decode_results+0x8e>
    3138:	38 e0       	ldi	r19, 0x08	; 8
    313a:	a3 2e       	mov	r10, r19
    313c:	b1 2c       	mov	r11, r1
    313e:	03 e0       	ldi	r16, 0x03	; 3
    3140:	10 e0       	ldi	r17, 0x00	; 0
    3142:	c1 2c       	mov	r12, r1
    3144:	d1 2c       	mov	r13, r1
    3146:	76 01       	movw	r14, r12

	for (int i = 0;  i < JVC_BITS;  i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK))  return false ;
    3148:	e9 85       	ldd	r30, Y+9	; 0x09
    314a:	fa 85       	ldd	r31, Y+10	; 0x0a
    314c:	c8 01       	movw	r24, r16
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	e8 0f       	add	r30, r24
    3154:	f9 1f       	adc	r31, r25
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	68 e5       	ldi	r22, 0x58	; 88
    315c:	72 e0       	ldi	r23, 0x02	; 2
    315e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3162:	89 2b       	or	r24, r25
    3164:	e9 f2       	breq	.-70     	; 0x3120 <_ZN6IRrecv9decodeJVCEP14decode_results+0x8e>

		if      (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1 ;
    3166:	e9 85       	ldd	r30, Y+9	; 0x09
    3168:	fa 85       	ldd	r31, Y+10	; 0x0a
    316a:	ea 0d       	add	r30, r10
    316c:	fb 1d       	adc	r31, r11
    316e:	80 81       	ld	r24, Z
    3170:	91 81       	ldd	r25, Z+1	; 0x01
    3172:	60 e4       	ldi	r22, 0x40	; 64
    3174:	76 e0       	ldi	r23, 0x06	; 6
    3176:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    317a:	89 2b       	or	r24, r25
    317c:	39 f0       	breq	.+14     	; 0x318c <_ZN6IRrecv9decodeJVCEP14decode_results+0xfa>
    317e:	cc 0c       	add	r12, r12
    3180:	dd 1c       	adc	r13, r13
    3182:	ee 1c       	adc	r14, r14
    3184:	ff 1c       	adc	r15, r15
    3186:	68 94       	set
    3188:	c0 f8       	bld	r12, 0
    318a:	11 c0       	rjmp	.+34     	; 0x31ae <_ZN6IRrecv9decodeJVCEP14decode_results+0x11c>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0 ;
    318c:	e9 85       	ldd	r30, Y+9	; 0x09
    318e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3190:	ea 0d       	add	r30, r10
    3192:	fb 1d       	adc	r31, r11
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	66 e2       	ldi	r22, 0x26	; 38
    319a:	72 e0       	ldi	r23, 0x02	; 2
    319c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    31a0:	89 2b       	or	r24, r25
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <_ZN6IRrecv9decodeJVCEP14decode_results+0x114>
    31a4:	bd cf       	rjmp	.-134    	; 0x3120 <_ZN6IRrecv9decodeJVCEP14decode_results+0x8e>
    31a6:	cc 0c       	add	r12, r12
    31a8:	dd 1c       	adc	r13, r13
    31aa:	ee 1c       	adc	r14, r14
    31ac:	ff 1c       	adc	r15, r15
		else                                                            return false ;
		offset++;
    31ae:	0e 5f       	subi	r16, 0xFE	; 254
    31b0:	1f 4f       	sbci	r17, 0xFF	; 255
    31b2:	84 e0       	ldi	r24, 0x04	; 4
    31b4:	a8 0e       	add	r10, r24
    31b6:	b1 1c       	adc	r11, r1
	if (irparams.rawlen < (2 * JVC_BITS) + 1 )  return false ;

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false ;

	for (int i = 0;  i < JVC_BITS;  i++) {
    31b8:	03 32       	cpi	r16, 0x23	; 35
    31ba:	11 05       	cpc	r17, r1
    31bc:	29 f6       	brne	.-118    	; 0x3148 <_ZN6IRrecv9decodeJVCEP14decode_results+0xb6>
		else                                                            return false ;
		offset++;
	}

	// Stop bit
	if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK))  return false ;
    31be:	e9 85       	ldd	r30, Y+9	; 0x09
    31c0:	fa 85       	ldd	r31, Y+10	; 0x0a
    31c2:	ea 5b       	subi	r30, 0xBA	; 186
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	80 81       	ld	r24, Z
    31c8:	91 81       	ldd	r25, Z+1	; 0x01
    31ca:	68 e5       	ldi	r22, 0x58	; 88
    31cc:	72 e0       	ldi	r23, 0x02	; 2
    31ce:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    31d2:	89 2b       	or	r24, r25
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <_ZN6IRrecv9decodeJVCEP14decode_results+0x146>
    31d6:	a4 cf       	rjmp	.-184    	; 0x3120 <_ZN6IRrecv9decodeJVCEP14decode_results+0x8e>

	// Success
	results->bits        = JVC_BITS;
    31d8:	80 e1       	ldi	r24, 0x10	; 16
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	98 87       	std	Y+8, r25	; 0x08
    31de:	8f 83       	std	Y+7, r24	; 0x07
	results->value       = data;
    31e0:	cb 82       	std	Y+3, r12	; 0x03
    31e2:	dc 82       	std	Y+4, r13	; 0x04
    31e4:	ed 82       	std	Y+5, r14	; 0x05
    31e6:	fe 82       	std	Y+6, r15	; 0x06
    31e8:	89 cf       	rjmp	.-238    	; 0x30fc <_ZN6IRrecv9decodeJVCEP14decode_results+0x6a>
	results->decode_type = JVC;

	return true;
}
    31ea:	df 91       	pop	r29
    31ec:	cf 91       	pop	r28
    31ee:	1f 91       	pop	r17
    31f0:	0f 91       	pop	r16
    31f2:	ff 90       	pop	r15
    31f4:	ef 90       	pop	r14
    31f6:	df 90       	pop	r13
    31f8:	cf 90       	pop	r12
    31fa:	bf 90       	pop	r11
    31fc:	af 90       	pop	r10
    31fe:	08 95       	ret

00003200 <_ZN6IRrecv8decodeLGEP14decode_results>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
bool  IRrecv::decodeLG (decode_results *results)
{
    3200:	af 92       	push	r10
    3202:	bf 92       	push	r11
    3204:	cf 92       	push	r12
    3206:	df 92       	push	r13
    3208:	ef 92       	push	r14
    320a:	ff 92       	push	r15
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    long  data   = 0;
    int   offset = 1; // Skip first space

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
    3214:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3218:	89 33       	cpi	r24, 0x39	; 57
    321a:	10 f4       	brcc	.+4      	; 0x3220 <_ZN6IRrecv8decodeLGEP14decode_results+0x20>
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	70 c0       	rjmp	.+224    	; 0x3300 <_ZN6IRrecv8decodeLGEP14decode_results+0x100>
    3220:	eb 01       	movw	r28, r22

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
    3222:	e9 85       	ldd	r30, Y+9	; 0x09
    3224:	fa 85       	ldd	r31, Y+10	; 0x0a
    3226:	82 81       	ldd	r24, Z+2	; 0x02
    3228:	93 81       	ldd	r25, Z+3	; 0x03
    322a:	60 e4       	ldi	r22, 0x40	; 64
    322c:	7f e1       	ldi	r23, 0x1F	; 31
    322e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3232:	89 2b       	or	r24, r25
    3234:	99 f3       	breq	.-26     	; 0x321c <_ZN6IRrecv8decodeLGEP14decode_results+0x1c>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
    3236:	e9 85       	ldd	r30, Y+9	; 0x09
    3238:	fa 85       	ldd	r31, Y+10	; 0x0a
    323a:	84 81       	ldd	r24, Z+4	; 0x04
    323c:	95 81       	ldd	r25, Z+5	; 0x05
    323e:	60 ea       	ldi	r22, 0xA0	; 160
    3240:	7f e0       	ldi	r23, 0x0F	; 15
    3242:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3246:	89 2b       	or	r24, r25
    3248:	49 f3       	breq	.-46     	; 0x321c <_ZN6IRrecv8decodeLGEP14decode_results+0x1c>
    324a:	38 e0       	ldi	r19, 0x08	; 8
    324c:	a3 2e       	mov	r10, r19
    324e:	b1 2c       	mov	r11, r1
    3250:	03 e0       	ldi	r16, 0x03	; 3
    3252:	10 e0       	ldi	r17, 0x00	; 0
    3254:	c1 2c       	mov	r12, r1
    3256:	d1 2c       	mov	r13, r1
    3258:	76 01       	movw	r14, r12

    for (int i = 0;  i < LG_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
    325a:	e9 85       	ldd	r30, Y+9	; 0x09
    325c:	fa 85       	ldd	r31, Y+10	; 0x0a
    325e:	c8 01       	movw	r24, r16
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	e8 0f       	add	r30, r24
    3266:	f9 1f       	adc	r31, r25
    3268:	80 81       	ld	r24, Z
    326a:	91 81       	ldd	r25, Z+1	; 0x01
    326c:	68 e5       	ldi	r22, 0x58	; 88
    326e:	72 e0       	ldi	r23, 0x02	; 2
    3270:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3274:	89 2b       	or	r24, r25
    3276:	91 f2       	breq	.-92     	; 0x321c <_ZN6IRrecv8decodeLGEP14decode_results+0x1c>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
    3278:	e9 85       	ldd	r30, Y+9	; 0x09
    327a:	fa 85       	ldd	r31, Y+10	; 0x0a
    327c:	ea 0d       	add	r30, r10
    327e:	fb 1d       	adc	r31, r11
    3280:	80 81       	ld	r24, Z
    3282:	91 81       	ldd	r25, Z+1	; 0x01
    3284:	60 e4       	ldi	r22, 0x40	; 64
    3286:	76 e0       	ldi	r23, 0x06	; 6
    3288:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    328c:	89 2b       	or	r24, r25
    328e:	39 f0       	breq	.+14     	; 0x329e <_ZN6IRrecv8decodeLGEP14decode_results+0x9e>
    3290:	cc 0c       	add	r12, r12
    3292:	dd 1c       	adc	r13, r13
    3294:	ee 1c       	adc	r14, r14
    3296:	ff 1c       	adc	r15, r15
    3298:	68 94       	set
    329a:	c0 f8       	bld	r12, 0
    329c:	11 c0       	rjmp	.+34     	; 0x32c0 <_ZN6IRrecv8decodeLGEP14decode_results+0xc0>
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
    329e:	e9 85       	ldd	r30, Y+9	; 0x09
    32a0:	fa 85       	ldd	r31, Y+10	; 0x0a
    32a2:	ea 0d       	add	r30, r10
    32a4:	fb 1d       	adc	r31, r11
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	66 e2       	ldi	r22, 0x26	; 38
    32ac:	72 e0       	ldi	r23, 0x02	; 2
    32ae:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    32b2:	89 2b       	or	r24, r25
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <_ZN6IRrecv8decodeLGEP14decode_results+0xb8>
    32b6:	b2 cf       	rjmp	.-156    	; 0x321c <_ZN6IRrecv8decodeLGEP14decode_results+0x1c>
    32b8:	cc 0c       	add	r12, r12
    32ba:	dd 1c       	adc	r13, r13
    32bc:	ee 1c       	adc	r14, r14
    32be:	ff 1c       	adc	r15, r15
        else                                                           return false ;
        offset++;
    32c0:	0e 5f       	subi	r16, 0xFE	; 254
    32c2:	1f 4f       	sbci	r17, 0xFF	; 255
    32c4:	84 e0       	ldi	r24, 0x04	; 4
    32c6:	a8 0e       	add	r10, r24
    32c8:	b1 1c       	adc	r11, r1

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;

    for (int i = 0;  i < LG_BITS;  i++) {
    32ca:	0b 33       	cpi	r16, 0x3B	; 59
    32cc:	11 05       	cpc	r17, r1
    32ce:	29 f6       	brne	.-118    	; 0x325a <_ZN6IRrecv8decodeLGEP14decode_results+0x5a>
        else                                                           return false ;
        offset++;
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
    32d0:	e9 85       	ldd	r30, Y+9	; 0x09
    32d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    32d4:	ea 58       	subi	r30, 0x8A	; 138
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	80 81       	ld	r24, Z
    32da:	91 81       	ldd	r25, Z+1	; 0x01
    32dc:	68 e5       	ldi	r22, 0x58	; 88
    32de:	72 e0       	ldi	r23, 0x02	; 2
    32e0:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    32e4:	89 2b       	or	r24, r25
    32e6:	09 f4       	brne	.+2      	; 0x32ea <_ZN6IRrecv8decodeLGEP14decode_results+0xea>
    32e8:	99 cf       	rjmp	.-206    	; 0x321c <_ZN6IRrecv8decodeLGEP14decode_results+0x1c>

    // Success
    results->bits        = LG_BITS;
    32ea:	8c e1       	ldi	r24, 0x1C	; 28
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	98 87       	std	Y+8, r25	; 0x08
    32f0:	8f 83       	std	Y+7, r24	; 0x07
    results->value       = data;
    32f2:	cb 82       	std	Y+3, r12	; 0x03
    32f4:	dc 82       	std	Y+4, r13	; 0x04
    32f6:	ed 82       	std	Y+5, r14	; 0x05
    32f8:	fe 82       	std	Y+6, r15	; 0x06
    results->decode_type = LG;
    32fa:	8a e0       	ldi	r24, 0x0A	; 10
    32fc:	88 83       	st	Y, r24
    return true;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
}
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	1f 91       	pop	r17
    3306:	0f 91       	pop	r16
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	df 90       	pop	r13
    330e:	cf 90       	pop	r12
    3310:	bf 90       	pop	r11
    3312:	af 90       	pop	r10
    3314:	08 95       	ret

00003316 <_ZN6IRrecv16decodeMitsubishiEP14decode_results>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
bool  IRrecv::decodeMitsubishi (decode_results *results)
{
    3316:	6f 92       	push	r6
    3318:	7f 92       	push	r7
    331a:	8f 92       	push	r8
    331c:	9f 92       	push	r9
    331e:	af 92       	push	r10
    3320:	bf 92       	push	r11
    3322:	cf 92       	push	r12
    3324:	df 92       	push	r13
    3326:	ef 92       	push	r14
    3328:	ff 92       	push	r15
    332a:	0f 93       	push	r16
    332c:	1f 93       	push	r17
    332e:	cf 93       	push	r28
    3330:	df 93       	push	r29
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
    3332:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3336:	82 32       	cpi	r24, 0x22	; 34
    3338:	08 f4       	brcc	.+2      	; 0x333c <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x26>
    333a:	6c c0       	rjmp	.+216    	; 0x3414 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xfe>
    333c:	8b 01       	movw	r16, r22

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
    333e:	db 01       	movw	r26, r22
    3340:	19 96       	adiw	r26, 0x09	; 9
    3342:	ed 91       	ld	r30, X+
    3344:	fc 91       	ld	r31, X
    3346:	1a 97       	sbiw	r26, 0x0a	; 10
    3348:	82 81       	ldd	r24, Z+2	; 0x02
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	6e e5       	ldi	r22, 0x5E	; 94
    334e:	71 e0       	ldi	r23, 0x01	; 1
    3350:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3354:	89 2b       	or	r24, r25
    3356:	09 f4       	brne	.+2      	; 0x335a <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x44>
    3358:	5d c0       	rjmp	.+186    	; 0x3414 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xfe>
    335a:	63 e0       	ldi	r22, 0x03	; 3
    335c:	a6 2e       	mov	r10, r22
    335e:	b1 2c       	mov	r11, r1
    3360:	c2 e0       	ldi	r28, 0x02	; 2
    3362:	d0 e0       	ldi	r29, 0x00	; 0
    3364:	c1 2c       	mov	r12, r1
    3366:	d1 2c       	mov	r13, r1
    3368:	76 01       	movw	r14, r12
  offset++;

  while (offset + 1 < irparams.rawlen) {
    336a:	35 01       	movw	r6, r10
    336c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	a8 16       	cp	r10, r24
    3374:	b9 06       	cpc	r11, r25
    3376:	0c f0       	brlt	.+2      	; 0x337a <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x64>
    3378:	43 c0       	rjmp	.+134    	; 0x3400 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xea>
    337a:	4e 01       	movw	r8, r28
    337c:	88 0c       	add	r8, r8
    337e:	99 1c       	adc	r9, r9
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
    3380:	d8 01       	movw	r26, r16
    3382:	19 96       	adiw	r26, 0x09	; 9
    3384:	ed 91       	ld	r30, X+
    3386:	fc 91       	ld	r31, X
    3388:	1a 97       	sbiw	r26, 0x0a	; 10
    338a:	e8 0d       	add	r30, r8
    338c:	f9 1d       	adc	r31, r9
    338e:	80 81       	ld	r24, Z
    3390:	91 81       	ldd	r25, Z+1	; 0x01
    3392:	6e e9       	ldi	r22, 0x9E	; 158
    3394:	77 e0       	ldi	r23, 0x07	; 7
    3396:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    339a:	89 2b       	or	r24, r25
    339c:	39 f0       	breq	.+14     	; 0x33ac <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x96>
    339e:	cc 0c       	add	r12, r12
    33a0:	dd 1c       	adc	r13, r13
    33a2:	ee 1c       	adc	r14, r14
    33a4:	ff 1c       	adc	r15, r15
    33a6:	68 94       	set
    33a8:	c0 f8       	bld	r12, 0
    33aa:	12 c0       	rjmp	.+36     	; 0x33d0 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xba>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
    33ac:	f8 01       	movw	r30, r16
    33ae:	81 85       	ldd	r24, Z+9	; 0x09
    33b0:	92 85       	ldd	r25, Z+10	; 0x0a
    33b2:	fc 01       	movw	r30, r24
    33b4:	e8 0d       	add	r30, r8
    33b6:	f9 1d       	adc	r31, r9
    33b8:	80 81       	ld	r24, Z
    33ba:	91 81       	ldd	r25, Z+1	; 0x01
    33bc:	6e ee       	ldi	r22, 0xEE	; 238
    33be:	72 e0       	ldi	r23, 0x02	; 2
    33c0:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    33c4:	89 2b       	or	r24, r25
    33c6:	31 f1       	breq	.+76     	; 0x3414 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xfe>
    33c8:	cc 0c       	add	r12, r12
    33ca:	dd 1c       	adc	r13, r13
    33cc:	ee 1c       	adc	r14, r14
    33ce:	ff 1c       	adc	r15, r15
    else                                                                 return false ;
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    33d0:	c5 01       	movw	r24, r10
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	d8 01       	movw	r26, r16
    33d8:	19 96       	adiw	r26, 0x09	; 9
    33da:	ed 91       	ld	r30, X+
    33dc:	fc 91       	ld	r31, X
    33de:	1a 97       	sbiw	r26, 0x0a	; 10
    33e0:	e8 0f       	add	r30, r24
    33e2:	f9 1f       	adc	r31, r25
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	6e e5       	ldi	r22, 0x5E	; 94
    33ea:	71 e0       	ldi	r23, 0x01	; 1
    33ec:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    33f0:	b2 e0       	ldi	r27, 0x02	; 2
    33f2:	ab 0e       	add	r10, r27
    33f4:	b1 1c       	adc	r11, r1
    33f6:	89 2b       	or	r24, r25
    33f8:	11 f0       	breq	.+4      	; 0x33fe <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xe8>
    offset++;
    33fa:	22 96       	adiw	r28, 0x02	; 2

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
  offset++;

  while (offset + 1 < irparams.rawlen) {
    33fc:	b6 cf       	rjmp	.-148    	; 0x336a <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x54>
    33fe:	e3 01       	movw	r28, r6
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
    3400:	21 97       	sbiw	r28, 0x01	; 1
    3402:	d5 95       	asr	r29
    3404:	c7 95       	ror	r28
    3406:	f8 01       	movw	r30, r16
    3408:	d0 87       	std	Z+8, r29	; 0x08
    340a:	c7 83       	std	Z+7, r28	; 0x07
  if (results->bits < MITSUBISHI_BITS) {
    340c:	60 97       	sbiw	r28, 0x10	; 16
    340e:	24 f4       	brge	.+8      	; 0x3418 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x102>
    results->bits = 0;
    3410:	10 86       	std	Z+8, r1	; 0x08
    3412:	17 82       	std	Z+7, r1	; 0x07
    return false;
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	07 c0       	rjmp	.+14     	; 0x3426 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x110>
  }

  results->value       = data;
    3418:	c3 82       	std	Z+3, r12	; 0x03
    341a:	d4 82       	std	Z+4, r13	; 0x04
    341c:	e5 82       	std	Z+5, r14	; 0x05
    341e:	f6 82       	std	Z+6, r15	; 0x06
  results->decode_type = MITSUBISHI;
    3420:	8c e0       	ldi	r24, 0x0C	; 12
    3422:	80 83       	st	Z, r24
  return true;
    3424:	81 e0       	ldi	r24, 0x01	; 1
}
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	bf 90       	pop	r11
    3438:	af 90       	pop	r10
    343a:	9f 90       	pop	r9
    343c:	8f 90       	pop	r8
    343e:	7f 90       	pop	r7
    3440:	6f 90       	pop	r6
    3442:	08 95       	ret

00003444 <_ZN6IRrecv9decodeNECEP14decode_results>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
bool  IRrecv::decodeNEC (decode_results *results)
{
    3444:	af 92       	push	r10
    3446:	bf 92       	push	r11
    3448:	cf 92       	push	r12
    344a:	df 92       	push	r13
    344c:	ef 92       	push	r14
    344e:	ff 92       	push	r15
    3450:	0f 93       	push	r16
    3452:	1f 93       	push	r17
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
    3458:	eb 01       	movw	r28, r22
	long  data   = 0;  // We decode in to here; Start with nothing
	int   offset = 1;  // Index in to results; Skip first entry!?

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
    345a:	e9 85       	ldd	r30, Y+9	; 0x09
    345c:	fa 85       	ldd	r31, Y+10	; 0x0a
    345e:	82 81       	ldd	r24, Z+2	; 0x02
    3460:	93 81       	ldd	r25, Z+3	; 0x03
    3462:	68 e2       	ldi	r22, 0x28	; 40
    3464:	73 e2       	ldi	r23, 0x23	; 35
    3466:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    346a:	89 2b       	or	r24, r25
    346c:	11 f4       	brne	.+4      	; 0x3472 <_ZN6IRrecv9decodeNECEP14decode_results+0x2e>
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	7c c0       	rjmp	.+248    	; 0x356a <_ZN6IRrecv9decodeNECEP14decode_results+0x126>
	offset++;

	// Check for repeat
	if ( (irparams.rawlen == 4)
    3472:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
    3476:	84 30       	cpi	r24, 0x04	; 4
    3478:	09 f5       	brne	.+66     	; 0x34bc <_ZN6IRrecv9decodeNECEP14decode_results+0x78>
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
	offset++;

	// Check for repeat
	if ( (irparams.rawlen == 4)
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
    347a:	e9 85       	ldd	r30, Y+9	; 0x09
    347c:	fa 85       	ldd	r31, Y+10	; 0x0a
    347e:	84 81       	ldd	r24, Z+4	; 0x04
    3480:	95 81       	ldd	r25, Z+5	; 0x05
    3482:	6a ec       	ldi	r22, 0xCA	; 202
    3484:	78 e0       	ldi	r23, 0x08	; 8
    3486:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    348a:	89 2b       	or	r24, r25
    348c:	b9 f0       	breq	.+46     	; 0x34bc <_ZN6IRrecv9decodeNECEP14decode_results+0x78>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
    348e:	e9 85       	ldd	r30, Y+9	; 0x09
    3490:	fa 85       	ldd	r31, Y+10	; 0x0a
    3492:	86 81       	ldd	r24, Z+6	; 0x06
    3494:	97 81       	ldd	r25, Z+7	; 0x07
    3496:	60 e3       	ldi	r22, 0x30	; 48
    3498:	72 e0       	ldi	r23, 0x02	; 2
    349a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    349e:	89 2b       	or	r24, r25
    34a0:	69 f0       	breq	.+26     	; 0x34bc <_ZN6IRrecv9decodeNECEP14decode_results+0x78>
	   ) {
		results->bits        = 0;
    34a2:	18 86       	std	Y+8, r1	; 0x08
    34a4:	1f 82       	std	Y+7, r1	; 0x07
		results->value       = REPEAT;
    34a6:	8f ef       	ldi	r24, 0xFF	; 255
    34a8:	9f ef       	ldi	r25, 0xFF	; 255
    34aa:	dc 01       	movw	r26, r24
    34ac:	8b 83       	std	Y+3, r24	; 0x03
    34ae:	9c 83       	std	Y+4, r25	; 0x04
    34b0:	ad 83       	std	Y+5, r26	; 0x05
    34b2:	be 83       	std	Y+6, r27	; 0x06
		results->decode_type = NEC;
    34b4:	83 e0       	ldi	r24, 0x03	; 3
    34b6:	88 83       	st	Y, r24
		return true;
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	57 c0       	rjmp	.+174    	; 0x356a <_ZN6IRrecv9decodeNECEP14decode_results+0x126>
	}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
    34bc:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    34c0:	84 34       	cpi	r24, 0x44	; 68
    34c2:	a8 f2       	brcs	.-86     	; 0x346e <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>

	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
    34c4:	e9 85       	ldd	r30, Y+9	; 0x09
    34c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    34c8:	84 81       	ldd	r24, Z+4	; 0x04
    34ca:	95 81       	ldd	r25, Z+5	; 0x05
    34cc:	64 e9       	ldi	r22, 0x94	; 148
    34ce:	71 e1       	ldi	r23, 0x11	; 17
    34d0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    34d4:	89 2b       	or	r24, r25
    34d6:	59 f2       	breq	.-106    	; 0x346e <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>
    34d8:	06 e0       	ldi	r16, 0x06	; 6
    34da:	10 e0       	ldi	r17, 0x00	; 0
    34dc:	c1 2c       	mov	r12, r1
    34de:	d1 2c       	mov	r13, r1
    34e0:	76 01       	movw	r14, r12
	offset++;

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
    34e2:	e9 85       	ldd	r30, Y+9	; 0x09
    34e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    34e6:	e0 0f       	add	r30, r16
    34e8:	f1 1f       	adc	r31, r17
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	60 e3       	ldi	r22, 0x30	; 48
    34f0:	72 e0       	ldi	r23, 0x02	; 2
    34f2:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    34f6:	89 2b       	or	r24, r25
    34f8:	09 f4       	brne	.+2      	; 0x34fc <_ZN6IRrecv9decodeNECEP14decode_results+0xb8>
    34fa:	b9 cf       	rjmp	.-142    	; 0x346e <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>
		offset++;
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
    34fc:	58 01       	movw	r10, r16
    34fe:	82 e0       	ldi	r24, 0x02	; 2
    3500:	a8 0e       	add	r10, r24
    3502:	b1 1c       	adc	r11, r1
    3504:	e9 85       	ldd	r30, Y+9	; 0x09
    3506:	fa 85       	ldd	r31, Y+10	; 0x0a
    3508:	ea 0d       	add	r30, r10
    350a:	fb 1d       	adc	r31, r11
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	6a e9       	ldi	r22, 0x9A	; 154
    3512:	76 e0       	ldi	r23, 0x06	; 6
    3514:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3518:	89 2b       	or	r24, r25
    351a:	39 f0       	breq	.+14     	; 0x352a <_ZN6IRrecv9decodeNECEP14decode_results+0xe6>
    351c:	cc 0c       	add	r12, r12
    351e:	dd 1c       	adc	r13, r13
    3520:	ee 1c       	adc	r14, r14
    3522:	ff 1c       	adc	r15, r15
    3524:	68 94       	set
    3526:	c0 f8       	bld	r12, 0
    3528:	12 c0       	rjmp	.+36     	; 0x354e <_ZN6IRrecv9decodeNECEP14decode_results+0x10a>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
    352a:	89 85       	ldd	r24, Y+9	; 0x09
    352c:	9a 85       	ldd	r25, Y+10	; 0x0a
    352e:	fc 01       	movw	r30, r24
    3530:	ea 0d       	add	r30, r10
    3532:	fb 1d       	adc	r31, r11
    3534:	80 81       	ld	r24, Z
    3536:	91 81       	ldd	r25, Z+1	; 0x01
    3538:	60 e3       	ldi	r22, 0x30	; 48
    353a:	72 e0       	ldi	r23, 0x02	; 2
    353c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3540:	89 2b       	or	r24, r25
    3542:	09 f4       	brne	.+2      	; 0x3546 <_ZN6IRrecv9decodeNECEP14decode_results+0x102>
    3544:	94 cf       	rjmp	.-216    	; 0x346e <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>
    3546:	cc 0c       	add	r12, r12
    3548:	dd 1c       	adc	r13, r13
    354a:	ee 1c       	adc	r14, r14
    354c:	ff 1c       	adc	r15, r15
    354e:	0c 5f       	subi	r16, 0xFC	; 252
    3550:	1f 4f       	sbci	r17, 0xFF	; 255
	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
	offset++;

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
    3552:	06 38       	cpi	r16, 0x86	; 134
    3554:	11 05       	cpc	r17, r1
    3556:	29 f6       	brne	.-118    	; 0x34e2 <_ZN6IRrecv9decodeNECEP14decode_results+0x9e>
		else                                                            return false ;
		offset++;
	}

	// Success
	results->bits        = NEC_BITS;
    3558:	80 e2       	ldi	r24, 0x20	; 32
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	98 87       	std	Y+8, r25	; 0x08
    355e:	8f 83       	std	Y+7, r24	; 0x07
	results->value       = data;
    3560:	cb 82       	std	Y+3, r12	; 0x03
    3562:	dc 82       	std	Y+4, r13	; 0x04
    3564:	ed 82       	std	Y+5, r14	; 0x05
    3566:	fe 82       	std	Y+6, r15	; 0x06
    3568:	a5 cf       	rjmp	.-182    	; 0x34b4 <_ZN6IRrecv9decodeNECEP14decode_results+0x70>
	results->decode_type = NEC;

	return true;
}
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	1f 91       	pop	r17
    3570:	0f 91       	pop	r16
    3572:	ff 90       	pop	r15
    3574:	ef 90       	pop	r14
    3576:	df 90       	pop	r13
    3578:	cf 90       	pop	r12
    357a:	bf 90       	pop	r11
    357c:	af 90       	pop	r10
    357e:	08 95       	ret

00003580 <_ZN6IRrecv15decodePanasonicEP14decode_results>:
#endif

//+=============================================================================
#if DECODE_PANASONIC
bool  IRrecv::decodePanasonic (decode_results *results)
{
    3580:	6f 92       	push	r6
    3582:	7f 92       	push	r7
    3584:	8f 92       	push	r8
    3586:	9f 92       	push	r9
    3588:	af 92       	push	r10
    358a:	bf 92       	push	r11
    358c:	cf 92       	push	r12
    358e:	df 92       	push	r13
    3590:	ef 92       	push	r14
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	eb 01       	movw	r28, r22
    unsigned long long  data   = 0;
    int                 offset = 1;

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
    359e:	e9 85       	ldd	r30, Y+9	; 0x09
    35a0:	fa 85       	ldd	r31, Y+10	; 0x0a
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	6e ea       	ldi	r22, 0xAE	; 174
    35a8:	7d e0       	ldi	r23, 0x0D	; 13
    35aa:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    35ae:	89 2b       	or	r24, r25
    35b0:	11 f4       	brne	.+4      	; 0x35b6 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x36>
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	6c c0       	rjmp	.+216    	; 0x368e <_ZN6IRrecv15decodePanasonicEP14decode_results+0x10e>
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
    35b6:	e9 85       	ldd	r30, Y+9	; 0x09
    35b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    35ba:	84 81       	ldd	r24, Z+4	; 0x04
    35bc:	95 81       	ldd	r25, Z+5	; 0x05
    35be:	66 ed       	ldi	r22, 0xD6	; 214
    35c0:	76 e0       	ldi	r23, 0x06	; 6
    35c2:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    35c6:	89 2b       	or	r24, r25
    35c8:	a1 f3       	breq	.-24     	; 0x35b2 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x32>
    35ca:	86 e0       	ldi	r24, 0x06	; 6
    35cc:	a8 2e       	mov	r10, r24
    35ce:	b1 2c       	mov	r11, r1
    35d0:	c1 2c       	mov	r12, r1
    35d2:	d1 2c       	mov	r13, r1
    35d4:	e1 2c       	mov	r14, r1
    35d6:	f1 2c       	mov	r15, r1
    35d8:	00 e0       	ldi	r16, 0x00	; 0
    35da:	10 e0       	ldi	r17, 0x00	; 0
    35dc:	61 2c       	mov	r6, r1
    35de:	71 2c       	mov	r7, r1

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
    35e0:	e9 85       	ldd	r30, Y+9	; 0x09
    35e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    35e4:	ea 0d       	add	r30, r10
    35e6:	fb 1d       	adc	r31, r11
    35e8:	80 81       	ld	r24, Z
    35ea:	91 81       	ldd	r25, Z+1	; 0x01
    35ec:	66 ef       	ldi	r22, 0xF6	; 246
    35ee:	71 e0       	ldi	r23, 0x01	; 1
    35f0:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    35f4:	89 2b       	or	r24, r25
    35f6:	e9 f2       	breq	.-70     	; 0x35b2 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x32>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
    35f8:	45 01       	movw	r8, r10
    35fa:	82 e0       	ldi	r24, 0x02	; 2
    35fc:	88 0e       	add	r8, r24
    35fe:	91 1c       	adc	r9, r1
    3600:	e9 85       	ldd	r30, Y+9	; 0x09
    3602:	fa 85       	ldd	r31, Y+10	; 0x0a
    3604:	e8 0d       	add	r30, r8
    3606:	f9 1d       	adc	r31, r9
    3608:	80 81       	ld	r24, Z
    360a:	91 81       	ldd	r25, Z+1	; 0x01
    360c:	6c ed       	ldi	r22, 0xDC	; 220
    360e:	74 e0       	ldi	r23, 0x04	; 4
    3610:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3614:	89 2b       	or	r24, r25
    3616:	49 f0       	breq	.+18     	; 0x362a <_ZN6IRrecv15decodePanasonicEP14decode_results+0xaa>
    3618:	96 01       	movw	r18, r12
    361a:	a7 01       	movw	r20, r14
    361c:	b8 01       	movw	r22, r16
    361e:	c3 01       	movw	r24, r6
    3620:	01 e0       	ldi	r16, 0x01	; 1
    3622:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__ashldi3>
    3626:	21 60       	ori	r18, 0x01	; 1
    3628:	15 c0       	rjmp	.+42     	; 0x3654 <_ZN6IRrecv15decodePanasonicEP14decode_results+0xd4>
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
    362a:	89 85       	ldd	r24, Y+9	; 0x09
    362c:	9a 85       	ldd	r25, Y+10	; 0x0a
    362e:	fc 01       	movw	r30, r24
    3630:	e8 0d       	add	r30, r8
    3632:	f9 1d       	adc	r31, r9
    3634:	80 81       	ld	r24, Z
    3636:	91 81       	ldd	r25, Z+1	; 0x01
    3638:	60 e9       	ldi	r22, 0x90	; 144
    363a:	71 e0       	ldi	r23, 0x01	; 1
    363c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3640:	89 2b       	or	r24, r25
    3642:	09 f4       	brne	.+2      	; 0x3646 <_ZN6IRrecv15decodePanasonicEP14decode_results+0xc6>
    3644:	b6 cf       	rjmp	.-148    	; 0x35b2 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x32>
    3646:	96 01       	movw	r18, r12
    3648:	a7 01       	movw	r20, r14
    364a:	b8 01       	movw	r22, r16
    364c:	c3 01       	movw	r24, r6
    364e:	01 e0       	ldi	r16, 0x01	; 1
    3650:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__ashldi3>
    3654:	69 01       	movw	r12, r18
    3656:	7a 01       	movw	r14, r20
    3658:	8b 01       	movw	r16, r22
    365a:	3c 01       	movw	r6, r24
    365c:	84 e0       	ldi	r24, 0x04	; 4
    365e:	a8 0e       	add	r10, r24
    3660:	b1 1c       	adc	r11, r1

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
    3662:	86 ec       	ldi	r24, 0xC6	; 198
    3664:	a8 16       	cp	r10, r24
    3666:	b1 04       	cpc	r11, r1
    3668:	09 f0       	breq	.+2      	; 0x366c <_ZN6IRrecv15decodePanasonicEP14decode_results+0xec>
    366a:	ba cf       	rjmp	.-140    	; 0x35e0 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x60>
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
        else                                                                 return false ;
        offset++;
    }

    results->value       = (unsigned long)data;
    366c:	2b 83       	std	Y+3, r18	; 0x03
    366e:	3c 83       	std	Y+4, r19	; 0x04
    3670:	4d 83       	std	Y+5, r20	; 0x05
    3672:	5e 83       	std	Y+6, r21	; 0x06
    results->address     = (unsigned int)(data >> 32);
    3674:	c3 01       	movw	r24, r6
    3676:	00 e2       	ldi	r16, 0x20	; 32
    3678:	0e 94 ef 21 	call	0x43de	; 0x43de <__lshrdi3>
    367c:	29 83       	std	Y+1, r18	; 0x01
    367e:	3a 83       	std	Y+2, r19	; 0x02
    results->decode_type = PANASONIC;
    3680:	85 e0       	ldi	r24, 0x05	; 5
    3682:	88 83       	st	Y, r24
    results->bits        = PANASONIC_BITS;
    3684:	80 e3       	ldi	r24, 0x30	; 48
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	98 87       	std	Y+8, r25	; 0x08
    368a:	8f 83       	std	Y+7, r24	; 0x07

    return true;
    368c:	81 e0       	ldi	r24, 0x01	; 1
}
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	df 90       	pop	r13
    369c:	cf 90       	pop	r12
    369e:	bf 90       	pop	r11
    36a0:	af 90       	pop	r10
    36a2:	9f 90       	pop	r9
    36a4:	8f 90       	pop	r8
    36a6:	7f 90       	pop	r7
    36a8:	6f 90       	pop	r6
    36aa:	08 95       	ret

000036ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>:
			space(t);
			mark(t);
		}
	}

	space(0);  // Always end with the LED off
    36ac:	8f 92       	push	r8
    36ae:	9f 92       	push	r9
    36b0:	af 92       	push	r10
    36b2:	bf 92       	push	r11
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	da 01       	movw	r26, r20
    36c6:	8d 91       	ld	r24, X+
    36c8:	9c 91       	ld	r25, X
    36ca:	db 01       	movw	r26, r22
    36cc:	1b 96       	adiw	r26, 0x0b	; 11
    36ce:	ed 91       	ld	r30, X+
    36d0:	fc 91       	ld	r31, X
    36d2:	1c 97       	sbiw	r26, 0x0c	; 12
    36d4:	8e 17       	cp	r24, r30
    36d6:	9f 07       	cpc	r25, r31
    36d8:	0c f0       	brlt	.+2      	; 0x36dc <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x30>
    36da:	4d c0       	rjmp	.+154    	; 0x3776 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xca>
    36dc:	fc 01       	movw	r30, r24
    36de:	ee 0f       	add	r30, r30
    36e0:	ff 1f       	adc	r31, r31
    36e2:	19 96       	adiw	r26, 0x09	; 9
    36e4:	6d 91       	ld	r22, X+
    36e6:	7c 91       	ld	r23, X
    36e8:	1a 97       	sbiw	r26, 0x0a	; 10
    36ea:	e6 0f       	add	r30, r22
    36ec:	f7 1f       	adc	r31, r23
    36ee:	a0 80       	ld	r10, Z
    36f0:	b1 80       	ldd	r11, Z+1	; 0x01
    36f2:	81 70       	andi	r24, 0x01	; 1
    36f4:	99 27       	eor	r25, r25
    36f6:	6c 01       	movw	r12, r24
    36f8:	b1 e0       	ldi	r27, 0x01	; 1
    36fa:	cb 26       	eor	r12, r27
    36fc:	89 2b       	or	r24, r25
    36fe:	19 f4       	brne	.+6      	; 0x3706 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x5a>
    3700:	8c e9       	ldi	r24, 0x9C	; 156
    3702:	9f ef       	ldi	r25, 0xFF	; 255
    3704:	02 c0       	rjmp	.+4      	; 0x370a <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x5e>
    3706:	84 e6       	ldi	r24, 0x64	; 100
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	79 01       	movw	r14, r18
    370c:	ea 01       	movw	r28, r20
    370e:	4c 01       	movw	r8, r24
    3710:	80 0e       	add	r8, r16
    3712:	91 1e       	adc	r9, r17
    3714:	b4 01       	movw	r22, r8
    3716:	c5 01       	movw	r24, r10
    3718:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z5MATCHii>
    371c:	89 2b       	or	r24, r25
    371e:	99 f4       	brne	.+38     	; 0x3746 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x9a>
    3720:	80 0e       	add	r8, r16
    3722:	91 1e       	adc	r9, r17
    3724:	b4 01       	movw	r22, r8
    3726:	c5 01       	movw	r24, r10
    3728:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z5MATCHii>
    372c:	89 2b       	or	r24, r25
    372e:	71 f4       	brne	.+28     	; 0x374c <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xa0>
    3730:	b8 01       	movw	r22, r16
    3732:	68 0d       	add	r22, r8
    3734:	79 1d       	adc	r23, r9
    3736:	c5 01       	movw	r24, r10
    3738:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z5MATCHii>
    373c:	89 2b       	or	r24, r25
    373e:	f1 f0       	breq	.+60     	; 0x377c <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xd0>
    3740:	23 e0       	ldi	r18, 0x03	; 3
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	05 c0       	rjmp	.+10     	; 0x3750 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xa4>
    3746:	21 e0       	ldi	r18, 0x01	; 1
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	02 c0       	rjmp	.+4      	; 0x3750 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xa4>
    374c:	22 e0       	ldi	r18, 0x02	; 2
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	f7 01       	movw	r30, r14
    3752:	80 81       	ld	r24, Z
    3754:	91 81       	ldd	r25, Z+1	; 0x01
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	82 17       	cp	r24, r18
    375a:	93 07       	cpc	r25, r19
    375c:	1c f4       	brge	.+6      	; 0x3764 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xb8>
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	07 c0       	rjmp	.+14     	; 0x3772 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xc6>
    3764:	11 82       	std	Z+1, r1	; 0x01
    3766:	10 82       	st	Z, r1
    3768:	88 81       	ld	r24, Y
    376a:	99 81       	ldd	r25, Y+1	; 0x01
    376c:	01 96       	adiw	r24, 0x01	; 1
    376e:	99 83       	std	Y+1, r25	; 0x01
    3770:	88 83       	st	Y, r24
    3772:	c6 01       	movw	r24, r12
    3774:	05 c0       	rjmp	.+10     	; 0x3780 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xd4>
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xd4>
    377c:	8f ef       	ldi	r24, 0xFF	; 255
    377e:	9f ef       	ldi	r25, 0xFF	; 255
    3780:	df 91       	pop	r29
    3782:	cf 91       	pop	r28
    3784:	1f 91       	pop	r17
    3786:	0f 91       	pop	r16
    3788:	ff 90       	pop	r15
    378a:	ef 90       	pop	r14
    378c:	df 90       	pop	r13
    378e:	cf 90       	pop	r12
    3790:	bf 90       	pop	r11
    3792:	af 90       	pop	r10
    3794:	9f 90       	pop	r9
    3796:	8f 90       	pop	r8
    3798:	08 95       	ret

0000379a <_ZN6IRrecv9decodeRC5EP14decode_results>:
    379a:	4f 92       	push	r4
    379c:	5f 92       	push	r5
    379e:	6f 92       	push	r6
    37a0:	7f 92       	push	r7
    37a2:	8f 92       	push	r8
    37a4:	9f 92       	push	r9
    37a6:	af 92       	push	r10
    37a8:	bf 92       	push	r11
    37aa:	cf 92       	push	r12
    37ac:	df 92       	push	r13
    37ae:	ef 92       	push	r14
    37b0:	ff 92       	push	r15
    37b2:	0f 93       	push	r16
    37b4:	1f 93       	push	r17
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	00 d0       	rcall	.+0      	; 0x37bc <_ZN6IRrecv9decodeRC5EP14decode_results+0x22>
    37bc:	00 d0       	rcall	.+0      	; 0x37be <_ZN6IRrecv9decodeRC5EP14decode_results+0x24>
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	1c 82       	std	Y+4, r1	; 0x04
    37c4:	1b 82       	std	Y+3, r1	; 0x03
    37c6:	21 e0       	ldi	r18, 0x01	; 1
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	3a 83       	std	Y+2, r19	; 0x02
    37cc:	29 83       	std	Y+1, r18	; 0x01
    37ce:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <irparams+0x4>
    37d2:	2d 30       	cpi	r18, 0x0D	; 13
    37d4:	10 f4       	brcc	.+4      	; 0x37da <_ZN6IRrecv9decodeRC5EP14decode_results+0x40>
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	6f c0       	rjmp	.+222    	; 0x38b8 <_ZN6IRrecv9decodeRC5EP14decode_results+0x11e>
    37da:	7b 01       	movw	r14, r22
    37dc:	6c 01       	movw	r12, r24
    37de:	09 e7       	ldi	r16, 0x79	; 121
    37e0:	13 e0       	ldi	r17, 0x03	; 3
    37e2:	9e 01       	movw	r18, r28
    37e4:	2d 5f       	subi	r18, 0xFD	; 253
    37e6:	3f 4f       	sbci	r19, 0xFF	; 255
    37e8:	ae 01       	movw	r20, r28
    37ea:	4f 5f       	subi	r20, 0xFF	; 255
    37ec:	5f 4f       	sbci	r21, 0xFF	; 255
    37ee:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    37f2:	89 2b       	or	r24, r25
    37f4:	81 f7       	brne	.-32     	; 0x37d6 <_ZN6IRrecv9decodeRC5EP14decode_results+0x3c>
    37f6:	9e 01       	movw	r18, r28
    37f8:	2d 5f       	subi	r18, 0xFD	; 253
    37fa:	3f 4f       	sbci	r19, 0xFF	; 255
    37fc:	ae 01       	movw	r20, r28
    37fe:	4f 5f       	subi	r20, 0xFF	; 255
    3800:	5f 4f       	sbci	r21, 0xFF	; 255
    3802:	b7 01       	movw	r22, r14
    3804:	c6 01       	movw	r24, r12
    3806:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	21 f7       	brne	.-56     	; 0x37d6 <_ZN6IRrecv9decodeRC5EP14decode_results+0x3c>
    380e:	9e 01       	movw	r18, r28
    3810:	2d 5f       	subi	r18, 0xFD	; 253
    3812:	3f 4f       	sbci	r19, 0xFF	; 255
    3814:	ae 01       	movw	r20, r28
    3816:	4f 5f       	subi	r20, 0xFF	; 255
    3818:	5f 4f       	sbci	r21, 0xFF	; 255
    381a:	b7 01       	movw	r22, r14
    381c:	c6 01       	movw	r24, r12
    381e:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    3822:	89 2b       	or	r24, r25
    3824:	c1 f6       	brne	.-80     	; 0x37d6 <_ZN6IRrecv9decodeRC5EP14decode_results+0x3c>
    3826:	41 2c       	mov	r4, r1
    3828:	51 2c       	mov	r5, r1
    382a:	32 01       	movw	r6, r4
    382c:	a1 2c       	mov	r10, r1
    382e:	b1 2c       	mov	r11, r1
    3830:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	29 81       	ldd	r18, Y+1	; 0x01
    3838:	3a 81       	ldd	r19, Y+2	; 0x02
    383a:	28 17       	cp	r18, r24
    383c:	39 07       	cpc	r19, r25
    383e:	9c f5       	brge	.+102    	; 0x38a6 <_ZN6IRrecv9decodeRC5EP14decode_results+0x10c>
    3840:	09 e7       	ldi	r16, 0x79	; 121
    3842:	13 e0       	ldi	r17, 0x03	; 3
    3844:	9e 01       	movw	r18, r28
    3846:	2d 5f       	subi	r18, 0xFD	; 253
    3848:	3f 4f       	sbci	r19, 0xFF	; 255
    384a:	ae 01       	movw	r20, r28
    384c:	4f 5f       	subi	r20, 0xFF	; 255
    384e:	5f 4f       	sbci	r21, 0xFF	; 255
    3850:	b7 01       	movw	r22, r14
    3852:	c6 01       	movw	r24, r12
    3854:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    3858:	4c 01       	movw	r8, r24
    385a:	9e 01       	movw	r18, r28
    385c:	2d 5f       	subi	r18, 0xFD	; 253
    385e:	3f 4f       	sbci	r19, 0xFF	; 255
    3860:	ae 01       	movw	r20, r28
    3862:	4f 5f       	subi	r20, 0xFF	; 255
    3864:	5f 4f       	sbci	r21, 0xFF	; 255
    3866:	b7 01       	movw	r22, r14
    3868:	c6 01       	movw	r24, r12
    386a:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    386e:	21 e0       	ldi	r18, 0x01	; 1
    3870:	82 16       	cp	r8, r18
    3872:	91 04       	cpc	r9, r1
    3874:	51 f4       	brne	.+20     	; 0x388a <_ZN6IRrecv9decodeRC5EP14decode_results+0xf0>
    3876:	89 2b       	or	r24, r25
    3878:	09 f0       	breq	.+2      	; 0x387c <_ZN6IRrecv9decodeRC5EP14decode_results+0xe2>
    387a:	ad cf       	rjmp	.-166    	; 0x37d6 <_ZN6IRrecv9decodeRC5EP14decode_results+0x3c>
    387c:	44 0c       	add	r4, r4
    387e:	55 1c       	adc	r5, r5
    3880:	66 1c       	adc	r6, r6
    3882:	77 1c       	adc	r7, r7
    3884:	68 94       	set
    3886:	40 f8       	bld	r4, 0
    3888:	0a c0       	rjmp	.+20     	; 0x389e <_ZN6IRrecv9decodeRC5EP14decode_results+0x104>
    388a:	89 28       	or	r8, r9
    388c:	09 f0       	breq	.+2      	; 0x3890 <_ZN6IRrecv9decodeRC5EP14decode_results+0xf6>
    388e:	a3 cf       	rjmp	.-186    	; 0x37d6 <_ZN6IRrecv9decodeRC5EP14decode_results+0x3c>
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	09 f0       	breq	.+2      	; 0x3896 <_ZN6IRrecv9decodeRC5EP14decode_results+0xfc>
    3894:	a0 cf       	rjmp	.-192    	; 0x37d6 <_ZN6IRrecv9decodeRC5EP14decode_results+0x3c>
    3896:	44 0c       	add	r4, r4
    3898:	55 1c       	adc	r5, r5
    389a:	66 1c       	adc	r6, r6
    389c:	77 1c       	adc	r7, r7
    389e:	8f ef       	ldi	r24, 0xFF	; 255
    38a0:	a8 1a       	sub	r10, r24
    38a2:	b8 0a       	sbc	r11, r24
    38a4:	c5 cf       	rjmp	.-118    	; 0x3830 <_ZN6IRrecv9decodeRC5EP14decode_results+0x96>
    38a6:	f7 01       	movw	r30, r14
    38a8:	b0 86       	std	Z+8, r11	; 0x08
    38aa:	a7 82       	std	Z+7, r10	; 0x07
    38ac:	43 82       	std	Z+3, r4	; 0x03
    38ae:	54 82       	std	Z+4, r5	; 0x04
    38b0:	65 82       	std	Z+5, r6	; 0x05
    38b2:	76 82       	std	Z+6, r7	; 0x06
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	80 83       	st	Z, r24
    38b8:	0f 90       	pop	r0
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	df 91       	pop	r29
    38c2:	cf 91       	pop	r28
    38c4:	1f 91       	pop	r17
    38c6:	0f 91       	pop	r16
    38c8:	ff 90       	pop	r15
    38ca:	ef 90       	pop	r14
    38cc:	df 90       	pop	r13
    38ce:	cf 90       	pop	r12
    38d0:	bf 90       	pop	r11
    38d2:	af 90       	pop	r10
    38d4:	9f 90       	pop	r9
    38d6:	8f 90       	pop	r8
    38d8:	7f 90       	pop	r7
    38da:	6f 90       	pop	r6
    38dc:	5f 90       	pop	r5
    38de:	4f 90       	pop	r4
    38e0:	08 95       	ret

000038e2 <_ZN6IRrecv9decodeRC6EP14decode_results>:
#endif

//+=============================================================================
#if DECODE_RC6
bool  IRrecv::decodeRC6 (decode_results *results)
{
    38e2:	2f 92       	push	r2
    38e4:	3f 92       	push	r3
    38e6:	4f 92       	push	r4
    38e8:	5f 92       	push	r5
    38ea:	6f 92       	push	r6
    38ec:	7f 92       	push	r7
    38ee:	8f 92       	push	r8
    38f0:	9f 92       	push	r9
    38f2:	af 92       	push	r10
    38f4:	bf 92       	push	r11
    38f6:	cf 92       	push	r12
    38f8:	df 92       	push	r13
    38fa:	ef 92       	push	r14
    38fc:	ff 92       	push	r15
    38fe:	0f 93       	push	r16
    3900:	1f 93       	push	r17
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	00 d0       	rcall	.+0      	; 0x3908 <_ZN6IRrecv9decodeRC6EP14decode_results+0x26>
    3908:	00 d0       	rcall	.+0      	; 0x390a <_ZN6IRrecv9decodeRC6EP14decode_results+0x28>
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
	int   nbits;
	long  data   = 0;
	int   used   = 0;
    390e:	1c 82       	std	Y+4, r1	; 0x04
    3910:	1b 82       	std	Y+3, r1	; 0x03
	int   offset = 1;  // Skip first space

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
    3912:	db 01       	movw	r26, r22
    3914:	1b 96       	adiw	r26, 0x0b	; 11
    3916:	2d 91       	ld	r18, X+
    3918:	3c 91       	ld	r19, X
    391a:	1c 97       	sbiw	r26, 0x0c	; 12
    391c:	12 16       	cp	r1, r18
    391e:	13 06       	cpc	r1, r19
    3920:	14 f0       	brlt	.+4      	; 0x3926 <_ZN6IRrecv9decodeRC6EP14decode_results+0x44>
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	c2 c0       	rjmp	.+388    	; 0x3aaa <_ZN6IRrecv9decodeRC6EP14decode_results+0x1c8>
    3926:	7b 01       	movw	r14, r22
    3928:	6c 01       	movw	r12, r24

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
    392a:	db 01       	movw	r26, r22
    392c:	19 96       	adiw	r26, 0x09	; 9
    392e:	ed 91       	ld	r30, X+
    3930:	fc 91       	ld	r31, X
    3932:	1a 97       	sbiw	r26, 0x0a	; 10
    3934:	82 e0       	ldi	r24, 0x02	; 2
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9a 83       	std	Y+2, r25	; 0x02
    393a:	89 83       	std	Y+1, r24	; 0x01
    393c:	82 81       	ldd	r24, Z+2	; 0x02
    393e:	93 81       	ldd	r25, Z+3	; 0x03
    3940:	6a e6       	ldi	r22, 0x6A	; 106
    3942:	7a e0       	ldi	r23, 0x0A	; 10
    3944:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3948:	89 2b       	or	r24, r25
    394a:	59 f3       	breq	.-42     	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
    394c:	d7 01       	movw	r26, r14
    394e:	19 96       	adiw	r26, 0x09	; 9
    3950:	ed 91       	ld	r30, X+
    3952:	fc 91       	ld	r31, X
    3954:	1a 97       	sbiw	r26, 0x0a	; 10
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	9a 81       	ldd	r25, Y+2	; 0x02
    395a:	9c 01       	movw	r18, r24
    395c:	2f 5f       	subi	r18, 0xFF	; 255
    395e:	3f 4f       	sbci	r19, 0xFF	; 255
    3960:	3a 83       	std	Y+2, r19	; 0x02
    3962:	29 83       	std	Y+1, r18	; 0x01
    3964:	88 0f       	add	r24, r24
    3966:	99 1f       	adc	r25, r25
    3968:	e8 0f       	add	r30, r24
    396a:	f9 1f       	adc	r31, r25
    396c:	80 81       	ld	r24, Z
    396e:	91 81       	ldd	r25, Z+1	; 0x01
    3970:	69 e7       	ldi	r22, 0x79	; 121
    3972:	73 e0       	ldi	r23, 0x03	; 3
    3974:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3978:	89 2b       	or	r24, r25
    397a:	99 f2       	breq	.-90     	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
    397c:	0c eb       	ldi	r16, 0xBC	; 188
    397e:	11 e0       	ldi	r17, 0x01	; 1
    3980:	9e 01       	movw	r18, r28
    3982:	2d 5f       	subi	r18, 0xFD	; 253
    3984:	3f 4f       	sbci	r19, 0xFF	; 255
    3986:	ae 01       	movw	r20, r28
    3988:	4f 5f       	subi	r20, 0xFF	; 255
    398a:	5f 4f       	sbci	r21, 0xFF	; 255
    398c:	b7 01       	movw	r22, r14
    398e:	c6 01       	movw	r24, r12
    3990:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    3994:	89 2b       	or	r24, r25
    3996:	29 f6       	brne	.-118    	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
    3998:	9e 01       	movw	r18, r28
    399a:	2d 5f       	subi	r18, 0xFD	; 253
    399c:	3f 4f       	sbci	r19, 0xFF	; 255
    399e:	ae 01       	movw	r20, r28
    39a0:	4f 5f       	subi	r20, 0xFF	; 255
    39a2:	5f 4f       	sbci	r21, 0xFF	; 255
    39a4:	b7 01       	movw	r22, r14
    39a6:	c6 01       	movw	r24, r12
    39a8:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	09 f0       	breq	.+2      	; 0x39b2 <_ZN6IRrecv9decodeRC6EP14decode_results+0xd0>
    39b0:	b8 cf       	rjmp	.-144    	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>
    39b2:	21 2c       	mov	r2, r1
    39b4:	31 2c       	mov	r3, r1
    39b6:	21 01       	movw	r4, r2
    39b8:	a1 2c       	mov	r10, r1
    39ba:	b1 2c       	mov	r11, r1

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
    39bc:	f7 01       	movw	r30, r14
    39be:	23 85       	ldd	r18, Z+11	; 0x0b
    39c0:	34 85       	ldd	r19, Z+12	; 0x0c
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	9a 81       	ldd	r25, Y+2	; 0x02
    39c6:	82 17       	cp	r24, r18
    39c8:	93 07       	cpc	r25, r19
    39ca:	0c f0       	brlt	.+2      	; 0x39ce <_ZN6IRrecv9decodeRC6EP14decode_results+0xec>
    39cc:	64 c0       	rjmp	.+200    	; 0x3a96 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1b4>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
    39ce:	0c eb       	ldi	r16, 0xBC	; 188
    39d0:	11 e0       	ldi	r17, 0x01	; 1
    39d2:	9e 01       	movw	r18, r28
    39d4:	2d 5f       	subi	r18, 0xFD	; 253
    39d6:	3f 4f       	sbci	r19, 0xFF	; 255
    39d8:	ae 01       	movw	r20, r28
    39da:	4f 5f       	subi	r20, 0xFF	; 255
    39dc:	5f 4f       	sbci	r21, 0xFF	; 255
    39de:	b7 01       	movw	r22, r14
    39e0:	c6 01       	movw	r24, r12
    39e2:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    39e6:	3c 01       	movw	r6, r24
		if (nbits == 3) {
    39e8:	f3 e0       	ldi	r31, 0x03	; 3
    39ea:	af 16       	cp	r10, r31
    39ec:	b1 04       	cpc	r11, r1
    39ee:	91 f0       	breq	.+36     	; 0x3a14 <_ZN6IRrecv9decodeRC6EP14decode_results+0x132>
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
    39f0:	0c eb       	ldi	r16, 0xBC	; 188
    39f2:	11 e0       	ldi	r17, 0x01	; 1
    39f4:	9e 01       	movw	r18, r28
    39f6:	2d 5f       	subi	r18, 0xFD	; 253
    39f8:	3f 4f       	sbci	r19, 0xFF	; 255
    39fa:	ae 01       	movw	r20, r28
    39fc:	4f 5f       	subi	r20, 0xFF	; 255
    39fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3a00:	b7 01       	movw	r22, r14
    3a02:	c6 01       	movw	r24, r12
    3a04:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    3a08:	4c 01       	movw	r8, r24
		if (nbits == 3) {
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
    3a0c:	a8 16       	cp	r10, r24
    3a0e:	b1 04       	cpc	r11, r1
    3a10:	09 f5       	brne	.+66     	; 0x3a54 <_ZN6IRrecv9decodeRC6EP14decode_results+0x172>
    3a12:	10 c0       	rjmp	.+32     	; 0x3a34 <_ZN6IRrecv9decodeRC6EP14decode_results+0x152>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
		if (nbits == 3) {
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
    3a14:	0c eb       	ldi	r16, 0xBC	; 188
    3a16:	11 e0       	ldi	r17, 0x01	; 1
    3a18:	9e 01       	movw	r18, r28
    3a1a:	2d 5f       	subi	r18, 0xFD	; 253
    3a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1e:	ae 01       	movw	r20, r28
    3a20:	4f 5f       	subi	r20, 0xFF	; 255
    3a22:	5f 4f       	sbci	r21, 0xFF	; 255
    3a24:	b7 01       	movw	r22, r14
    3a26:	c6 01       	movw	r24, r12
    3a28:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    3a2c:	68 16       	cp	r6, r24
    3a2e:	79 06       	cpc	r7, r25
    3a30:	f9 f2       	breq	.-66     	; 0x39f0 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10e>
    3a32:	77 cf       	rjmp	.-274    	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
		if (nbits == 3) {
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
    3a34:	0c eb       	ldi	r16, 0xBC	; 188
    3a36:	11 e0       	ldi	r17, 0x01	; 1
    3a38:	9e 01       	movw	r18, r28
    3a3a:	2d 5f       	subi	r18, 0xFD	; 253
    3a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3e:	ae 01       	movw	r20, r28
    3a40:	4f 5f       	subi	r20, 0xFF	; 255
    3a42:	5f 4f       	sbci	r21, 0xFF	; 255
    3a44:	b7 01       	movw	r22, r14
    3a46:	c6 01       	movw	r24, r12
    3a48:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    3a4c:	88 16       	cp	r8, r24
    3a4e:	99 06       	cpc	r9, r25
    3a50:	09 f0       	breq	.+2      	; 0x3a54 <_ZN6IRrecv9decodeRC6EP14decode_results+0x172>
    3a52:	67 cf       	rjmp	.-306    	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
    3a54:	61 14       	cp	r6, r1
    3a56:	71 04       	cpc	r7, r1
    3a58:	79 f4       	brne	.+30     	; 0x3a78 <_ZN6IRrecv9decodeRC6EP14decode_results+0x196>
    3a5a:	8a 94       	dec	r8
    3a5c:	89 28       	or	r8, r9
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <_ZN6IRrecv9decodeRC6EP14decode_results+0x180>
    3a60:	60 cf       	rjmp	.-320    	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>
    3a62:	d2 01       	movw	r26, r4
    3a64:	c1 01       	movw	r24, r2
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	aa 1f       	adc	r26, r26
    3a6c:	bb 1f       	adc	r27, r27
    3a6e:	1c 01       	movw	r2, r24
    3a70:	2d 01       	movw	r4, r26
    3a72:	68 94       	set
    3a74:	20 f8       	bld	r2, 0
    3a76:	0b c0       	rjmp	.+22     	; 0x3a8e <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ac>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
    3a78:	6a 94       	dec	r6
    3a7a:	67 28       	or	r6, r7
    3a7c:	09 f0       	breq	.+2      	; 0x3a80 <_ZN6IRrecv9decodeRC6EP14decode_results+0x19e>
    3a7e:	51 cf       	rjmp	.-350    	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>
    3a80:	89 28       	or	r8, r9
    3a82:	09 f0       	breq	.+2      	; 0x3a86 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1a4>
    3a84:	4e cf       	rjmp	.-356    	; 0x3922 <_ZN6IRrecv9decodeRC6EP14decode_results+0x40>
    3a86:	22 0c       	add	r2, r2
    3a88:	33 1c       	adc	r3, r3
    3a8a:	44 1c       	adc	r4, r4
    3a8c:	55 1c       	adc	r5, r5

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
    3a8e:	ef ef       	ldi	r30, 0xFF	; 255
    3a90:	ae 1a       	sub	r10, r30
    3a92:	be 0a       	sbc	r11, r30
    3a94:	93 cf       	rjmp	.-218    	; 0x39bc <_ZN6IRrecv9decodeRC6EP14decode_results+0xda>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
		else                                              return false ;            // Error
	}

	// Success
	results->bits        = nbits;
    3a96:	b0 86       	std	Z+8, r11	; 0x08
    3a98:	a7 82       	std	Z+7, r10	; 0x07
	results->value       = data;
    3a9a:	f7 01       	movw	r30, r14
    3a9c:	23 82       	std	Z+3, r2	; 0x03
    3a9e:	34 82       	std	Z+4, r3	; 0x04
    3aa0:	45 82       	std	Z+5, r4	; 0x05
    3aa2:	56 82       	std	Z+6, r5	; 0x06
	results->decode_type = RC6;
    3aa4:	82 e0       	ldi	r24, 0x02	; 2
    3aa6:	80 83       	st	Z, r24
	return true;
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
}
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	df 90       	pop	r13
    3ac0:	cf 90       	pop	r12
    3ac2:	bf 90       	pop	r11
    3ac4:	af 90       	pop	r10
    3ac6:	9f 90       	pop	r9
    3ac8:	8f 90       	pop	r8
    3aca:	7f 90       	pop	r7
    3acc:	6f 90       	pop	r6
    3ace:	5f 90       	pop	r5
    3ad0:	4f 90       	pop	r4
    3ad2:	3f 90       	pop	r3
    3ad4:	2f 90       	pop	r2
    3ad6:	08 95       	ret

00003ad8 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
bool  IRrecv::decodeSAMSUNG (decode_results *results)
{
    3ad8:	af 92       	push	r10
    3ada:	bf 92       	push	r11
    3adc:	cf 92       	push	r12
    3ade:	df 92       	push	r13
    3ae0:	ef 92       	push	r14
    3ae2:	ff 92       	push	r15
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	eb 01       	movw	r28, r22
	long  data   = 0;
	int   offset = 1;  // Skip first space

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
    3aee:	e9 85       	ldd	r30, Y+9	; 0x09
    3af0:	fa 85       	ldd	r31, Y+10	; 0x0a
    3af2:	82 81       	ldd	r24, Z+2	; 0x02
    3af4:	93 81       	ldd	r25, Z+3	; 0x03
    3af6:	68 e8       	ldi	r22, 0x88	; 136
    3af8:	73 e1       	ldi	r23, 0x13	; 19
    3afa:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3afe:	89 2b       	or	r24, r25
    3b00:	11 f4       	brne	.+4      	; 0x3b06 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2e>
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	7c c0       	rjmp	.+248    	; 0x3bfe <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x126>
	offset++;

	// Check for repeat
	if (    (irparams.rawlen == 4)
    3b06:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
    3b0a:	84 30       	cpi	r24, 0x04	; 4
    3b0c:	09 f5       	brne	.+66     	; 0x3b50 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x78>
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
	offset++;

	// Check for repeat
	if (    (irparams.rawlen == 4)
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
    3b0e:	e9 85       	ldd	r30, Y+9	; 0x09
    3b10:	fa 85       	ldd	r31, Y+10	; 0x0a
    3b12:	84 81       	ldd	r24, Z+4	; 0x04
    3b14:	95 81       	ldd	r25, Z+5	; 0x05
    3b16:	6a ec       	ldi	r22, 0xCA	; 202
    3b18:	78 e0       	ldi	r23, 0x08	; 8
    3b1a:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3b1e:	89 2b       	or	r24, r25
    3b20:	b9 f0       	breq	.+46     	; 0x3b50 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x78>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
    3b22:	e9 85       	ldd	r30, Y+9	; 0x09
    3b24:	fa 85       	ldd	r31, Y+10	; 0x0a
    3b26:	86 81       	ldd	r24, Z+6	; 0x06
    3b28:	97 81       	ldd	r25, Z+7	; 0x07
    3b2a:	60 e3       	ldi	r22, 0x30	; 48
    3b2c:	72 e0       	ldi	r23, 0x02	; 2
    3b2e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3b32:	89 2b       	or	r24, r25
    3b34:	69 f0       	breq	.+26     	; 0x3b50 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x78>
	   ) {
		results->bits        = 0;
    3b36:	18 86       	std	Y+8, r1	; 0x08
    3b38:	1f 82       	std	Y+7, r1	; 0x07
		results->value       = REPEAT;
    3b3a:	8f ef       	ldi	r24, 0xFF	; 255
    3b3c:	9f ef       	ldi	r25, 0xFF	; 255
    3b3e:	dc 01       	movw	r26, r24
    3b40:	8b 83       	std	Y+3, r24	; 0x03
    3b42:	9c 83       	std	Y+4, r25	; 0x04
    3b44:	ad 83       	std	Y+5, r26	; 0x05
    3b46:	be 83       	std	Y+6, r27	; 0x06
		results->decode_type = SAMSUNG;
    3b48:	87 e0       	ldi	r24, 0x07	; 7
    3b4a:	88 83       	st	Y, r24
		return true;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	57 c0       	rjmp	.+174    	; 0x3bfe <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x126>
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
    3b50:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3b54:	84 34       	cpi	r24, 0x44	; 68
    3b56:	a8 f2       	brcs	.-86     	; 0x3b02 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2a>

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
    3b58:	e9 85       	ldd	r30, Y+9	; 0x09
    3b5a:	fa 85       	ldd	r31, Y+10	; 0x0a
    3b5c:	84 81       	ldd	r24, Z+4	; 0x04
    3b5e:	95 81       	ldd	r25, Z+5	; 0x05
    3b60:	68 e8       	ldi	r22, 0x88	; 136
    3b62:	73 e1       	ldi	r23, 0x13	; 19
    3b64:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3b68:	89 2b       	or	r24, r25
    3b6a:	59 f2       	breq	.-106    	; 0x3b02 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2a>
    3b6c:	06 e0       	ldi	r16, 0x06	; 6
    3b6e:	10 e0       	ldi	r17, 0x00	; 0
    3b70:	c1 2c       	mov	r12, r1
    3b72:	d1 2c       	mov	r13, r1
    3b74:	76 01       	movw	r14, r12

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
    3b76:	e9 85       	ldd	r30, Y+9	; 0x09
    3b78:	fa 85       	ldd	r31, Y+10	; 0x0a
    3b7a:	e0 0f       	add	r30, r16
    3b7c:	f1 1f       	adc	r31, r17
    3b7e:	80 81       	ld	r24, Z
    3b80:	91 81       	ldd	r25, Z+1	; 0x01
    3b82:	60 e3       	ldi	r22, 0x30	; 48
    3b84:	72 e0       	ldi	r23, 0x02	; 2
    3b86:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3b8a:	89 2b       	or	r24, r25
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0xb8>
    3b8e:	b9 cf       	rjmp	.-142    	; 0x3b02 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2a>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
    3b90:	58 01       	movw	r10, r16
    3b92:	82 e0       	ldi	r24, 0x02	; 2
    3b94:	a8 0e       	add	r10, r24
    3b96:	b1 1c       	adc	r11, r1
    3b98:	e9 85       	ldd	r30, Y+9	; 0x09
    3b9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    3b9c:	ea 0d       	add	r30, r10
    3b9e:	fb 1d       	adc	r31, r11
    3ba0:	80 81       	ld	r24, Z
    3ba2:	91 81       	ldd	r25, Z+1	; 0x01
    3ba4:	60 e4       	ldi	r22, 0x40	; 64
    3ba6:	76 e0       	ldi	r23, 0x06	; 6
    3ba8:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3bac:	89 2b       	or	r24, r25
    3bae:	39 f0       	breq	.+14     	; 0x3bbe <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0xe6>
    3bb0:	cc 0c       	add	r12, r12
    3bb2:	dd 1c       	adc	r13, r13
    3bb4:	ee 1c       	adc	r14, r14
    3bb6:	ff 1c       	adc	r15, r15
    3bb8:	68 94       	set
    3bba:	c0 f8       	bld	r12, 0
    3bbc:	12 c0       	rjmp	.+36     	; 0x3be2 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x10a>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
    3bbe:	89 85       	ldd	r24, Y+9	; 0x09
    3bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	ea 0d       	add	r30, r10
    3bc6:	fb 1d       	adc	r31, r11
    3bc8:	80 81       	ld	r24, Z
    3bca:	91 81       	ldd	r25, Z+1	; 0x01
    3bcc:	60 e3       	ldi	r22, 0x30	; 48
    3bce:	72 e0       	ldi	r23, 0x02	; 2
    3bd0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3bd4:	89 2b       	or	r24, r25
    3bd6:	09 f4       	brne	.+2      	; 0x3bda <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x102>
    3bd8:	94 cf       	rjmp	.-216    	; 0x3b02 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x2a>
    3bda:	cc 0c       	add	r12, r12
    3bdc:	dd 1c       	adc	r13, r13
    3bde:	ee 1c       	adc	r14, r14
    3be0:	ff 1c       	adc	r15, r15
    3be2:	0c 5f       	subi	r16, 0xFC	; 252
    3be4:	1f 4f       	sbci	r17, 0xFF	; 255
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
    3be6:	06 38       	cpi	r16, 0x86	; 134
    3be8:	11 05       	cpc	r17, r1
    3bea:	29 f6       	brne	.-118    	; 0x3b76 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x9e>
		else                                                                return false ;
		offset++;
	}

	// Success
	results->bits        = SAMSUNG_BITS;
    3bec:	80 e2       	ldi	r24, 0x20	; 32
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	98 87       	std	Y+8, r25	; 0x08
    3bf2:	8f 83       	std	Y+7, r24	; 0x07
	results->value       = data;
    3bf4:	cb 82       	std	Y+3, r12	; 0x03
    3bf6:	dc 82       	std	Y+4, r13	; 0x04
    3bf8:	ed 82       	std	Y+5, r14	; 0x05
    3bfa:	fe 82       	std	Y+6, r15	; 0x06
    3bfc:	a5 cf       	rjmp	.-182    	; 0x3b48 <_ZN6IRrecv13decodeSAMSUNGEP14decode_results+0x70>
	results->decode_type = SAMSUNG;
	return true;
}
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	1f 91       	pop	r17
    3c04:	0f 91       	pop	r16
    3c06:	ff 90       	pop	r15
    3c08:	ef 90       	pop	r14
    3c0a:	df 90       	pop	r13
    3c0c:	cf 90       	pop	r12
    3c0e:	bf 90       	pop	r11
    3c10:	af 90       	pop	r10
    3c12:	08 95       	ret

00003c14 <_ZN6IRrecv11decodeSanyoEP14decode_results>:
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
bool  IRrecv::decodeSanyo (decode_results *results)
{
    3c14:	8f 92       	push	r8
    3c16:	9f 92       	push	r9
    3c18:	af 92       	push	r10
    3c1a:	bf 92       	push	r11
    3c1c:	cf 92       	push	r12
    3c1e:	df 92       	push	r13
    3c20:	ef 92       	push	r14
    3c22:	ff 92       	push	r15
    3c24:	0f 93       	push	r16
    3c26:	1f 93       	push	r17
    3c28:	cf 93       	push	r28
    3c2a:	df 93       	push	r29
    3c2c:	eb 01       	movw	r28, r22
	long  data   = 0;
	int   offset = 0;  // Skip first space  <-- CHECK THIS!

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
    3c2e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3c32:	8a 31       	cpi	r24, 0x1A	; 26
    3c34:	08 f4       	brcc	.+2      	; 0x3c38 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x24>
    3c36:	7d c0       	rjmp	.+250    	; 0x3d32 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x11e>
	Serial.println( "test against:");
	Serial.println(results->rawbuf[offset]);
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
    3c38:	e9 85       	ldd	r30, Y+9	; 0x09
    3c3a:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c3c:	80 81       	ld	r24, Z
    3c3e:	91 81       	ldd	r25, Z+1	; 0x01
    3c40:	80 32       	cpi	r24, 0x20	; 32
    3c42:	93 40       	sbci	r25, 0x03	; 3
    3c44:	50 f4       	brcc	.+20     	; 0x3c5a <_ZN6IRrecv11decodeSanyoEP14decode_results+0x46>
		//Serial.print("IR Gap found: ");
		results->bits        = 0;
    3c46:	18 86       	std	Y+8, r1	; 0x08
    3c48:	1f 82       	std	Y+7, r1	; 0x07
		results->value       = REPEAT;
    3c4a:	8f ef       	ldi	r24, 0xFF	; 255
    3c4c:	9f ef       	ldi	r25, 0xFF	; 255
    3c4e:	dc 01       	movw	r26, r24
    3c50:	8b 83       	std	Y+3, r24	; 0x03
    3c52:	9c 83       	std	Y+4, r25	; 0x04
    3c54:	ad 83       	std	Y+5, r26	; 0x05
    3c56:	be 83       	std	Y+6, r27	; 0x06
    3c58:	72 c0       	rjmp	.+228    	; 0x3d3e <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12a>
		return true;
	}
	offset++;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
    3c5a:	82 81       	ldd	r24, Z+2	; 0x02
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	6c ea       	ldi	r22, 0xAC	; 172
    3c60:	7d e0       	ldi	r23, 0x0D	; 13
    3c62:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3c66:	89 2b       	or	r24, r25
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <_ZN6IRrecv11decodeSanyoEP14decode_results+0x58>
    3c6a:	63 c0       	rjmp	.+198    	; 0x3d32 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x11e>

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
    3c6c:	e9 85       	ldd	r30, Y+9	; 0x09
    3c6e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c70:	84 81       	ldd	r24, Z+4	; 0x04
    3c72:	95 81       	ldd	r25, Z+5	; 0x05
    3c74:	6c ea       	ldi	r22, 0xAC	; 172
    3c76:	7d e0       	ldi	r23, 0x0D	; 13
    3c78:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3c7c:	89 2b       	or	r24, r25
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x6e>
    3c80:	58 c0       	rjmp	.+176    	; 0x3d32 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x11e>
    3c82:	04 e0       	ldi	r16, 0x04	; 4
    3c84:	10 e0       	ldi	r17, 0x00	; 0
    3c86:	53 e0       	ldi	r21, 0x03	; 3
    3c88:	a5 2e       	mov	r10, r21
    3c8a:	b1 2c       	mov	r11, r1
    3c8c:	c1 2c       	mov	r12, r1
    3c8e:	d1 2c       	mov	r13, r1
    3c90:	76 01       	movw	r14, r12

	while (offset + 1 < irparams.rawlen) {
    3c92:	48 01       	movw	r8, r16
    3c94:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	08 17       	cp	r16, r24
    3c9c:	19 07       	cpc	r17, r25
    3c9e:	dc f5       	brge	.+118    	; 0x3d16 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x102>
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
    3ca0:	e9 85       	ldd	r30, Y+9	; 0x09
    3ca2:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ca4:	c5 01       	movw	r24, r10
    3ca6:	88 0f       	add	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	e8 0f       	add	r30, r24
    3cac:	f9 1f       	adc	r31, r25
    3cae:	80 81       	ld	r24, Z
    3cb0:	91 81       	ldd	r25, Z+1	; 0x01
    3cb2:	66 eb       	ldi	r22, 0xB6	; 182
    3cb4:	73 e0       	ldi	r23, 0x03	; 3
    3cb6:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3cba:	89 2b       	or	r24, r25
    3cbc:	69 f1       	breq	.+90     	; 0x3d18 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x104>
    3cbe:	88 0c       	add	r8, r8
    3cc0:	99 1c       	adc	r9, r9

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
    3cc2:	e9 85       	ldd	r30, Y+9	; 0x09
    3cc4:	fa 85       	ldd	r31, Y+10	; 0x0a
    3cc6:	e8 0d       	add	r30, r8
    3cc8:	f9 1d       	adc	r31, r9
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	60 e6       	ldi	r22, 0x60	; 96
    3cd0:	79 e0       	ldi	r23, 0x09	; 9
    3cd2:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3cd6:	89 2b       	or	r24, r25
    3cd8:	39 f0       	breq	.+14     	; 0x3ce8 <_ZN6IRrecv11decodeSanyoEP14decode_results+0xd4>
    3cda:	cc 0c       	add	r12, r12
    3cdc:	dd 1c       	adc	r13, r13
    3cde:	ee 1c       	adc	r14, r14
    3ce0:	ff 1c       	adc	r15, r15
    3ce2:	68 94       	set
    3ce4:	c0 f8       	bld	r12, 0
    3ce6:	11 c0       	rjmp	.+34     	; 0x3d0a <_ZN6IRrecv11decodeSanyoEP14decode_results+0xf6>
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))  data = (data << 1) | 0 ;
    3ce8:	89 85       	ldd	r24, Y+9	; 0x09
    3cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cec:	fc 01       	movw	r30, r24
    3cee:	e8 0d       	add	r30, r8
    3cf0:	f9 1d       	adc	r31, r9
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
    3cf6:	6c eb       	ldi	r22, 0xBC	; 188
    3cf8:	72 e0       	ldi	r23, 0x02	; 2
    3cfa:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3cfe:	89 2b       	or	r24, r25
    3d00:	c1 f0       	breq	.+48     	; 0x3d32 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x11e>
    3d02:	cc 0c       	add	r12, r12
    3d04:	dd 1c       	adc	r13, r13
    3d06:	ee 1c       	adc	r14, r14
    3d08:	ff 1c       	adc	r15, r15
		else                                                            return false ;
		offset++;
    3d0a:	82 e0       	ldi	r24, 0x02	; 2
    3d0c:	a8 0e       	add	r10, r24
    3d0e:	b1 1c       	adc	r11, r1
    3d10:	0e 5f       	subi	r16, 0xFE	; 254
    3d12:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
    3d14:	be cf       	rjmp	.-132    	; 0x3c92 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x7e>
    3d16:	45 01       	movw	r8, r10
		else                                                            return false ;
		offset++;
	}

	// Success
	results->bits = (offset - 1) / 2;
    3d18:	21 e0       	ldi	r18, 0x01	; 1
    3d1a:	82 1a       	sub	r8, r18
    3d1c:	91 08       	sbc	r9, r1
    3d1e:	95 94       	asr	r9
    3d20:	87 94       	ror	r8
    3d22:	98 86       	std	Y+8, r9	; 0x08
    3d24:	8f 82       	std	Y+7, r8	; 0x07
	if (results->bits < 12) {
    3d26:	8c e0       	ldi	r24, 0x0C	; 12
    3d28:	88 16       	cp	r8, r24
    3d2a:	91 04       	cpc	r9, r1
    3d2c:	24 f4       	brge	.+8      	; 0x3d36 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x122>
		results->bits = 0;
    3d2e:	18 86       	std	Y+8, r1	; 0x08
    3d30:	1f 82       	std	Y+7, r1	; 0x07
		return false;
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	07 c0       	rjmp	.+14     	; 0x3d44 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x130>
	}

	results->value       = data;
    3d36:	cb 82       	std	Y+3, r12	; 0x03
    3d38:	dc 82       	std	Y+4, r13	; 0x04
    3d3a:	ed 82       	std	Y+5, r14	; 0x05
    3d3c:	fe 82       	std	Y+6, r15	; 0x06
	results->decode_type = SANYO;
    3d3e:	8b e0       	ldi	r24, 0x0B	; 11
    3d40:	88 83       	st	Y, r24
	return true;
    3d42:	81 e0       	ldi	r24, 0x01	; 1
}
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	ff 90       	pop	r15
    3d4e:	ef 90       	pop	r14
    3d50:	df 90       	pop	r13
    3d52:	cf 90       	pop	r12
    3d54:	bf 90       	pop	r11
    3d56:	af 90       	pop	r10
    3d58:	9f 90       	pop	r9
    3d5a:	8f 90       	pop	r8
    3d5c:	08 95       	ret

00003d5e <_ZN6IRrecv10decodeSonyEP14decode_results>:
#endif

//+=============================================================================
#if DECODE_SONY
bool  IRrecv::decodeSony (decode_results *results)
{
    3d5e:	8f 92       	push	r8
    3d60:	9f 92       	push	r9
    3d62:	af 92       	push	r10
    3d64:	bf 92       	push	r11
    3d66:	cf 92       	push	r12
    3d68:	df 92       	push	r13
    3d6a:	ef 92       	push	r14
    3d6c:	ff 92       	push	r15
    3d6e:	0f 93       	push	r16
    3d70:	1f 93       	push	r17
    3d72:	cf 93       	push	r28
    3d74:	df 93       	push	r29
    3d76:	eb 01       	movw	r28, r22
	long  data   = 0;
	int   offset = 0;  // Dont skip first space, check its size

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
    3d78:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3d7c:	8a 31       	cpi	r24, 0x1A	; 26
    3d7e:	08 f4       	brcc	.+2      	; 0x3d82 <_ZN6IRrecv10decodeSonyEP14decode_results+0x24>
    3d80:	73 c0       	rjmp	.+230    	; 0x3e68 <_ZN6IRrecv10decodeSonyEP14decode_results+0x10a>

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
    3d82:	e9 85       	ldd	r30, Y+9	; 0x09
    3d84:	fa 85       	ldd	r31, Y+10	; 0x0a
    3d86:	80 81       	ld	r24, Z
    3d88:	91 81       	ldd	r25, Z+1	; 0x01
    3d8a:	84 3f       	cpi	r24, 0xF4	; 244
    3d8c:	91 40       	sbci	r25, 0x01	; 1
    3d8e:	58 f4       	brcc	.+22     	; 0x3da6 <_ZN6IRrecv10decodeSonyEP14decode_results+0x48>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
    3d90:	18 86       	std	Y+8, r1	; 0x08
    3d92:	1f 82       	std	Y+7, r1	; 0x07
		results->value = REPEAT;
    3d94:	8f ef       	ldi	r24, 0xFF	; 255
    3d96:	9f ef       	ldi	r25, 0xFF	; 255
    3d98:	dc 01       	movw	r26, r24
    3d9a:	8b 83       	std	Y+3, r24	; 0x03
    3d9c:	9c 83       	std	Y+4, r25	; 0x04
    3d9e:	ad 83       	std	Y+5, r26	; 0x05
    3da0:	be 83       	std	Y+6, r27	; 0x06

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
    3da2:	8b e0       	ldi	r24, 0x0B	; 11
    3da4:	68 c0       	rjmp	.+208    	; 0x3e76 <_ZN6IRrecv10decodeSonyEP14decode_results+0x118>
	    return true;
	}
	offset++;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
    3da6:	82 81       	ldd	r24, Z+2	; 0x02
    3da8:	93 81       	ldd	r25, Z+3	; 0x03
    3daa:	60 e6       	ldi	r22, 0x60	; 96
    3dac:	79 e0       	ldi	r23, 0x09	; 9
    3dae:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3db2:	89 2b       	or	r24, r25
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <_ZN6IRrecv10decodeSonyEP14decode_results+0x5a>
    3db6:	58 c0       	rjmp	.+176    	; 0x3e68 <_ZN6IRrecv10decodeSonyEP14decode_results+0x10a>
    3db8:	03 e0       	ldi	r16, 0x03	; 3
    3dba:	10 e0       	ldi	r17, 0x00	; 0
    3dbc:	52 e0       	ldi	r21, 0x02	; 2
    3dbe:	a5 2e       	mov	r10, r21
    3dc0:	b1 2c       	mov	r11, r1
    3dc2:	c1 2c       	mov	r12, r1
    3dc4:	d1 2c       	mov	r13, r1
    3dc6:	76 01       	movw	r14, r12

	while (offset + 1 < irparams.rawlen) {
    3dc8:	48 01       	movw	r8, r16
    3dca:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	08 17       	cp	r16, r24
    3dd2:	19 07       	cpc	r17, r25
    3dd4:	dc f5       	brge	.+118    	; 0x3e4c <_ZN6IRrecv10decodeSonyEP14decode_results+0xee>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
    3dd6:	e9 85       	ldd	r30, Y+9	; 0x09
    3dd8:	fa 85       	ldd	r31, Y+10	; 0x0a
    3dda:	c5 01       	movw	r24, r10
    3ddc:	88 0f       	add	r24, r24
    3dde:	99 1f       	adc	r25, r25
    3de0:	e8 0f       	add	r30, r24
    3de2:	f9 1f       	adc	r31, r25
    3de4:	80 81       	ld	r24, Z
    3de6:	91 81       	ldd	r25, Z+1	; 0x01
    3de8:	68 e5       	ldi	r22, 0x58	; 88
    3dea:	72 e0       	ldi	r23, 0x02	; 2
    3dec:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3df0:	89 2b       	or	r24, r25
    3df2:	69 f1       	breq	.+90     	; 0x3e4e <_ZN6IRrecv10decodeSonyEP14decode_results+0xf0>
    3df4:	88 0c       	add	r8, r8
    3df6:	99 1c       	adc	r9, r9

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
    3df8:	e9 85       	ldd	r30, Y+9	; 0x09
    3dfa:	fa 85       	ldd	r31, Y+10	; 0x0a
    3dfc:	e8 0d       	add	r30, r8
    3dfe:	f9 1d       	adc	r31, r9
    3e00:	80 81       	ld	r24, Z
    3e02:	91 81       	ldd	r25, Z+1	; 0x01
    3e04:	60 eb       	ldi	r22, 0xB0	; 176
    3e06:	74 e0       	ldi	r23, 0x04	; 4
    3e08:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3e0c:	89 2b       	or	r24, r25
    3e0e:	39 f0       	breq	.+14     	; 0x3e1e <_ZN6IRrecv10decodeSonyEP14decode_results+0xc0>
    3e10:	cc 0c       	add	r12, r12
    3e12:	dd 1c       	adc	r13, r13
    3e14:	ee 1c       	adc	r14, r14
    3e16:	ff 1c       	adc	r15, r15
    3e18:	68 94       	set
    3e1a:	c0 f8       	bld	r12, 0
    3e1c:	11 c0       	rjmp	.+34     	; 0x3e40 <_ZN6IRrecv10decodeSonyEP14decode_results+0xe2>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
    3e1e:	89 85       	ldd	r24, Y+9	; 0x09
    3e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e22:	fc 01       	movw	r30, r24
    3e24:	e8 0d       	add	r30, r8
    3e26:	f9 1d       	adc	r31, r9
    3e28:	80 81       	ld	r24, Z
    3e2a:	91 81       	ldd	r25, Z+1	; 0x01
    3e2c:	68 e5       	ldi	r22, 0x58	; 88
    3e2e:	72 e0       	ldi	r23, 0x02	; 2
    3e30:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3e34:	89 2b       	or	r24, r25
    3e36:	c1 f0       	breq	.+48     	; 0x3e68 <_ZN6IRrecv10decodeSonyEP14decode_results+0x10a>
    3e38:	cc 0c       	add	r12, r12
    3e3a:	dd 1c       	adc	r13, r13
    3e3c:	ee 1c       	adc	r14, r14
    3e3e:	ff 1c       	adc	r15, r15
		else                                                           return false ;
		offset++;
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	a8 0e       	add	r10, r24
    3e44:	b1 1c       	adc	r11, r1
    3e46:	0e 5f       	subi	r16, 0xFE	; 254
    3e48:	1f 4f       	sbci	r17, 0xFF	; 255
	offset++;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
    3e4a:	be cf       	rjmp	.-132    	; 0x3dc8 <_ZN6IRrecv10decodeSonyEP14decode_results+0x6a>
    3e4c:	45 01       	movw	r8, r10
		else                                                           return false ;
		offset++;
	}

	// Success
	results->bits = (offset - 1) / 2;
    3e4e:	21 e0       	ldi	r18, 0x01	; 1
    3e50:	82 1a       	sub	r8, r18
    3e52:	91 08       	sbc	r9, r1
    3e54:	95 94       	asr	r9
    3e56:	87 94       	ror	r8
    3e58:	98 86       	std	Y+8, r9	; 0x08
    3e5a:	8f 82       	std	Y+7, r8	; 0x07
	if (results->bits < 12) {
    3e5c:	8c e0       	ldi	r24, 0x0C	; 12
    3e5e:	88 16       	cp	r8, r24
    3e60:	91 04       	cpc	r9, r1
    3e62:	24 f4       	brge	.+8      	; 0x3e6c <_ZN6IRrecv10decodeSonyEP14decode_results+0x10e>
		results->bits = 0;
    3e64:	18 86       	std	Y+8, r1	; 0x08
    3e66:	1f 82       	std	Y+7, r1	; 0x07
		return false;
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	07 c0       	rjmp	.+14     	; 0x3e7a <_ZN6IRrecv10decodeSonyEP14decode_results+0x11c>
	}
	results->value       = data;
    3e6c:	cb 82       	std	Y+3, r12	; 0x03
    3e6e:	dc 82       	std	Y+4, r13	; 0x04
    3e70:	ed 82       	std	Y+5, r14	; 0x05
    3e72:	fe 82       	std	Y+6, r15	; 0x06
	results->decode_type = SONY;
    3e74:	84 e0       	ldi	r24, 0x04	; 4
    3e76:	88 83       	st	Y, r24
	return true;
    3e78:	81 e0       	ldi	r24, 0x01	; 1
}
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	1f 91       	pop	r17
    3e80:	0f 91       	pop	r16
    3e82:	ff 90       	pop	r15
    3e84:	ef 90       	pop	r14
    3e86:	df 90       	pop	r13
    3e88:	cf 90       	pop	r12
    3e8a:	bf 90       	pop	r11
    3e8c:	af 90       	pop	r10
    3e8e:	9f 90       	pop	r9
    3e90:	8f 90       	pop	r8
    3e92:	08 95       	ret

00003e94 <_ZN6IRrecv13decodeWhynterEP14decode_results>:
#endif

//+=============================================================================
#if DECODE_WHYNTER
bool  IRrecv::decodeWhynter (decode_results *results)
{
    3e94:	af 92       	push	r10
    3e96:	bf 92       	push	r11
    3e98:	cf 92       	push	r12
    3e9a:	df 92       	push	r13
    3e9c:	ef 92       	push	r14
    3e9e:	ff 92       	push	r15
    3ea0:	0f 93       	push	r16
    3ea2:	1f 93       	push	r17
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
	long  data   = 0;
	int   offset = 1;  // skip initial space

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
    3ea8:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <irparams+0x4>
    3eac:	86 34       	cpi	r24, 0x46	; 70
    3eae:	10 f4       	brcc	.+4      	; 0x3eb4 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x20>
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	85 c0       	rjmp	.+266    	; 0x3fbe <_ZN6IRrecv13decodeWhynterEP14decode_results+0x12a>
    3eb4:	eb 01       	movw	r28, r22

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_BIT_MARK  ))  return false ;
    3eb6:	e9 85       	ldd	r30, Y+9	; 0x09
    3eb8:	fa 85       	ldd	r31, Y+10	; 0x0a
    3eba:	82 81       	ldd	r24, Z+2	; 0x02
    3ebc:	93 81       	ldd	r25, Z+3	; 0x03
    3ebe:	6e ee       	ldi	r22, 0xEE	; 238
    3ec0:	72 e0       	ldi	r23, 0x02	; 2
    3ec2:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3ec6:	89 2b       	or	r24, r25
    3ec8:	99 f3       	breq	.-26     	; 0x3eb0 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x1c>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))  return false ;
    3eca:	e9 85       	ldd	r30, Y+9	; 0x09
    3ecc:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ece:	84 81       	ldd	r24, Z+4	; 0x04
    3ed0:	95 81       	ldd	r25, Z+5	; 0x05
    3ed2:	6e ee       	ldi	r22, 0xEE	; 238
    3ed4:	72 e0       	ldi	r23, 0x02	; 2
    3ed6:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3eda:	89 2b       	or	r24, r25
    3edc:	49 f3       	breq	.-46     	; 0x3eb0 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x1c>

	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
    3ede:	e9 85       	ldd	r30, Y+9	; 0x09
    3ee0:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ee2:	86 81       	ldd	r24, Z+6	; 0x06
    3ee4:	97 81       	ldd	r25, Z+7	; 0x07
    3ee6:	62 e2       	ldi	r22, 0x22	; 34
    3ee8:	7b e0       	ldi	r23, 0x0B	; 11
    3eea:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3eee:	89 2b       	or	r24, r25
    3ef0:	f9 f2       	breq	.-66     	; 0x3eb0 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x1c>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;
    3ef2:	e9 85       	ldd	r30, Y+9	; 0x09
    3ef4:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ef6:	80 85       	ldd	r24, Z+8	; 0x08
    3ef8:	91 85       	ldd	r25, Z+9	; 0x09
    3efa:	62 e2       	ldi	r22, 0x22	; 34
    3efc:	7b e0       	ldi	r23, 0x0B	; 11
    3efe:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3f02:	89 2b       	or	r24, r25
    3f04:	a9 f2       	breq	.-86     	; 0x3eb0 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x1c>
    3f06:	3c e0       	ldi	r19, 0x0C	; 12
    3f08:	a3 2e       	mov	r10, r19
    3f0a:	b1 2c       	mov	r11, r1
    3f0c:	05 e0       	ldi	r16, 0x05	; 5
    3f0e:	10 e0       	ldi	r17, 0x00	; 0
    3f10:	c1 2c       	mov	r12, r1
    3f12:	d1 2c       	mov	r13, r1
    3f14:	76 01       	movw	r14, r12

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
    3f16:	e9 85       	ldd	r30, Y+9	; 0x09
    3f18:	fa 85       	ldd	r31, Y+10	; 0x0a
    3f1a:	c8 01       	movw	r24, r16
    3f1c:	88 0f       	add	r24, r24
    3f1e:	99 1f       	adc	r25, r25
    3f20:	e8 0f       	add	r30, r24
    3f22:	f9 1f       	adc	r31, r25
    3f24:	80 81       	ld	r24, Z
    3f26:	91 81       	ldd	r25, Z+1	; 0x01
    3f28:	6e ee       	ldi	r22, 0xEE	; 238
    3f2a:	72 e0       	ldi	r23, 0x02	; 2
    3f2c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3f30:	89 2b       	or	r24, r25
    3f32:	09 f4       	brne	.+2      	; 0x3f36 <_ZN6IRrecv13decodeWhynterEP14decode_results+0xa2>
    3f34:	bd cf       	rjmp	.-134    	; 0x3eb0 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x1c>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
    3f36:	e9 85       	ldd	r30, Y+9	; 0x09
    3f38:	fa 85       	ldd	r31, Y+10	; 0x0a
    3f3a:	ea 0d       	add	r30, r10
    3f3c:	fb 1d       	adc	r31, r11
    3f3e:	80 81       	ld	r24, Z
    3f40:	91 81       	ldd	r25, Z+1	; 0x01
    3f42:	66 e6       	ldi	r22, 0x66	; 102
    3f44:	78 e0       	ldi	r23, 0x08	; 8
    3f46:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3f4a:	89 2b       	or	r24, r25
    3f4c:	39 f0       	breq	.+14     	; 0x3f5c <_ZN6IRrecv13decodeWhynterEP14decode_results+0xc8>
    3f4e:	cc 0c       	add	r12, r12
    3f50:	dd 1c       	adc	r13, r13
    3f52:	ee 1c       	adc	r14, r14
    3f54:	ff 1c       	adc	r15, r15
    3f56:	68 94       	set
    3f58:	c0 f8       	bld	r12, 0
    3f5a:	11 c0       	rjmp	.+34     	; 0x3f7e <_ZN6IRrecv13decodeWhynterEP14decode_results+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
    3f5c:	e9 85       	ldd	r30, Y+9	; 0x09
    3f5e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3f60:	ea 0d       	add	r30, r10
    3f62:	fb 1d       	adc	r31, r11
    3f64:	80 81       	ld	r24, Z
    3f66:	91 81       	ldd	r25, Z+1	; 0x01
    3f68:	6e ee       	ldi	r22, 0xEE	; 238
    3f6a:	72 e0       	ldi	r23, 0x02	; 2
    3f6c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11MATCH_SPACEii>
    3f70:	89 2b       	or	r24, r25
    3f72:	09 f4       	brne	.+2      	; 0x3f76 <_ZN6IRrecv13decodeWhynterEP14decode_results+0xe2>
    3f74:	9d cf       	rjmp	.-198    	; 0x3eb0 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x1c>
    3f76:	cc 0c       	add	r12, r12
    3f78:	dd 1c       	adc	r13, r13
    3f7a:	ee 1c       	adc	r14, r14
    3f7c:	ff 1c       	adc	r15, r15
		else                                                                return false ;
		offset++;
    3f7e:	0e 5f       	subi	r16, 0xFE	; 254
    3f80:	1f 4f       	sbci	r17, 0xFF	; 255
    3f82:	84 e0       	ldi	r24, 0x04	; 4
    3f84:	a8 0e       	add	r10, r24
    3f86:	b1 1c       	adc	r11, r1
	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
    3f88:	05 34       	cpi	r16, 0x45	; 69
    3f8a:	11 05       	cpc	r17, r1
    3f8c:	21 f6       	brne	.-120    	; 0x3f16 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x82>
		else                                                                return false ;
		offset++;
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;
    3f8e:	e9 85       	ldd	r30, Y+9	; 0x09
    3f90:	fa 85       	ldd	r31, Y+10	; 0x0a
    3f92:	e6 57       	subi	r30, 0x76	; 118
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	80 81       	ld	r24, Z
    3f98:	91 81       	ldd	r25, Z+1	; 0x01
    3f9a:	6e ee       	ldi	r22, 0xEE	; 238
    3f9c:	72 e0       	ldi	r23, 0x02	; 2
    3f9e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_Z10MATCH_MARKii>
    3fa2:	89 2b       	or	r24, r25
    3fa4:	09 f4       	brne	.+2      	; 0x3fa8 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x114>
    3fa6:	84 cf       	rjmp	.-248    	; 0x3eb0 <_ZN6IRrecv13decodeWhynterEP14decode_results+0x1c>

	// Success
	results->bits = WHYNTER_BITS;
    3fa8:	80 e2       	ldi	r24, 0x20	; 32
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	98 87       	std	Y+8, r25	; 0x08
    3fae:	8f 83       	std	Y+7, r24	; 0x07
	results->value = data;
    3fb0:	cb 82       	std	Y+3, r12	; 0x03
    3fb2:	dc 82       	std	Y+4, r13	; 0x04
    3fb4:	ed 82       	std	Y+5, r14	; 0x05
    3fb6:	fe 82       	std	Y+6, r15	; 0x06
	results->decode_type = WHYNTER;
    3fb8:	88 e0       	ldi	r24, 0x08	; 8
    3fba:	88 83       	st	Y, r24
	return true;
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
}
    3fbe:	df 91       	pop	r29
    3fc0:	cf 91       	pop	r28
    3fc2:	1f 91       	pop	r17
    3fc4:	0f 91       	pop	r16
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	df 90       	pop	r13
    3fcc:	cf 90       	pop	r12
    3fce:	bf 90       	pop	r11
    3fd0:	af 90       	pop	r10
    3fd2:	08 95       	ret

00003fd4 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    3fd4:	cf 93       	push	r28
    3fd6:	df 93       	push	r29
    3fd8:	ec 01       	movw	r28, r24
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    3fde:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    3fea:	61 e0       	ldi	r22, 0x01	; 1
    3fec:	8e 81       	ldd	r24, Y+6	; 0x06
    3fee:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ffe:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    4002:	84 e6       	ldi	r24, 0x64	; 100
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	0c 94 20 12 	jmp	0x2440	; 0x2440 <delayMicroseconds>

0000400e <_ZN13LiquidCrystal10write4bitsEh>:
    400e:	cf 92       	push	r12
    4010:	df 92       	push	r13
    4012:	ef 92       	push	r14
    4014:	ff 92       	push	r15
    4016:	0f 93       	push	r16
    4018:	1f 93       	push	r17
    401a:	cf 93       	push	r28
    401c:	df 93       	push	r29
    401e:	6c 01       	movw	r12, r24
    4020:	7c 01       	movw	r14, r24
    4022:	87 e0       	ldi	r24, 0x07	; 7
    4024:	e8 0e       	add	r14, r24
    4026:	f1 1c       	adc	r15, r1
    4028:	c0 e0       	ldi	r28, 0x00	; 0
    402a:	d0 e0       	ldi	r29, 0x00	; 0
    402c:	06 2f       	mov	r16, r22
    402e:	10 e0       	ldi	r17, 0x00	; 0
    4030:	b8 01       	movw	r22, r16
    4032:	0c 2e       	mov	r0, r28
    4034:	02 c0       	rjmp	.+4      	; 0x403a <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    4036:	75 95       	asr	r23
    4038:	67 95       	ror	r22
    403a:	0a 94       	dec	r0
    403c:	e2 f7       	brpl	.-8      	; 0x4036 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    403e:	61 70       	andi	r22, 0x01	; 1
    4040:	f7 01       	movw	r30, r14
    4042:	81 91       	ld	r24, Z+
    4044:	7f 01       	movw	r14, r30
    4046:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    404a:	21 96       	adiw	r28, 0x01	; 1
    404c:	c4 30       	cpi	r28, 0x04	; 4
    404e:	d1 05       	cpc	r29, r1
    4050:	79 f7       	brne	.-34     	; 0x4030 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    4052:	c6 01       	movw	r24, r12
    4054:	df 91       	pop	r29
    4056:	cf 91       	pop	r28
    4058:	1f 91       	pop	r17
    405a:	0f 91       	pop	r16
    405c:	ff 90       	pop	r15
    405e:	ef 90       	pop	r14
    4060:	df 90       	pop	r13
    4062:	cf 90       	pop	r12
    4064:	0c 94 ea 1f 	jmp	0x3fd4	; 0x3fd4 <_ZN13LiquidCrystal11pulseEnableEv>

00004068 <_ZN13LiquidCrystal10write8bitsEh>:
    4068:	cf 92       	push	r12
    406a:	df 92       	push	r13
    406c:	ef 92       	push	r14
    406e:	ff 92       	push	r15
    4070:	0f 93       	push	r16
    4072:	1f 93       	push	r17
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	6c 01       	movw	r12, r24
    407a:	7c 01       	movw	r14, r24
    407c:	87 e0       	ldi	r24, 0x07	; 7
    407e:	e8 0e       	add	r14, r24
    4080:	f1 1c       	adc	r15, r1
    4082:	c0 e0       	ldi	r28, 0x00	; 0
    4084:	d0 e0       	ldi	r29, 0x00	; 0
    4086:	06 2f       	mov	r16, r22
    4088:	10 e0       	ldi	r17, 0x00	; 0
    408a:	b8 01       	movw	r22, r16
    408c:	0c 2e       	mov	r0, r28
    408e:	02 c0       	rjmp	.+4      	; 0x4094 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    4090:	75 95       	asr	r23
    4092:	67 95       	ror	r22
    4094:	0a 94       	dec	r0
    4096:	e2 f7       	brpl	.-8      	; 0x4090 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    4098:	61 70       	andi	r22, 0x01	; 1
    409a:	f7 01       	movw	r30, r14
    409c:	81 91       	ld	r24, Z+
    409e:	7f 01       	movw	r14, r30
    40a0:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    40a4:	21 96       	adiw	r28, 0x01	; 1
    40a6:	c8 30       	cpi	r28, 0x08	; 8
    40a8:	d1 05       	cpc	r29, r1
    40aa:	79 f7       	brne	.-34     	; 0x408a <_ZN13LiquidCrystal10write8bitsEh+0x22>
    40ac:	c6 01       	movw	r24, r12
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	1f 91       	pop	r17
    40b4:	0f 91       	pop	r16
    40b6:	ff 90       	pop	r15
    40b8:	ef 90       	pop	r14
    40ba:	df 90       	pop	r13
    40bc:	cf 90       	pop	r12
    40be:	0c 94 ea 1f 	jmp	0x3fd4	; 0x3fd4 <_ZN13LiquidCrystal11pulseEnableEv>

000040c2 <_ZN13LiquidCrystal4sendEhh>:
    40c2:	1f 93       	push	r17
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	ec 01       	movw	r28, r24
    40ca:	16 2f       	mov	r17, r22
    40cc:	64 2f       	mov	r22, r20
    40ce:	8c 81       	ldd	r24, Y+4	; 0x04
    40d0:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    40d4:	8d 81       	ldd	r24, Y+5	; 0x05
    40d6:	8f 3f       	cpi	r24, 0xFF	; 255
    40d8:	19 f0       	breq	.+6      	; 0x40e0 <_ZN13LiquidCrystal4sendEhh+0x1e>
    40da:	60 e0       	ldi	r22, 0x00	; 0
    40dc:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    40e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e2:	61 2f       	mov	r22, r17
    40e4:	84 ff       	sbrs	r24, 4
    40e6:	06 c0       	rjmp	.+12     	; 0x40f4 <_ZN13LiquidCrystal4sendEhh+0x32>
    40e8:	ce 01       	movw	r24, r28
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	1f 91       	pop	r17
    40f0:	0c 94 34 20 	jmp	0x4068	; 0x4068 <_ZN13LiquidCrystal10write8bitsEh>
    40f4:	70 e0       	ldi	r23, 0x00	; 0
    40f6:	84 e0       	ldi	r24, 0x04	; 4
    40f8:	75 95       	asr	r23
    40fa:	67 95       	ror	r22
    40fc:	8a 95       	dec	r24
    40fe:	e1 f7       	brne	.-8      	; 0x40f8 <_ZN13LiquidCrystal4sendEhh+0x36>
    4100:	ce 01       	movw	r24, r28
    4102:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN13LiquidCrystal10write4bitsEh>
    4106:	61 2f       	mov	r22, r17
    4108:	ce 01       	movw	r24, r28
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	1f 91       	pop	r17
    4110:	0c 94 07 20 	jmp	0x400e	; 0x400e <_ZN13LiquidCrystal10write4bitsEh>

00004114 <_ZN13LiquidCrystal7commandEh>:
    4114:	40 e0       	ldi	r20, 0x00	; 0
    4116:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <_ZN13LiquidCrystal4sendEhh>

0000411a <_ZN13LiquidCrystal5clearEv>:
    411a:	61 e0       	ldi	r22, 0x01	; 1
    411c:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>
    4120:	80 ed       	ldi	r24, 0xD0	; 208
    4122:	97 e0       	ldi	r25, 0x07	; 7
    4124:	0c 94 20 12 	jmp	0x2440	; 0x2440 <delayMicroseconds>

00004128 <_ZN13LiquidCrystal4homeEv>:
    4128:	62 e0       	ldi	r22, 0x02	; 2
    412a:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>
    412e:	80 ed       	ldi	r24, 0xD0	; 208
    4130:	97 e0       	ldi	r25, 0x07	; 7
    4132:	0c 94 20 12 	jmp	0x2440	; 0x2440 <delayMicroseconds>

00004136 <_ZN13LiquidCrystal9setCursorEhh>:
    4136:	fc 01       	movw	r30, r24
    4138:	44 30       	cpi	r20, 0x04	; 4
    413a:	08 f0       	brcs	.+2      	; 0x413e <_ZN13LiquidCrystal9setCursorEhh+0x8>
    413c:	43 e0       	ldi	r20, 0x03	; 3
    413e:	83 89       	ldd	r24, Z+19	; 0x13
    4140:	48 17       	cp	r20, r24
    4142:	10 f0       	brcs	.+4      	; 0x4148 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    4144:	4f ef       	ldi	r20, 0xFF	; 255
    4146:	48 0f       	add	r20, r24
    4148:	df 01       	movw	r26, r30
    414a:	a4 0f       	add	r26, r20
    414c:	b1 1d       	adc	r27, r1
    414e:	54 96       	adiw	r26, 0x14	; 20
    4150:	9c 91       	ld	r25, X
    4152:	69 0f       	add	r22, r25
    4154:	60 68       	ori	r22, 0x80	; 128
    4156:	cf 01       	movw	r24, r30
    4158:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>

0000415c <_ZN13LiquidCrystal7displayEv>:
    415c:	fc 01       	movw	r30, r24
    415e:	60 89       	ldd	r22, Z+16	; 0x10
    4160:	26 2f       	mov	r18, r22
    4162:	24 60       	ori	r18, 0x04	; 4
    4164:	20 8b       	std	Z+16, r18	; 0x10
    4166:	6c 60       	ori	r22, 0x0C	; 12
    4168:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>

0000416c <_ZN13LiquidCrystal5beginEhhh>:
    416c:	ef 92       	push	r14
    416e:	ff 92       	push	r15
    4170:	0f 93       	push	r16
    4172:	1f 93       	push	r17
    4174:	cf 93       	push	r28
    4176:	df 93       	push	r29
    4178:	ec 01       	movw	r28, r24
    417a:	42 30       	cpi	r20, 0x02	; 2
    417c:	18 f0       	brcs	.+6      	; 0x4184 <_ZN13LiquidCrystal5beginEhhh+0x18>
    417e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4180:	88 60       	ori	r24, 0x08	; 8
    4182:	8f 87       	std	Y+15, r24	; 0x0f
    4184:	4b 8b       	std	Y+19, r20	; 0x13
    4186:	1c 8a       	std	Y+20, r1	; 0x14
    4188:	80 e4       	ldi	r24, 0x40	; 64
    418a:	8d 8b       	std	Y+21, r24	; 0x15
    418c:	6e 8b       	std	Y+22, r22	; 0x16
    418e:	70 e0       	ldi	r23, 0x00	; 0
    4190:	60 5c       	subi	r22, 0xC0	; 192
    4192:	7f 4f       	sbci	r23, 0xFF	; 255
    4194:	6f 8b       	std	Y+23, r22	; 0x17
    4196:	22 23       	and	r18, r18
    4198:	29 f0       	breq	.+10     	; 0x41a4 <_ZN13LiquidCrystal5beginEhhh+0x38>
    419a:	41 30       	cpi	r20, 0x01	; 1
    419c:	19 f4       	brne	.+6      	; 0x41a4 <_ZN13LiquidCrystal5beginEhhh+0x38>
    419e:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a0:	84 60       	ori	r24, 0x04	; 4
    41a2:	8f 87       	std	Y+15, r24	; 0x0f
    41a4:	61 e0       	ldi	r22, 0x01	; 1
    41a6:	8c 81       	ldd	r24, Y+4	; 0x04
    41a8:	0e 94 8f 12 	call	0x251e	; 0x251e <pinMode>
    41ac:	8d 81       	ldd	r24, Y+5	; 0x05
    41ae:	8f 3f       	cpi	r24, 0xFF	; 255
    41b0:	19 f0       	breq	.+6      	; 0x41b8 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    41b2:	61 e0       	ldi	r22, 0x01	; 1
    41b4:	0e 94 8f 12 	call	0x251e	; 0x251e <pinMode>
    41b8:	61 e0       	ldi	r22, 0x01	; 1
    41ba:	8e 81       	ldd	r24, Y+6	; 0x06
    41bc:	0e 94 8f 12 	call	0x251e	; 0x251e <pinMode>
    41c0:	7e 01       	movw	r14, r28
    41c2:	87 e0       	ldi	r24, 0x07	; 7
    41c4:	e8 0e       	add	r14, r24
    41c6:	f1 1c       	adc	r15, r1
    41c8:	00 e0       	ldi	r16, 0x00	; 0
    41ca:	10 e0       	ldi	r17, 0x00	; 0
    41cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ce:	84 fd       	sbrc	r24, 4
    41d0:	03 c0       	rjmp	.+6      	; 0x41d8 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    41d2:	84 e0       	ldi	r24, 0x04	; 4
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	02 c0       	rjmp	.+4      	; 0x41dc <_ZN13LiquidCrystal5beginEhhh+0x70>
    41d8:	88 e0       	ldi	r24, 0x08	; 8
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	08 17       	cp	r16, r24
    41de:	19 07       	cpc	r17, r25
    41e0:	4c f4       	brge	.+18     	; 0x41f4 <_ZN13LiquidCrystal5beginEhhh+0x88>
    41e2:	61 e0       	ldi	r22, 0x01	; 1
    41e4:	f7 01       	movw	r30, r14
    41e6:	81 91       	ld	r24, Z+
    41e8:	7f 01       	movw	r14, r30
    41ea:	0e 94 8f 12 	call	0x251e	; 0x251e <pinMode>
    41ee:	0f 5f       	subi	r16, 0xFF	; 255
    41f0:	1f 4f       	sbci	r17, 0xFF	; 255
    41f2:	ec cf       	rjmp	.-40     	; 0x41cc <_ZN13LiquidCrystal5beginEhhh+0x60>
    41f4:	80 e5       	ldi	r24, 0x50	; 80
    41f6:	93 ec       	ldi	r25, 0xC3	; 195
    41f8:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4200:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    4204:	60 e0       	ldi	r22, 0x00	; 0
    4206:	8e 81       	ldd	r24, Y+6	; 0x06
    4208:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    420c:	8d 81       	ldd	r24, Y+5	; 0x05
    420e:	8f 3f       	cpi	r24, 0xFF	; 255
    4210:	19 f0       	breq	.+6      	; 0x4218 <_ZN13LiquidCrystal5beginEhhh+0xac>
    4212:	60 e0       	ldi	r22, 0x00	; 0
    4214:	0e 94 cb 12 	call	0x2596	; 0x2596 <digitalWrite>
    4218:	6f 85       	ldd	r22, Y+15	; 0x0f
    421a:	64 fd       	sbrc	r22, 4
    421c:	1d c0       	rjmp	.+58     	; 0x4258 <_ZN13LiquidCrystal5beginEhhh+0xec>
    421e:	63 e0       	ldi	r22, 0x03	; 3
    4220:	ce 01       	movw	r24, r28
    4222:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN13LiquidCrystal10write4bitsEh>
    4226:	84 e9       	ldi	r24, 0x94	; 148
    4228:	91 e1       	ldi	r25, 0x11	; 17
    422a:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    422e:	63 e0       	ldi	r22, 0x03	; 3
    4230:	ce 01       	movw	r24, r28
    4232:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN13LiquidCrystal10write4bitsEh>
    4236:	84 e9       	ldi	r24, 0x94	; 148
    4238:	91 e1       	ldi	r25, 0x11	; 17
    423a:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    423e:	63 e0       	ldi	r22, 0x03	; 3
    4240:	ce 01       	movw	r24, r28
    4242:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN13LiquidCrystal10write4bitsEh>
    4246:	86 e9       	ldi	r24, 0x96	; 150
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    424e:	62 e0       	ldi	r22, 0x02	; 2
    4250:	ce 01       	movw	r24, r28
    4252:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN13LiquidCrystal10write4bitsEh>
    4256:	16 c0       	rjmp	.+44     	; 0x4284 <_ZN13LiquidCrystal5beginEhhh+0x118>
    4258:	60 62       	ori	r22, 0x20	; 32
    425a:	ce 01       	movw	r24, r28
    425c:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>
    4260:	84 e9       	ldi	r24, 0x94	; 148
    4262:	91 e1       	ldi	r25, 0x11	; 17
    4264:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    4268:	6f 85       	ldd	r22, Y+15	; 0x0f
    426a:	60 62       	ori	r22, 0x20	; 32
    426c:	ce 01       	movw	r24, r28
    426e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>
    4272:	86 e9       	ldi	r24, 0x96	; 150
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    427a:	6f 85       	ldd	r22, Y+15	; 0x0f
    427c:	60 62       	ori	r22, 0x20	; 32
    427e:	ce 01       	movw	r24, r28
    4280:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>
    4284:	6f 85       	ldd	r22, Y+15	; 0x0f
    4286:	60 62       	ori	r22, 0x20	; 32
    4288:	ce 01       	movw	r24, r28
    428a:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>
    428e:	84 e0       	ldi	r24, 0x04	; 4
    4290:	88 8b       	std	Y+16, r24	; 0x10
    4292:	ce 01       	movw	r24, r28
    4294:	0e 94 ae 20 	call	0x415c	; 0x415c <_ZN13LiquidCrystal7displayEv>
    4298:	ce 01       	movw	r24, r28
    429a:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN13LiquidCrystal5clearEv>
    429e:	82 e0       	ldi	r24, 0x02	; 2
    42a0:	89 8b       	std	Y+17, r24	; 0x11
    42a2:	66 e0       	ldi	r22, 0x06	; 6
    42a4:	ce 01       	movw	r24, r28
    42a6:	df 91       	pop	r29
    42a8:	cf 91       	pop	r28
    42aa:	1f 91       	pop	r17
    42ac:	0f 91       	pop	r16
    42ae:	ff 90       	pop	r15
    42b0:	ef 90       	pop	r14
    42b2:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>

000042b6 <_ZN13LiquidCrystalC1Ehhhhhh>:
    42b6:	cf 92       	push	r12
    42b8:	ef 92       	push	r14
    42ba:	0f 93       	push	r16
    42bc:	fc 01       	movw	r30, r24
    42be:	13 82       	std	Z+3, r1	; 0x03
    42c0:	12 82       	std	Z+2, r1	; 0x02
    42c2:	88 e1       	ldi	r24, 0x18	; 24
    42c4:	92 e0       	ldi	r25, 0x02	; 2
    42c6:	91 83       	std	Z+1, r25	; 0x01
    42c8:	80 83       	st	Z, r24
    42ca:	64 83       	std	Z+4, r22	; 0x04
    42cc:	8f ef       	ldi	r24, 0xFF	; 255
    42ce:	85 83       	std	Z+5, r24	; 0x05
    42d0:	46 83       	std	Z+6, r20	; 0x06
    42d2:	27 83       	std	Z+7, r18	; 0x07
    42d4:	00 87       	std	Z+8, r16	; 0x08
    42d6:	e1 86       	std	Z+9, r14	; 0x09
    42d8:	c2 86       	std	Z+10, r12	; 0x0a
    42da:	13 86       	std	Z+11, r1	; 0x0b
    42dc:	14 86       	std	Z+12, r1	; 0x0c
    42de:	15 86       	std	Z+13, r1	; 0x0d
    42e0:	16 86       	std	Z+14, r1	; 0x0e
    42e2:	17 86       	std	Z+15, r1	; 0x0f
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	41 e0       	ldi	r20, 0x01	; 1
    42e8:	60 e1       	ldi	r22, 0x10	; 16
    42ea:	cf 01       	movw	r24, r30
    42ec:	0f 91       	pop	r16
    42ee:	ef 90       	pop	r14
    42f0:	cf 90       	pop	r12
    42f2:	0c 94 b6 20 	jmp	0x416c	; 0x416c <_ZN13LiquidCrystal5beginEhhh>

000042f6 <_ZN13LiquidCrystal8noCursorEv>:
    42f6:	fc 01       	movw	r30, r24
    42f8:	60 89       	ldd	r22, Z+16	; 0x10
    42fa:	6d 7f       	andi	r22, 0xFD	; 253
    42fc:	60 8b       	std	Z+16, r22	; 0x10
    42fe:	68 60       	ori	r22, 0x08	; 8
    4300:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>

00004304 <_ZN13LiquidCrystal6cursorEv>:
    4304:	fc 01       	movw	r30, r24
    4306:	60 89       	ldd	r22, Z+16	; 0x10
    4308:	26 2f       	mov	r18, r22
    430a:	22 60       	ori	r18, 0x02	; 2
    430c:	20 8b       	std	Z+16, r18	; 0x10
    430e:	6a 60       	ori	r22, 0x0A	; 10
    4310:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN13LiquidCrystal7commandEh>

00004314 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    4314:	41 e0       	ldi	r20, 0x01	; 1
    4316:	0e 94 61 20 	call	0x40c2	; 0x40c2 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	08 95       	ret

00004320 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4320:	08 95       	ret

00004322 <__mulsi3>:
    4322:	db 01       	movw	r26, r22
    4324:	8f 93       	push	r24
    4326:	9f 93       	push	r25
    4328:	0e 94 c9 21 	call	0x4392	; 0x4392 <__muluhisi3>
    432c:	bf 91       	pop	r27
    432e:	af 91       	pop	r26
    4330:	a2 9f       	mul	r26, r18
    4332:	80 0d       	add	r24, r0
    4334:	91 1d       	adc	r25, r1
    4336:	a3 9f       	mul	r26, r19
    4338:	90 0d       	add	r25, r0
    433a:	b2 9f       	mul	r27, r18
    433c:	90 0d       	add	r25, r0
    433e:	11 24       	eor	r1, r1
    4340:	08 95       	ret

00004342 <__udivmodsi4>:
    4342:	a1 e2       	ldi	r26, 0x21	; 33
    4344:	1a 2e       	mov	r1, r26
    4346:	aa 1b       	sub	r26, r26
    4348:	bb 1b       	sub	r27, r27
    434a:	fd 01       	movw	r30, r26
    434c:	0d c0       	rjmp	.+26     	; 0x4368 <__udivmodsi4_ep>

0000434e <__udivmodsi4_loop>:
    434e:	aa 1f       	adc	r26, r26
    4350:	bb 1f       	adc	r27, r27
    4352:	ee 1f       	adc	r30, r30
    4354:	ff 1f       	adc	r31, r31
    4356:	a2 17       	cp	r26, r18
    4358:	b3 07       	cpc	r27, r19
    435a:	e4 07       	cpc	r30, r20
    435c:	f5 07       	cpc	r31, r21
    435e:	20 f0       	brcs	.+8      	; 0x4368 <__udivmodsi4_ep>
    4360:	a2 1b       	sub	r26, r18
    4362:	b3 0b       	sbc	r27, r19
    4364:	e4 0b       	sbc	r30, r20
    4366:	f5 0b       	sbc	r31, r21

00004368 <__udivmodsi4_ep>:
    4368:	66 1f       	adc	r22, r22
    436a:	77 1f       	adc	r23, r23
    436c:	88 1f       	adc	r24, r24
    436e:	99 1f       	adc	r25, r25
    4370:	1a 94       	dec	r1
    4372:	69 f7       	brne	.-38     	; 0x434e <__udivmodsi4_loop>
    4374:	60 95       	com	r22
    4376:	70 95       	com	r23
    4378:	80 95       	com	r24
    437a:	90 95       	com	r25
    437c:	9b 01       	movw	r18, r22
    437e:	ac 01       	movw	r20, r24
    4380:	bd 01       	movw	r22, r26
    4382:	cf 01       	movw	r24, r30
    4384:	08 95       	ret

00004386 <__tablejump2__>:
    4386:	ee 0f       	add	r30, r30
    4388:	ff 1f       	adc	r31, r31
    438a:	05 90       	lpm	r0, Z+
    438c:	f4 91       	lpm	r31, Z
    438e:	e0 2d       	mov	r30, r0
    4390:	09 94       	ijmp

00004392 <__muluhisi3>:
    4392:	0e 94 0b 22 	call	0x4416	; 0x4416 <__umulhisi3>
    4396:	a5 9f       	mul	r26, r21
    4398:	90 0d       	add	r25, r0
    439a:	b4 9f       	mul	r27, r20
    439c:	90 0d       	add	r25, r0
    439e:	a4 9f       	mul	r26, r20
    43a0:	80 0d       	add	r24, r0
    43a2:	91 1d       	adc	r25, r1
    43a4:	11 24       	eor	r1, r1
    43a6:	08 95       	ret

000043a8 <__ashldi3>:
    43a8:	0f 93       	push	r16
    43aa:	08 30       	cpi	r16, 0x08	; 8
    43ac:	90 f0       	brcs	.+36     	; 0x43d2 <__ashldi3+0x2a>
    43ae:	98 2f       	mov	r25, r24
    43b0:	87 2f       	mov	r24, r23
    43b2:	76 2f       	mov	r23, r22
    43b4:	65 2f       	mov	r22, r21
    43b6:	54 2f       	mov	r21, r20
    43b8:	43 2f       	mov	r20, r19
    43ba:	32 2f       	mov	r19, r18
    43bc:	22 27       	eor	r18, r18
    43be:	08 50       	subi	r16, 0x08	; 8
    43c0:	f4 cf       	rjmp	.-24     	; 0x43aa <__ashldi3+0x2>
    43c2:	22 0f       	add	r18, r18
    43c4:	33 1f       	adc	r19, r19
    43c6:	44 1f       	adc	r20, r20
    43c8:	55 1f       	adc	r21, r21
    43ca:	66 1f       	adc	r22, r22
    43cc:	77 1f       	adc	r23, r23
    43ce:	88 1f       	adc	r24, r24
    43d0:	99 1f       	adc	r25, r25
    43d2:	0a 95       	dec	r16
    43d4:	b2 f7       	brpl	.-20     	; 0x43c2 <__ashldi3+0x1a>
    43d6:	0f 91       	pop	r16
    43d8:	08 95       	ret

000043da <__ashrdi3>:
    43da:	97 fb       	bst	r25, 7
    43dc:	10 f8       	bld	r1, 0

000043de <__lshrdi3>:
    43de:	16 94       	lsr	r1
    43e0:	00 08       	sbc	r0, r0
    43e2:	0f 93       	push	r16
    43e4:	08 30       	cpi	r16, 0x08	; 8
    43e6:	98 f0       	brcs	.+38     	; 0x440e <__lshrdi3+0x30>
    43e8:	08 50       	subi	r16, 0x08	; 8
    43ea:	23 2f       	mov	r18, r19
    43ec:	34 2f       	mov	r19, r20
    43ee:	45 2f       	mov	r20, r21
    43f0:	56 2f       	mov	r21, r22
    43f2:	67 2f       	mov	r22, r23
    43f4:	78 2f       	mov	r23, r24
    43f6:	89 2f       	mov	r24, r25
    43f8:	90 2d       	mov	r25, r0
    43fa:	f4 cf       	rjmp	.-24     	; 0x43e4 <__lshrdi3+0x6>
    43fc:	05 94       	asr	r0
    43fe:	97 95       	ror	r25
    4400:	87 95       	ror	r24
    4402:	77 95       	ror	r23
    4404:	67 95       	ror	r22
    4406:	57 95       	ror	r21
    4408:	47 95       	ror	r20
    440a:	37 95       	ror	r19
    440c:	27 95       	ror	r18
    440e:	0a 95       	dec	r16
    4410:	aa f7       	brpl	.-22     	; 0x43fc <__lshrdi3+0x1e>
    4412:	0f 91       	pop	r16
    4414:	08 95       	ret

00004416 <__umulhisi3>:
    4416:	a2 9f       	mul	r26, r18
    4418:	b0 01       	movw	r22, r0
    441a:	b3 9f       	mul	r27, r19
    441c:	c0 01       	movw	r24, r0
    441e:	a3 9f       	mul	r26, r19
    4420:	70 0d       	add	r23, r0
    4422:	81 1d       	adc	r24, r1
    4424:	11 24       	eor	r1, r1
    4426:	91 1d       	adc	r25, r1
    4428:	b2 9f       	mul	r27, r18
    442a:	70 0d       	add	r23, r0
    442c:	81 1d       	adc	r24, r1
    442e:	11 24       	eor	r1, r1
    4430:	91 1d       	adc	r25, r1
    4432:	08 95       	ret

00004434 <malloc>:
    4434:	0f 93       	push	r16
    4436:	1f 93       	push	r17
    4438:	cf 93       	push	r28
    443a:	df 93       	push	r29
    443c:	82 30       	cpi	r24, 0x02	; 2
    443e:	91 05       	cpc	r25, r1
    4440:	10 f4       	brcc	.+4      	; 0x4446 <malloc+0x12>
    4442:	82 e0       	ldi	r24, 0x02	; 2
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <__flp>
    444a:	f0 91 e7 03 	lds	r31, 0x03E7	; 0x8003e7 <__flp+0x1>
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	a0 e0       	ldi	r26, 0x00	; 0
    4454:	b0 e0       	ldi	r27, 0x00	; 0
    4456:	30 97       	sbiw	r30, 0x00	; 0
    4458:	19 f1       	breq	.+70     	; 0x44a0 <malloc+0x6c>
    445a:	40 81       	ld	r20, Z
    445c:	51 81       	ldd	r21, Z+1	; 0x01
    445e:	02 81       	ldd	r16, Z+2	; 0x02
    4460:	13 81       	ldd	r17, Z+3	; 0x03
    4462:	48 17       	cp	r20, r24
    4464:	59 07       	cpc	r21, r25
    4466:	c8 f0       	brcs	.+50     	; 0x449a <malloc+0x66>
    4468:	84 17       	cp	r24, r20
    446a:	95 07       	cpc	r25, r21
    446c:	69 f4       	brne	.+26     	; 0x4488 <malloc+0x54>
    446e:	10 97       	sbiw	r26, 0x00	; 0
    4470:	31 f0       	breq	.+12     	; 0x447e <malloc+0x4a>
    4472:	12 96       	adiw	r26, 0x02	; 2
    4474:	0c 93       	st	X, r16
    4476:	12 97       	sbiw	r26, 0x02	; 2
    4478:	13 96       	adiw	r26, 0x03	; 3
    447a:	1c 93       	st	X, r17
    447c:	27 c0       	rjmp	.+78     	; 0x44cc <malloc+0x98>
    447e:	00 93 e6 03 	sts	0x03E6, r16	; 0x8003e6 <__flp>
    4482:	10 93 e7 03 	sts	0x03E7, r17	; 0x8003e7 <__flp+0x1>
    4486:	22 c0       	rjmp	.+68     	; 0x44cc <malloc+0x98>
    4488:	21 15       	cp	r18, r1
    448a:	31 05       	cpc	r19, r1
    448c:	19 f0       	breq	.+6      	; 0x4494 <malloc+0x60>
    448e:	42 17       	cp	r20, r18
    4490:	53 07       	cpc	r21, r19
    4492:	18 f4       	brcc	.+6      	; 0x449a <malloc+0x66>
    4494:	9a 01       	movw	r18, r20
    4496:	bd 01       	movw	r22, r26
    4498:	ef 01       	movw	r28, r30
    449a:	df 01       	movw	r26, r30
    449c:	f8 01       	movw	r30, r16
    449e:	db cf       	rjmp	.-74     	; 0x4456 <malloc+0x22>
    44a0:	21 15       	cp	r18, r1
    44a2:	31 05       	cpc	r19, r1
    44a4:	f9 f0       	breq	.+62     	; 0x44e4 <malloc+0xb0>
    44a6:	28 1b       	sub	r18, r24
    44a8:	39 0b       	sbc	r19, r25
    44aa:	24 30       	cpi	r18, 0x04	; 4
    44ac:	31 05       	cpc	r19, r1
    44ae:	80 f4       	brcc	.+32     	; 0x44d0 <malloc+0x9c>
    44b0:	8a 81       	ldd	r24, Y+2	; 0x02
    44b2:	9b 81       	ldd	r25, Y+3	; 0x03
    44b4:	61 15       	cp	r22, r1
    44b6:	71 05       	cpc	r23, r1
    44b8:	21 f0       	breq	.+8      	; 0x44c2 <malloc+0x8e>
    44ba:	fb 01       	movw	r30, r22
    44bc:	93 83       	std	Z+3, r25	; 0x03
    44be:	82 83       	std	Z+2, r24	; 0x02
    44c0:	04 c0       	rjmp	.+8      	; 0x44ca <malloc+0x96>
    44c2:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <__flp+0x1>
    44c6:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <__flp>
    44ca:	fe 01       	movw	r30, r28
    44cc:	32 96       	adiw	r30, 0x02	; 2
    44ce:	44 c0       	rjmp	.+136    	; 0x4558 <malloc+0x124>
    44d0:	fe 01       	movw	r30, r28
    44d2:	e2 0f       	add	r30, r18
    44d4:	f3 1f       	adc	r31, r19
    44d6:	81 93       	st	Z+, r24
    44d8:	91 93       	st	Z+, r25
    44da:	22 50       	subi	r18, 0x02	; 2
    44dc:	31 09       	sbc	r19, r1
    44de:	39 83       	std	Y+1, r19	; 0x01
    44e0:	28 83       	st	Y, r18
    44e2:	3a c0       	rjmp	.+116    	; 0x4558 <malloc+0x124>
    44e4:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    44e8:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    44ec:	23 2b       	or	r18, r19
    44ee:	41 f4       	brne	.+16     	; 0x4500 <malloc+0xcc>
    44f0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    44f4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    44f8:	30 93 e5 03 	sts	0x03E5, r19	; 0x8003e5 <__brkval+0x1>
    44fc:	20 93 e4 03 	sts	0x03E4, r18	; 0x8003e4 <__brkval>
    4500:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4504:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4508:	21 15       	cp	r18, r1
    450a:	31 05       	cpc	r19, r1
    450c:	41 f4       	brne	.+16     	; 0x451e <malloc+0xea>
    450e:	2d b7       	in	r18, 0x3d	; 61
    4510:	3e b7       	in	r19, 0x3e	; 62
    4512:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4516:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    451a:	24 1b       	sub	r18, r20
    451c:	35 0b       	sbc	r19, r21
    451e:	e0 91 e4 03 	lds	r30, 0x03E4	; 0x8003e4 <__brkval>
    4522:	f0 91 e5 03 	lds	r31, 0x03E5	; 0x8003e5 <__brkval+0x1>
    4526:	e2 17       	cp	r30, r18
    4528:	f3 07       	cpc	r31, r19
    452a:	a0 f4       	brcc	.+40     	; 0x4554 <malloc+0x120>
    452c:	2e 1b       	sub	r18, r30
    452e:	3f 0b       	sbc	r19, r31
    4530:	28 17       	cp	r18, r24
    4532:	39 07       	cpc	r19, r25
    4534:	78 f0       	brcs	.+30     	; 0x4554 <malloc+0x120>
    4536:	ac 01       	movw	r20, r24
    4538:	4e 5f       	subi	r20, 0xFE	; 254
    453a:	5f 4f       	sbci	r21, 0xFF	; 255
    453c:	24 17       	cp	r18, r20
    453e:	35 07       	cpc	r19, r21
    4540:	48 f0       	brcs	.+18     	; 0x4554 <malloc+0x120>
    4542:	4e 0f       	add	r20, r30
    4544:	5f 1f       	adc	r21, r31
    4546:	50 93 e5 03 	sts	0x03E5, r21	; 0x8003e5 <__brkval+0x1>
    454a:	40 93 e4 03 	sts	0x03E4, r20	; 0x8003e4 <__brkval>
    454e:	81 93       	st	Z+, r24
    4550:	91 93       	st	Z+, r25
    4552:	02 c0       	rjmp	.+4      	; 0x4558 <malloc+0x124>
    4554:	e0 e0       	ldi	r30, 0x00	; 0
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	cf 01       	movw	r24, r30
    455a:	df 91       	pop	r29
    455c:	cf 91       	pop	r28
    455e:	1f 91       	pop	r17
    4560:	0f 91       	pop	r16
    4562:	08 95       	ret

00004564 <free>:
    4564:	cf 93       	push	r28
    4566:	df 93       	push	r29
    4568:	00 97       	sbiw	r24, 0x00	; 0
    456a:	09 f4       	brne	.+2      	; 0x456e <free+0xa>
    456c:	81 c0       	rjmp	.+258    	; 0x4670 <free+0x10c>
    456e:	fc 01       	movw	r30, r24
    4570:	32 97       	sbiw	r30, 0x02	; 2
    4572:	13 82       	std	Z+3, r1	; 0x03
    4574:	12 82       	std	Z+2, r1	; 0x02
    4576:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <__flp>
    457a:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <__flp+0x1>
    457e:	10 97       	sbiw	r26, 0x00	; 0
    4580:	81 f4       	brne	.+32     	; 0x45a2 <free+0x3e>
    4582:	20 81       	ld	r18, Z
    4584:	31 81       	ldd	r19, Z+1	; 0x01
    4586:	82 0f       	add	r24, r18
    4588:	93 1f       	adc	r25, r19
    458a:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    458e:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    4592:	28 17       	cp	r18, r24
    4594:	39 07       	cpc	r19, r25
    4596:	51 f5       	brne	.+84     	; 0x45ec <free+0x88>
    4598:	f0 93 e5 03 	sts	0x03E5, r31	; 0x8003e5 <__brkval+0x1>
    459c:	e0 93 e4 03 	sts	0x03E4, r30	; 0x8003e4 <__brkval>
    45a0:	67 c0       	rjmp	.+206    	; 0x4670 <free+0x10c>
    45a2:	ed 01       	movw	r28, r26
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	ce 17       	cp	r28, r30
    45aa:	df 07       	cpc	r29, r31
    45ac:	40 f4       	brcc	.+16     	; 0x45be <free+0x5a>
    45ae:	4a 81       	ldd	r20, Y+2	; 0x02
    45b0:	5b 81       	ldd	r21, Y+3	; 0x03
    45b2:	9e 01       	movw	r18, r28
    45b4:	41 15       	cp	r20, r1
    45b6:	51 05       	cpc	r21, r1
    45b8:	f1 f0       	breq	.+60     	; 0x45f6 <free+0x92>
    45ba:	ea 01       	movw	r28, r20
    45bc:	f5 cf       	rjmp	.-22     	; 0x45a8 <free+0x44>
    45be:	d3 83       	std	Z+3, r29	; 0x03
    45c0:	c2 83       	std	Z+2, r28	; 0x02
    45c2:	40 81       	ld	r20, Z
    45c4:	51 81       	ldd	r21, Z+1	; 0x01
    45c6:	84 0f       	add	r24, r20
    45c8:	95 1f       	adc	r25, r21
    45ca:	c8 17       	cp	r28, r24
    45cc:	d9 07       	cpc	r29, r25
    45ce:	59 f4       	brne	.+22     	; 0x45e6 <free+0x82>
    45d0:	88 81       	ld	r24, Y
    45d2:	99 81       	ldd	r25, Y+1	; 0x01
    45d4:	84 0f       	add	r24, r20
    45d6:	95 1f       	adc	r25, r21
    45d8:	02 96       	adiw	r24, 0x02	; 2
    45da:	91 83       	std	Z+1, r25	; 0x01
    45dc:	80 83       	st	Z, r24
    45de:	8a 81       	ldd	r24, Y+2	; 0x02
    45e0:	9b 81       	ldd	r25, Y+3	; 0x03
    45e2:	93 83       	std	Z+3, r25	; 0x03
    45e4:	82 83       	std	Z+2, r24	; 0x02
    45e6:	21 15       	cp	r18, r1
    45e8:	31 05       	cpc	r19, r1
    45ea:	29 f4       	brne	.+10     	; 0x45f6 <free+0x92>
    45ec:	f0 93 e7 03 	sts	0x03E7, r31	; 0x8003e7 <__flp+0x1>
    45f0:	e0 93 e6 03 	sts	0x03E6, r30	; 0x8003e6 <__flp>
    45f4:	3d c0       	rjmp	.+122    	; 0x4670 <free+0x10c>
    45f6:	e9 01       	movw	r28, r18
    45f8:	fb 83       	std	Y+3, r31	; 0x03
    45fa:	ea 83       	std	Y+2, r30	; 0x02
    45fc:	49 91       	ld	r20, Y+
    45fe:	59 91       	ld	r21, Y+
    4600:	c4 0f       	add	r28, r20
    4602:	d5 1f       	adc	r29, r21
    4604:	ec 17       	cp	r30, r28
    4606:	fd 07       	cpc	r31, r29
    4608:	61 f4       	brne	.+24     	; 0x4622 <free+0xbe>
    460a:	80 81       	ld	r24, Z
    460c:	91 81       	ldd	r25, Z+1	; 0x01
    460e:	84 0f       	add	r24, r20
    4610:	95 1f       	adc	r25, r21
    4612:	02 96       	adiw	r24, 0x02	; 2
    4614:	e9 01       	movw	r28, r18
    4616:	99 83       	std	Y+1, r25	; 0x01
    4618:	88 83       	st	Y, r24
    461a:	82 81       	ldd	r24, Z+2	; 0x02
    461c:	93 81       	ldd	r25, Z+3	; 0x03
    461e:	9b 83       	std	Y+3, r25	; 0x03
    4620:	8a 83       	std	Y+2, r24	; 0x02
    4622:	e0 e0       	ldi	r30, 0x00	; 0
    4624:	f0 e0       	ldi	r31, 0x00	; 0
    4626:	12 96       	adiw	r26, 0x02	; 2
    4628:	8d 91       	ld	r24, X+
    462a:	9c 91       	ld	r25, X
    462c:	13 97       	sbiw	r26, 0x03	; 3
    462e:	00 97       	sbiw	r24, 0x00	; 0
    4630:	19 f0       	breq	.+6      	; 0x4638 <free+0xd4>
    4632:	fd 01       	movw	r30, r26
    4634:	dc 01       	movw	r26, r24
    4636:	f7 cf       	rjmp	.-18     	; 0x4626 <free+0xc2>
    4638:	8d 91       	ld	r24, X+
    463a:	9c 91       	ld	r25, X
    463c:	11 97       	sbiw	r26, 0x01	; 1
    463e:	9d 01       	movw	r18, r26
    4640:	2e 5f       	subi	r18, 0xFE	; 254
    4642:	3f 4f       	sbci	r19, 0xFF	; 255
    4644:	82 0f       	add	r24, r18
    4646:	93 1f       	adc	r25, r19
    4648:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    464c:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    4650:	28 17       	cp	r18, r24
    4652:	39 07       	cpc	r19, r25
    4654:	69 f4       	brne	.+26     	; 0x4670 <free+0x10c>
    4656:	30 97       	sbiw	r30, 0x00	; 0
    4658:	29 f4       	brne	.+10     	; 0x4664 <free+0x100>
    465a:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <__flp+0x1>
    465e:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <__flp>
    4662:	02 c0       	rjmp	.+4      	; 0x4668 <free+0x104>
    4664:	13 82       	std	Z+3, r1	; 0x03
    4666:	12 82       	std	Z+2, r1	; 0x02
    4668:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <__brkval+0x1>
    466c:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <__brkval>
    4670:	df 91       	pop	r29
    4672:	cf 91       	pop	r28
    4674:	08 95       	ret

00004676 <realloc>:
    4676:	a0 e0       	ldi	r26, 0x00	; 0
    4678:	b0 e0       	ldi	r27, 0x00	; 0
    467a:	e1 e4       	ldi	r30, 0x41	; 65
    467c:	f3 e2       	ldi	r31, 0x23	; 35
    467e:	0c 94 15 24 	jmp	0x482a	; 0x482a <__prologue_saves__+0x8>
    4682:	ec 01       	movw	r28, r24
    4684:	00 97       	sbiw	r24, 0x00	; 0
    4686:	21 f4       	brne	.+8      	; 0x4690 <realloc+0x1a>
    4688:	cb 01       	movw	r24, r22
    468a:	0e 94 1a 22 	call	0x4434	; 0x4434 <malloc>
    468e:	b4 c0       	rjmp	.+360    	; 0x47f8 <realloc+0x182>
    4690:	fc 01       	movw	r30, r24
    4692:	e6 0f       	add	r30, r22
    4694:	f7 1f       	adc	r31, r23
    4696:	9c 01       	movw	r18, r24
    4698:	22 50       	subi	r18, 0x02	; 2
    469a:	31 09       	sbc	r19, r1
    469c:	e2 17       	cp	r30, r18
    469e:	f3 07       	cpc	r31, r19
    46a0:	08 f4       	brcc	.+2      	; 0x46a4 <realloc+0x2e>
    46a2:	a8 c0       	rjmp	.+336    	; 0x47f4 <realloc+0x17e>
    46a4:	d9 01       	movw	r26, r18
    46a6:	0d 91       	ld	r16, X+
    46a8:	1c 91       	ld	r17, X
    46aa:	11 97       	sbiw	r26, 0x01	; 1
    46ac:	06 17       	cp	r16, r22
    46ae:	17 07       	cpc	r17, r23
    46b0:	b0 f0       	brcs	.+44     	; 0x46de <realloc+0x68>
    46b2:	05 30       	cpi	r16, 0x05	; 5
    46b4:	11 05       	cpc	r17, r1
    46b6:	08 f4       	brcc	.+2      	; 0x46ba <realloc+0x44>
    46b8:	9b c0       	rjmp	.+310    	; 0x47f0 <realloc+0x17a>
    46ba:	c8 01       	movw	r24, r16
    46bc:	04 97       	sbiw	r24, 0x04	; 4
    46be:	86 17       	cp	r24, r22
    46c0:	97 07       	cpc	r25, r23
    46c2:	08 f4       	brcc	.+2      	; 0x46c6 <realloc+0x50>
    46c4:	95 c0       	rjmp	.+298    	; 0x47f0 <realloc+0x17a>
    46c6:	02 50       	subi	r16, 0x02	; 2
    46c8:	11 09       	sbc	r17, r1
    46ca:	06 1b       	sub	r16, r22
    46cc:	17 0b       	sbc	r17, r23
    46ce:	01 93       	st	Z+, r16
    46d0:	11 93       	st	Z+, r17
    46d2:	6d 93       	st	X+, r22
    46d4:	7c 93       	st	X, r23
    46d6:	cf 01       	movw	r24, r30
    46d8:	0e 94 b2 22 	call	0x4564	; 0x4564 <free>
    46dc:	89 c0       	rjmp	.+274    	; 0x47f0 <realloc+0x17a>
    46de:	5b 01       	movw	r10, r22
    46e0:	a0 1a       	sub	r10, r16
    46e2:	b1 0a       	sbc	r11, r17
    46e4:	4c 01       	movw	r8, r24
    46e6:	80 0e       	add	r8, r16
    46e8:	91 1e       	adc	r9, r17
    46ea:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <__flp>
    46ee:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <__flp+0x1>
    46f2:	61 2c       	mov	r6, r1
    46f4:	71 2c       	mov	r7, r1
    46f6:	e1 2c       	mov	r14, r1
    46f8:	f1 2c       	mov	r15, r1
    46fa:	10 97       	sbiw	r26, 0x00	; 0
    46fc:	09 f4       	brne	.+2      	; 0x4700 <realloc+0x8a>
    46fe:	46 c0       	rjmp	.+140    	; 0x478c <realloc+0x116>
    4700:	8d 91       	ld	r24, X+
    4702:	9c 91       	ld	r25, X
    4704:	11 97       	sbiw	r26, 0x01	; 1
    4706:	a8 15       	cp	r26, r8
    4708:	b9 05       	cpc	r27, r9
    470a:	b1 f5       	brne	.+108    	; 0x4778 <realloc+0x102>
    470c:	6c 01       	movw	r12, r24
    470e:	42 e0       	ldi	r20, 0x02	; 2
    4710:	c4 0e       	add	r12, r20
    4712:	d1 1c       	adc	r13, r1
    4714:	ca 14       	cp	r12, r10
    4716:	db 04       	cpc	r13, r11
    4718:	78 f1       	brcs	.+94     	; 0x4778 <realloc+0x102>
    471a:	4c 01       	movw	r8, r24
    471c:	8a 18       	sub	r8, r10
    471e:	9b 08       	sbc	r9, r11
    4720:	64 01       	movw	r12, r8
    4722:	42 e0       	ldi	r20, 0x02	; 2
    4724:	c4 0e       	add	r12, r20
    4726:	d1 1c       	adc	r13, r1
    4728:	12 96       	adiw	r26, 0x02	; 2
    472a:	bc 90       	ld	r11, X
    472c:	12 97       	sbiw	r26, 0x02	; 2
    472e:	13 96       	adiw	r26, 0x03	; 3
    4730:	ac 91       	ld	r26, X
    4732:	b5 e0       	ldi	r27, 0x05	; 5
    4734:	cb 16       	cp	r12, r27
    4736:	d1 04       	cpc	r13, r1
    4738:	40 f0       	brcs	.+16     	; 0x474a <realloc+0xd4>
    473a:	b2 82       	std	Z+2, r11	; 0x02
    473c:	a3 83       	std	Z+3, r26	; 0x03
    473e:	91 82       	std	Z+1, r9	; 0x01
    4740:	80 82       	st	Z, r8
    4742:	d9 01       	movw	r26, r18
    4744:	6d 93       	st	X+, r22
    4746:	7c 93       	st	X, r23
    4748:	09 c0       	rjmp	.+18     	; 0x475c <realloc+0xe6>
    474a:	0e 5f       	subi	r16, 0xFE	; 254
    474c:	1f 4f       	sbci	r17, 0xFF	; 255
    474e:	80 0f       	add	r24, r16
    4750:	91 1f       	adc	r25, r17
    4752:	f9 01       	movw	r30, r18
    4754:	91 83       	std	Z+1, r25	; 0x01
    4756:	80 83       	st	Z, r24
    4758:	eb 2d       	mov	r30, r11
    475a:	fa 2f       	mov	r31, r26
    475c:	e1 14       	cp	r14, r1
    475e:	f1 04       	cpc	r15, r1
    4760:	31 f0       	breq	.+12     	; 0x476e <realloc+0xf8>
    4762:	d7 01       	movw	r26, r14
    4764:	13 96       	adiw	r26, 0x03	; 3
    4766:	fc 93       	st	X, r31
    4768:	ee 93       	st	-X, r30
    476a:	12 97       	sbiw	r26, 0x02	; 2
    476c:	41 c0       	rjmp	.+130    	; 0x47f0 <realloc+0x17a>
    476e:	f0 93 e7 03 	sts	0x03E7, r31	; 0x8003e7 <__flp+0x1>
    4772:	e0 93 e6 03 	sts	0x03E6, r30	; 0x8003e6 <__flp>
    4776:	3c c0       	rjmp	.+120    	; 0x47f0 <realloc+0x17a>
    4778:	68 16       	cp	r6, r24
    477a:	79 06       	cpc	r7, r25
    477c:	08 f4       	brcc	.+2      	; 0x4780 <realloc+0x10a>
    477e:	3c 01       	movw	r6, r24
    4780:	7d 01       	movw	r14, r26
    4782:	12 96       	adiw	r26, 0x02	; 2
    4784:	0d 90       	ld	r0, X+
    4786:	bc 91       	ld	r27, X
    4788:	a0 2d       	mov	r26, r0
    478a:	b7 cf       	rjmp	.-146    	; 0x46fa <realloc+0x84>
    478c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <__brkval>
    4790:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <__brkval+0x1>
    4794:	88 16       	cp	r8, r24
    4796:	99 06       	cpc	r9, r25
    4798:	e1 f4       	brne	.+56     	; 0x47d2 <realloc+0x15c>
    479a:	66 16       	cp	r6, r22
    479c:	77 06       	cpc	r7, r23
    479e:	c8 f4       	brcc	.+50     	; 0x47d2 <realloc+0x15c>
    47a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    47a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    47a8:	00 97       	sbiw	r24, 0x00	; 0
    47aa:	41 f4       	brne	.+16     	; 0x47bc <realloc+0x146>
    47ac:	8d b7       	in	r24, 0x3d	; 61
    47ae:	9e b7       	in	r25, 0x3e	; 62
    47b0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    47b4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    47b8:	84 1b       	sub	r24, r20
    47ba:	95 0b       	sbc	r25, r21
    47bc:	e8 17       	cp	r30, r24
    47be:	f9 07       	cpc	r31, r25
    47c0:	c8 f4       	brcc	.+50     	; 0x47f4 <realloc+0x17e>
    47c2:	f0 93 e5 03 	sts	0x03E5, r31	; 0x8003e5 <__brkval+0x1>
    47c6:	e0 93 e4 03 	sts	0x03E4, r30	; 0x8003e4 <__brkval>
    47ca:	f9 01       	movw	r30, r18
    47cc:	71 83       	std	Z+1, r23	; 0x01
    47ce:	60 83       	st	Z, r22
    47d0:	0f c0       	rjmp	.+30     	; 0x47f0 <realloc+0x17a>
    47d2:	cb 01       	movw	r24, r22
    47d4:	0e 94 1a 22 	call	0x4434	; 0x4434 <malloc>
    47d8:	7c 01       	movw	r14, r24
    47da:	00 97       	sbiw	r24, 0x00	; 0
    47dc:	59 f0       	breq	.+22     	; 0x47f4 <realloc+0x17e>
    47de:	a8 01       	movw	r20, r16
    47e0:	be 01       	movw	r22, r28
    47e2:	0e 94 01 24 	call	0x4802	; 0x4802 <memcpy>
    47e6:	ce 01       	movw	r24, r28
    47e8:	0e 94 b2 22 	call	0x4564	; 0x4564 <free>
    47ec:	c7 01       	movw	r24, r14
    47ee:	04 c0       	rjmp	.+8      	; 0x47f8 <realloc+0x182>
    47f0:	ce 01       	movw	r24, r28
    47f2:	02 c0       	rjmp	.+4      	; 0x47f8 <realloc+0x182>
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	cd b7       	in	r28, 0x3d	; 61
    47fa:	de b7       	in	r29, 0x3e	; 62
    47fc:	ee e0       	ldi	r30, 0x0E	; 14
    47fe:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__epilogue_restores__+0x8>

00004802 <memcpy>:
    4802:	fb 01       	movw	r30, r22
    4804:	dc 01       	movw	r26, r24
    4806:	02 c0       	rjmp	.+4      	; 0x480c <memcpy+0xa>
    4808:	01 90       	ld	r0, Z+
    480a:	0d 92       	st	X+, r0
    480c:	41 50       	subi	r20, 0x01	; 1
    480e:	50 40       	sbci	r21, 0x00	; 0
    4810:	d8 f7       	brcc	.-10     	; 0x4808 <memcpy+0x6>
    4812:	08 95       	ret

00004814 <strcpy>:
    4814:	fb 01       	movw	r30, r22
    4816:	dc 01       	movw	r26, r24
    4818:	01 90       	ld	r0, Z+
    481a:	0d 92       	st	X+, r0
    481c:	00 20       	and	r0, r0
    481e:	e1 f7       	brne	.-8      	; 0x4818 <strcpy+0x4>
    4820:	08 95       	ret

00004822 <__prologue_saves__>:
    4822:	2f 92       	push	r2
    4824:	3f 92       	push	r3
    4826:	4f 92       	push	r4
    4828:	5f 92       	push	r5
    482a:	6f 92       	push	r6
    482c:	7f 92       	push	r7
    482e:	8f 92       	push	r8
    4830:	9f 92       	push	r9
    4832:	af 92       	push	r10
    4834:	bf 92       	push	r11
    4836:	cf 92       	push	r12
    4838:	df 92       	push	r13
    483a:	ef 92       	push	r14
    483c:	ff 92       	push	r15
    483e:	0f 93       	push	r16
    4840:	1f 93       	push	r17
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	cd b7       	in	r28, 0x3d	; 61
    4848:	de b7       	in	r29, 0x3e	; 62
    484a:	ca 1b       	sub	r28, r26
    484c:	db 0b       	sbc	r29, r27
    484e:	0f b6       	in	r0, 0x3f	; 63
    4850:	f8 94       	cli
    4852:	de bf       	out	0x3e, r29	; 62
    4854:	0f be       	out	0x3f, r0	; 63
    4856:	cd bf       	out	0x3d, r28	; 61
    4858:	09 94       	ijmp

0000485a <__epilogue_restores__>:
    485a:	2a 88       	ldd	r2, Y+18	; 0x12
    485c:	39 88       	ldd	r3, Y+17	; 0x11
    485e:	48 88       	ldd	r4, Y+16	; 0x10
    4860:	5f 84       	ldd	r5, Y+15	; 0x0f
    4862:	6e 84       	ldd	r6, Y+14	; 0x0e
    4864:	7d 84       	ldd	r7, Y+13	; 0x0d
    4866:	8c 84       	ldd	r8, Y+12	; 0x0c
    4868:	9b 84       	ldd	r9, Y+11	; 0x0b
    486a:	aa 84       	ldd	r10, Y+10	; 0x0a
    486c:	b9 84       	ldd	r11, Y+9	; 0x09
    486e:	c8 84       	ldd	r12, Y+8	; 0x08
    4870:	df 80       	ldd	r13, Y+7	; 0x07
    4872:	ee 80       	ldd	r14, Y+6	; 0x06
    4874:	fd 80       	ldd	r15, Y+5	; 0x05
    4876:	0c 81       	ldd	r16, Y+4	; 0x04
    4878:	1b 81       	ldd	r17, Y+3	; 0x03
    487a:	aa 81       	ldd	r26, Y+2	; 0x02
    487c:	b9 81       	ldd	r27, Y+1	; 0x01
    487e:	ce 0f       	add	r28, r30
    4880:	d1 1d       	adc	r29, r1
    4882:	0f b6       	in	r0, 0x3f	; 63
    4884:	f8 94       	cli
    4886:	de bf       	out	0x3e, r29	; 62
    4888:	0f be       	out	0x3f, r0	; 63
    488a:	cd bf       	out	0x3d, r28	; 61
    488c:	ed 01       	movw	r28, r26
    488e:	08 95       	ret

00004890 <_exit>:
    4890:	f8 94       	cli

00004892 <__stop_program>:
    4892:	ff cf       	rjmp	.-2      	; 0x4892 <__stop_program>
